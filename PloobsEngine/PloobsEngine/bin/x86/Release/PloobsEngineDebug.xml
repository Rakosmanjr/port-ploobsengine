<?xml version="1.0"?>
<doc>
  <assembly>
    <name>PloobsEngineDebug</name>
  </assembly>
  <members>
    <member name="T:PloobsEngine.Utils.MathUtils">
      <summary>
            Lots of Math Helper Functions
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.PointInsideBoundingBox(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.BoundingBox)">
      <summary>
            Check if a point lies inside a <see cref="T:Microsoft.Xna.Framework.BoundingBox" /></summary>
      <param name="point">3D Point</param>
      <param name="box">Bounding box</param>
      <returns>
            True if point lies inside the bounding box
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.PointInsideCone(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Double)">
      <summary>
            Check if a point lies inside a conical region. Good for checking if a point lies in something's
            field-of-view cone.
            </summary>
      <param name="point">Point to check</param>
      <param name="coneOrigin">Cone's origin</param>
      <param name="coneDirection">Cone's forward direction</param>
      <param name="coneAngle">Cone's theta angle (radians)</param>
      <returns>
            True if point is inside the conical region
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.PointInsideBoundingSphere(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>
            Check if a point lies inside of a <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.
            </summary>
      <param name="point">3D Point</param>
      <param name="sphere">Sphere to check against</param>
      <returns>
            True if point is inside of the sphere
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.PointInsideSphere(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Check if a point lies in a sphere. Good for checking is a point lies within a specific
            distance of another point, like proximity checking.
            </summary>
      <param name="point">3D Point</param>
      <param name="sphereCenter">Sphere's center</param>
      <param name="sphereRadius">Sphere's radius</param>
      <returns>
            True if point is inside of the sphere
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.IsPowerOfTwo(System.Int32)">
      <summary>
            Check if the parameter is power of two
            </summary>
      <param name="Value">The value.</param>
      <returns>
        <c>true</c> if [is power of two] [the specified value]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.Interpolate(System.Single,System.Single,System.Single)">
      <summary>
            SImple Linear interpolation
            </summary>
      <param name="alpha">The alpha.</param>
      <param name="x0">The x0.</param>
      <param name="x1">The x1.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.Interpolate(System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Linear Interpolates with the specified alpha.
            </summary>
      <param name="alpha">The alpha.</param>
      <param name="x0">The x0.</param>
      <param name="x1">The x1.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.Clip(System.Single,System.Single,System.Single)">
      <summary>
            Constrain a given value (x) to be between two (ordered) bounds min
            and max.
            </summary>
      <param name="x">The x.</param>
      <param name="min">The min.</param>
      <param name="max">The max.</param>
      <returns>
            Returns x if it is between the bounds, otherwise returns the nearer bound.
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.RemapInterval(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            remap a value specified relative to a pair of bounding values
            to the corresponding value relative to another pair of bounds.
            Inspired by (dyna:remap-interval y y0 y1 z0 z1)
            </summary>
      <param name="x">The x.</param>
      <param name="in0">The in0.</param>
      <param name="in1">The in1.</param>
      <param name="out0">The out0.</param>
      <param name="out1">The out1.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.RemapIntervalClip(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Like remapInterval but the result is clipped to remain between
            out0 and out1
            </summary>
      <param name="x">The x.</param>
      <param name="in0">The in0.</param>
      <param name="in1">The in1.</param>
      <param name="out0">The out0.</param>
      <param name="out1">The out1.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.IntervalComparison(System.Single,System.Single,System.Single)">
      <summary>
            classify a value relative to the interval between two bounds:
                returns -1 when below the lower bound
                returns  0 when between the bounds (inside the interval)
                returns +1 when above the upper bound
            </summary>
      <param name="x">The x.</param>
      <param name="lowerBound">The lower bound.</param>
      <param name="upperBound">The upper bound.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.ScalarRandomWalk(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Scalar random walk.
            </summary>
      <param name="initial">The initial.</param>
      <param name="walkspeed">The walkspeed.</param>
      <param name="min">The min.</param>
      <param name="max">The max.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.BlendIntoAccumulator(System.Single,System.Single,System.Single@)">
      <summary>
            blends new values into an accumulator to produce a smoothed time series
            </summary>
      <param name="smoothRate">The smooth rate.</param>
      <param name="newValue">The new value.</param>
      <param name="smoothedAccumulator">The smoothed accumulator.</param>
      <example>blendIntoAccumulator (dt * 0.4f, currentFPS, smoothedFPS)</example>
      <remarks>
            Modifies its third argument, a reference to the float accumulator holding
            the "smoothed time series."
            The first argument (smoothRate) is typically made proportional to "dt" the
            simulation time step.  If smoothRate is 0 the accumulator will not change,
            if smoothRate is 1 the accumulator will be set to the new value with no
            smoothing.  Useful values are "near zero".
            </remarks>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.BlendIntoAccumulator(System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Blends the parameter into the accumulator.
            </summary>
      <param name="smoothRate">The smooth rate.</param>
      <param name="newValue">The new value.</param>
      <param name="smoothedAccumulator">The smoothed accumulator.</param>
    </member>
    <member name="M:PloobsEngine.Utils.MathUtils.CreateRotationFromLine(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Creates the rotation from line.
            </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Trigger.ITrigger">
      <summary>
            Trigger Specification
            </summary>
    </member>
    <member name="P:PloobsEngine.Trigger.ITrigger.Event">
      <summary>
            Gets or sets the event fired when the trigger is activated.
            </summary>
      <value>
            The event.
            </value>
    </member>
    <member name="P:PloobsEngine.Trigger.ITrigger.Name">
      <summary>
            Gets or sets the name of the trigger.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:PloobsEngine.Trigger.ITrigger.GhostObject">
      <summary>
            Gets or sets the ghost object that gives the SHAPE of the trigger.
            </summary>
      <value>
            The ghost object.
            </value>
    </member>
    <member name="T:PloobsEngine.Trigger.BepuTrigger">
      <summary>
            Bepu Implementation of a trigger
            </summary>
    </member>
    <member name="F:PloobsEngine.Trigger.BepuTrigger.FireBeginsTouching">
      <summary>
            FireBeginsTouching 
            </summary>
    </member>
    <member name="F:PloobsEngine.Trigger.BepuTrigger.FireEndsTouching">
      <summary>
            FireEndsTouching 
            </summary>
    </member>
    <member name="F:PloobsEngine.Trigger.BepuTrigger.FireBeginsContaining">
      <summary>
            FireBeginsContaining 
            </summary>
    </member>
    <member name="F:PloobsEngine.Trigger.BepuTrigger.FireEndsContaining">
      <summary>
            FireEndsContaining
            </summary>
    </member>
    <member name="M:PloobsEngine.Trigger.BepuTrigger.#ctor(PloobsEngine.Physics.BepuPhysicWorld,PloobsEngine.Physics.Bepu.TriangleMeshObject,PloobsEngine.Trigger.TriggerEvent,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Trigger creation
            </summary>
      <param name="physicWorld">The physic world.</param>
      <param name="triangleMesh">Triangle mesh representing the Volume of the Trigger</param>
      <param name="evt">Event to be fired</param>
      <param name="fireBeginsTouching">if set to <c>true</c> [fire begins touching].</param>
      <param name="fireEndsTouching">if set to <c>true</c> [fire ends touching].</param>
      <param name="fireBeginsContaining">if set to <c>true</c> [fire begins containing].</param>
      <param name="fireEndsContaining">if set to <c>true</c> [fire ends containing].</param>
    </member>
    <member name="P:PloobsEngine.Trigger.BepuTrigger.ContactEntity">
      <summary>
            Gets the contact entity.
            </summary>
    </member>
    <member name="P:PloobsEngine.Trigger.BepuTrigger.Name">
      <summary>
            Gets or sets the name of the trigger.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:PloobsEngine.Trigger.BepuTrigger.Event">
      <summary>
            Gets or sets the event fired when the trigger is activated.
            </summary>
      <value>
            The event.
            </value>
    </member>
    <member name="P:PloobsEngine.Trigger.BepuTrigger.GhostObject">
      <summary>
            Gets or sets the ghost object that gives the SHAPE of the trigger.
            </summary>
      <value>
            The ghost object.
            </value>
    </member>
    <member name="T:PloobsEngine.Utils.TokenHelper">
      <summary>
            Token Helper used for RPN calculator
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.TokenHelper.IsOperator(System.String)">
      <summary>
            Determines whether the specified token is operator.
            </summary>
      <param name="token">The token.</param>
      <returns>
        <c>true</c> if the specified token is operator; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.TokenHelper.GetPrecedenceFor(System.String)">
      <summary>
            Gets the precedence for.
            </summary>
      <param name="token">The token.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.TokenHelper.IsNumber(System.String)">
      <summary>
            Determines whether the specified token is number.
            </summary>
      <param name="token">The token.</param>
      <returns>
        <c>true</c> if the specified token is number; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.TokenHelper.IsFunction(System.String)">
      <summary>
            Determines whether the specified token is function.
            </summary>
      <param name="token">The token.</param>
      <returns>
        <c>true</c> if the specified token is function; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.TokenHelper.IsLeftAssociative(System.String)">
      <summary>
            Determines whether [is left associative] [the specified token].
            </summary>
      <param name="token">The token.</param>
      <returns>
        <c>true</c> if [is left associative] [the specified token]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.TokenHelper.IsRightAssociative(System.String)">
      <summary>
            Determines whether [is right associative] [the specified token].
            </summary>
      <param name="token">The token.</param>
      <returns>
        <c>true</c> if [is right associative] [the specified token]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:PloobsEngine.Modelo.ModelBuilderHelper">
      <summary>
            Helper to extract Information from XNA MOdels
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo.ModelBuilderHelper.Extract(Microsoft.Xna.Framework.Graphics.Model,PloobsEngine.Modelo.BatchInformation[][]@)">
      <summary>
            Creaters a BATCHInformation from a xna Model
            </summary>
      <param name="model">The model.</param>
      <param name="batchInformationS">The batch information S.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.ModelBuilderHelper.Extract(Microsoft.Xna.Framework.Matrix[],Microsoft.Xna.Framework.Graphics.ModelMeshPart,PloobsEngine.Modelo.BatchInformation@)">
      <summary>
            Creates a BatchInformation from a XNA ModelMesh
            </summary>
      <param name="BonesAbsoluteTransforms">The bones absolute transforms.</param>
      <param name="mesh">The mesh.</param>
      <param name="batchInformationS">The batch information S.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.ModelBuilderHelper.ExtractModelMeshPartData(Microsoft.Xna.Framework.Graphics.ModelMeshPart,Microsoft.Xna.Framework.Matrix@,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.List{System.Int32})">
      <summary>
            Extracts the model mesh part data.
            </summary>
      <param name="meshPart">The mesh part.</param>
      <param name="transform">The transform.</param>
      <param name="vertices">The vertices.</param>
      <param name="indices">The indices.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.ModelBuilderHelper.ExtractModelRadiusAndCenter(PloobsEngine.Modelo.BatchInformation,System.Single@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Extracts the model radius and center.
            </summary>
      <param name="bi">The bi.</param>
      <param name="radius">The radius.</param>
      <param name="center">The center.</param>
    </member>
    <member name="T:PloobsEngine.Input.IInput">
      <summary>
            Interface for an Input Processor
            </summary>
    </member>
    <member name="T:PloobsEngine.DataStructure.Pool`1">
      <summary>
            A collection that maintains a set of class instances to allow for recycling
            instances and minimizing the effects of garbage collection.
            </summary>
      <typeparam name="T">The type of object to store in the Pool. Pools can only hold class types.</typeparam>
    </member>
    <member name="M:PloobsEngine.DataStructure.Pool`1.#ctor(System.Int32,System.Boolean,System.Predicate{`0},System.Func{`0})">
      <summary>
            Creates a new pool with a specific starting size.
            </summary>
      <param name="initialSize">The initial size of the pool.</param>
      <param name="resizes">Whether or not the pool is allowed to increase its size as needed.</param>
      <param name="validateFunc">A predicate used to determine if a given object is still valid.</param>
      <param name="allocateFunc">A function used to allocate an instance for the pool.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.Pool`1.CleanUp">
      <summary>
            Cleans up the pool by checking each valid object to ensure it is still actually valid.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.Pool`1.New">
      <summary>
            Returns a new object from the Pool.
            </summary>
      <returns>The next object in the pool if available, null if all instances are valid.</returns>
    </member>
    <member name="P:PloobsEngine.DataStructure.Pool`1.Initialize">
      <summary>
            Gets or sets a delegate used for initializing objects before returning them from the New method.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.Pool`1.Deinitialize">
      <summary>
            Gets or sets a delegate that is run when an object is moved from being valid to invalid
            in the CleanUp method.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.Pool`1.ValidCount">
      <summary>
            Gets the number of valid objects in the pool.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.Pool`1.InvalidCount">
      <summary>
            Gets the number of invalid objects in the pool.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.Pool`1.Item(System.Int32)">
      <summary>
            Returns a valid object at the given index. The index must fall in the range of [0, ValidCount].
            </summary>
      <param name="index">The index of the valid object to get</param>
      <returns>A valid object found at the index</returns>
    </member>
    <member name="T:PloobsEngine.SceneControl.IDeferredGBuffer">
      <summary>
            GBUffer generation specification
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredGBuffer.SetGBuffer(PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Sets the G buffer.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredGBuffer.ResolveGBuffer(PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Resolves the G buffer.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredGBuffer.ClearGBuffer(PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Clears the G buffer.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredGBuffer.PreDrawScene(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IWorld,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.Engine.GraphicInfo,System.Collections.Generic.List{PloobsEngine.SceneControl.IObject})">
      <summary>
            Pre Draw the scene.
            Responsible to the PreDraw phase
            </summary>
      <param name="gameTime">The game time.</param>
      <param name="world">The world.</param>
      <param name="render">The render.</param>
      <param name="ginfo">The ginfo.</param>
      <param name="objectsToPreDraw">The objects to pre draw.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredGBuffer.DrawScene(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IWorld,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.Engine.GraphicInfo,System.Collections.Generic.List{PloobsEngine.SceneControl.IObject})">
      <summary>
            Draws.
            Generate the GBuffer
            </summary>
      <param name="gameTime">The game time.</param>
      <param name="world">The world.</param>
      <param name="render">The render.</param>
      <param name="ginfo">The ginfo.</param>
      <param name="objectsToPreDraw">The objects to pre draw.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredGBuffer.LoadContent(PloobsEngine.SceneControl.IContentManager,PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,Microsoft.Xna.Framework.Color)">
      <summary>
            Loads the content.
            </summary>
      <param name="manager">The manager.</param>
      <param name="ginfo">The ginfo.</param>
      <param name="factory">The factory.</param>
      <param name="BackGroundColor">Color of the back ground.</param>
    </member>
    <member name="P:PloobsEngine.SceneControl.IDeferredGBuffer.Item(PloobsEngine.SceneControl.GBufferTypes)">
      <summary>
            Return the generated Buffers
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.GBufferTypes">
      <summary>
            Buffer Types used
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.GBufferTypes.DEPH">
      <summary>
            Depth
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.GBufferTypes.COLOR">
      <summary>
            Color
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.GBufferTypes.NORMAL">
      <summary>
            Normal
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.GBufferTypes.Extra1">
      <summary>
            Glow
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.GBufferTypes.FINALIMAGE">
      <summary>
            Final image
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.BeingRemoved">
      <summary>
            Called when the object is being removed
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.OnUpdate">
      <summary>
            Called on every update
            </summary>
      <param name="obj">The obj.</param>
      <param name="gt">The gt.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.OnRecieveMessage">
      <summary>
            called when the object recieves a message
            </summary>
      <param name="Reciever">The reciever.</param>
      <param name="mes">The mes.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.OnHasMoved">
      <summary>
            Called when the object moves
            </summary>
      <param name="Reciever">The reciever.</param>
    </member>
    <member name="T:PloobsEngine.Entity.IEntity">
      <summary>
            Represents a generic entity
            </summary>
    </member>
    <member name="M:PloobsEngine.Entity.IEntity.GetId">
      <summary>
            return the entity id
            </summary>
      <returns>the id</returns>
    </member>
    <member name="M:PloobsEngine.Entity.IEntity.SetId(System.Int64)">
      <summary>
            sets the id
            </summary>
      <param name="id">
      </param>
    </member>
    <member name="T:PloobsEngine.MessageSystem.IRecieveMessageEntity">
      <summary>
            Entity that can recieve a message
            </summary>
    </member>
    <member name="M:PloobsEngine.MessageSystem.IRecieveMessageEntity.HandleThisMessageType(PloobsEngine.MessageSystem.SenderType)">
      <summary>
            Handles a message from determined sender type.
            </summary>
      <param name="type">Sender type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.MessageSystem.IRecieveMessageEntity.HandleMessage(PloobsEngine.MessageSystem.Message)">
      <summary>
            Handles the message.
            </summary>
      <param name="mes">The mes.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.I2DObject">
      <summary>
            2D Object
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DObject.UpdateObject(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates the object.
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DObject.HandleThisMessageType(PloobsEngine.MessageSystem.SenderType)">
      <summary>
            Handles a message from determined sender type.
            </summary>
      <param name="type">Sender type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DObject.HandleMessage(PloobsEngine.MessageSystem.Message)">
      <summary>
            Handles the message.
            </summary>
      <param name="mes">The mes.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DObject.RemoveThisObject">
      <summary>
            Removes this object.
            Called internally
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DObject.GetId">
      <summary>
            return the entity id
            </summary>
      <returns>
            the id
            </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DObject.SetId(System.Int64)">
      <summary>
            sets the id
            </summary>
      <param name="id">
      </param>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DObject.PhysicObject">
      <summary>
            Gets or sets the physic object.
            </summary>
      <value>
            The physic object.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DObject.Material">
      <summary>
            Gets or sets the material.
            </summary>
      <value>
            The material.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DObject.Modelo">
      <summary>
            Gets or sets the modelo.
            </summary>
      <value>
            The modelo.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DObject.Name">
      <summary>
            Gets or sets the name of the object.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DObject.I2DObjectAtachtment">
      <summary>
            Gets or sets the Iobject atachtment.
            </summary>
      <value>
            The I object atachtment.
            </value>
    </member>
    <member name="E:PloobsEngine.SceneControl._2DScene.I2DObject.OnRecieveMessage">
      <summary>
            Occurs when [on recieve message].
            </summary>
    </member>
    <member name="E:PloobsEngine.SceneControl._2DScene.I2DObject.OnBeingRemoved">
      <summary>
            Called when this object is removed from the world
            </summary>
    </member>
    <member name="E:PloobsEngine.SceneControl._2DScene.I2DObject.OnHasMoved">
      <summary>
            Raised when objects moves
            </summary>
    </member>
    <member name="E:PloobsEngine.SceneControl._2DScene.I2DObject.OnUpdate">
      <summary>
            Called all the time the object is updated
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.IPhysicObject">
      <summary>
            Specification of a physic Object
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.IPhysicObject.ApplyImpulse(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Applies an impulse.
            </summary>
      <param name="position">The position.</param>
      <param name="force">The force.</param>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicObject.Position">
      <summary>
            Gets or sets the position.
            </summary>
      <value>
            The position.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicObject.Scale">
      <summary>
            Gets or sets the scale.
            </summary>
      <value>
            The scale.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicObject.Rotation">
      <summary>
            Gets or sets the rotation.
            </summary>
      <value>
            The rotation.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicObject.FaceVector">
      <summary>
            Vector pointing to the front
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicObject.WorldMatrix">
      <summary>
            Gets the world matrix.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicObject.Velocity">
      <summary>
            Gets or sets the velocity.
            </summary>
      <value>
            The velocity.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicObject.isMotionLess">
      <summary>
            Gets or sets a value indicating whether this instance is motion less.
            </summary>
      <value>
        <c>true</c> if this instance is motion less; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicObject.ObjectOwner">
      <summary>
            Gets or sets the IObject owner.
            </summary>
      <value>
            The IObject owner.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicObject.PhysicObjectTypes">
      <summary>
            Gets the physic object type.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicObject.BoundingBox">
      <summary>
            Gets the bounding box IN WORLD COORDINATES
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicObject.AngularVelocity">
      <summary>
            Gets or sets the angular velocity.
            </summary>
      <value>
            The angular velocity.
            </value>
    </member>
    <member name="T:PloobsEngine.Physics.Bepu.BepuEntityObject">
      <summary>
            Base class for Bepu entities
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.BepuEntityObject.SetMaterialDescription(PloobsEngine.Physics.MaterialDescription)">
      <summary>
            Sets the material description.
            </summary>
      <param name="materialDescription">The material description.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.BepuEntityObject.GetMaterialDescription">
      <summary>
            Gets the material description.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.BepuEntityObject.RecoverIPhysicObjectFromEntity(BEPUphysics.Entities.Entity)">
      <summary>
            [Utility] Recovers the physic object from entity.
            </summary>
      <param name="entity">The entity.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.BepuEntityObject.RecoverObjectFromEntity(BEPUphysics.Entities.Entity)">
      <summary>
            [Utility] Recovers the object from entity.
            </summary>
      <param name="entity">The entity.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.BepuEntityObject.RecoverObjectFromCollidable(BEPUphysics.Collidables.Collidable)">
      <summary>
            [Utility] Recovers the object from collidable.
            </summary>
      <param name="collidable">The collidable.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.BepuEntityObject.RecoverObjectFromBroadPhase(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Recovers iobject from broad phase entry.
            </summary>
      <param name="entry">The entry.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.BepuEntityObject.RecoverIPhysicObjectFromBroadPhase(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Recovers physicobject from broad phase entry.
            </summary>
      <param name="entry">The entry.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.BepuEntityObject.#ctor(PloobsEngine.Physics.MaterialDescription,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Physics.Bepu.BepuEntityObject" /> class.
            </summary>
      <param name="md">The md.</param>
      <param name="mass">The mass.</param>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.BepuEntityObject.Entity">
      <summary>
            Gets or sets the entity.
            </summary>
      <value>
            The entity.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.BepuEntityObject.Position">
      <summary>
            Gets or sets the position.
            </summary>
      <value>
            The position.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.BepuEntityObject.Scale">
      <summary>
            Gets or sets the scale.
            CARE USING THIS, the scale will be uniform to all axis
            </summary>
      <value>
            The scale.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.BepuEntityObject.Rotation">
      <summary>
            Gets or sets the rotation.
            </summary>
      <value>
            The rotation.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.BepuEntityObject.FaceVector">
      <summary>
            Vector pointing to the front
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.BepuEntityObject.WorldMatrix">
      <summary>
            Gets the world matrix.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.BepuEntityObject.Velocity">
      <summary>
            Gets or sets the velocity.
            </summary>
      <value>
            The velocity.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.BepuEntityObject.ObjectOwner">
      <summary>
            Gets or sets the IObject owner.
            </summary>
      <value>
            The IObject owner.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.BepuEntityObject.BoundingBox">
      <summary>
            Gets the bounding box IN WORLD COORDINATES
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.Bepu.GhostObject">
      <summary>
            Fake Physic object, not simulated
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.GhostObject.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.BoundingBox})">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Physics.Bepu.GhostObject" /> class.
            </summary>
      <param name="position">The position.</param>
      <param name="orientation">The orientation.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.GhostObject.#ctor(System.Nullable{Microsoft.Xna.Framework.BoundingBox})">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Physics.Bepu.GhostObject" /> class.
            DEfault Object in 0,0,0 identity rotation and 1,1,1 scale
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.collisionPairCollector">
      <summary>
            A box positioned relative to the character's body used to identify collision pairs with nearby objects that could be possibly stood upon.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.collisionPairCollectorPositionOffset">
      <summary>
            The displacement vector from the center of the character body capsule to the center of the collision pair collector box entity.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.rayOriginOffset">
      <summary>
            The displacement vector from the center of the character body capsule to the origin of the ray used to find supports.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.supportHeight">
      <summary>
            The distance above the ground that the bottom of the character's body floats.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.Acceleration">
      <summary>
            Rate of increase in the character's speed in the movementDirection.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.Body">
      <summary>
            The character's physical representation that handles iteractions with the environment.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.HasTraction">
      <summary>
            Whether or not the character is currently standing on anything that can be walked upon.
            False if there exists no support or the support is too heavily sloped, otherwise true.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.IsSupported">
      <summary>
            Whether or not the character is currently standing on anything.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.JumpSpeed">
      <summary>
            Initial vertical speed when jumping.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.MaxSlope">
      <summary>
            The maximum slope under which walking forces can be applied.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.MaxSpeed">
      <summary>
            Maximum speed in the movementDirection that can be attained.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.MovementDirection">
      <summary>
            Normalized direction which the character tries to move.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.SlidingDeceleration">
      <summary>
            Deceleration applied to oppose horizontal movement when the character does not have a steady foothold on the ground (hasTraction == false).
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.Bepu.CharacterController.TractionDeceleration">
      <summary>
            Deceleration applied to oppose uncontrolled horizontal movement when the character has a steady foothold on the ground (hasTraction == true).
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.CharacterController.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a simple character controller.
            </summary>
      <param name="position">Location to initially place the character.</param>
      <param name="characterHeight">The height of the character.</param>
      <param name="characterWidth">The diameter of the character.</param>
      <param name="supportHeight">The distance above the ground that the bottom of the character's body floats.</param>
      <param name="mass">Total mass of the character.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.CharacterController.FindSupport(BEPUphysics.Entities.Entity@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>
            Locates the closest support entity by performing a raycast at collected candidates.
            </summary>
      <param name="supportEntity">The closest supporting entity.</param>
      <param name="supportLocation">The support location where the ray hit the entity.</param>
      <param name="supportNormal">The normal at the surface where the ray hit the entity.</param>
      <param name="supportDistance">Distance from the character to the support location.</param>
      <returns>Whether or not a support was located.</returns>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.CharacterController.IsSupportSlopeWalkable(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Determines if the ground supporting the character is sloped gently enough to allow for normal walking.
            </summary>
      <param name="supportNormal">Normal of the surface being stood upon.</param>
      <returns>Whether or not the slope is walkable.</returns>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.CharacterController.Support(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Maintains the position of the character's body above the ground.
            </summary>
      <param name="supportLocationVelocity">Velocity of the support point connected to the supportEntity.</param>
      <param name="supportNormal">The normal at the surface where the ray hit the entity.</param>
      <param name="supportDistance">Distance from the character to the support location.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.CharacterController.HandleHorizontalMotion(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Manages movement acceleration, deceleration, and sliding.
            </summary>
      <param name="supportLocationVelocity">Velocity of the support point connected to the supportEntity.</param>
      <param name="supportNormal">The normal at the surface where the ray hit the entity.</param>
      <param name="dt">Timestep of the simulation.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.CharacterController.Jump">
      <summary>
            If the character has a support, it leaps into the air based on its jumpSpeed.
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.CharacterController.Activate">
      <summary>
            Activates the character, adding its components to the space. 
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.CharacterController.Deactivate">
      <summary>
            Deactivates the character, removing its components from the space.
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.CharacterController.OnAdditionToSpace(BEPUphysics.ISpace)">
      <summary>
            Called by the engine when the character is added to the space.
            Activates the character.
            </summary>
      <param name="newSpace">Space to which the character was added.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.CharacterController.OnRemovalFromSpace(BEPUphysics.ISpace)">
      <summary>
            Called by the engine when the character is removed from the space.
            Deactivates the character.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.CharacterController.Position">
      <summary>
            Gets and sets the position of the character.
            </summary>
    </member>
    <member name="T:PloobsEngine.Particles.IParticleSystem">
      <summary>
            Particle system specification
            </summary>
    </member>
    <member name="M:PloobsEngine.Particles.IParticleSystem.#ctor(System.String,System.Nullable{Microsoft.Xna.Framework.BoundingBox})">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Particles.IParticleSystem" /> class.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="P:PloobsEngine.Particles.IParticleSystem.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="T:PloobsEngine.Particles.DPFSParticleSystem">
      <summary>
            DPSF particle system implementation
            </summary>
    </member>
    <member name="M:PloobsEngine.Particles.DPFSParticleSystem.#ctor(System.String,DPSF.IDPSFParticleSystem)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Particles.DPFSParticleSystem" /> class.
            </summary>
      <param name="name">The name.</param>
      <param name="IDPSFParticleSystem">The IDPSF particle system.</param>
    </member>
    <member name="P:PloobsEngine.Particles.DPFSParticleSystem.IDPSFParticleSystem">
      <summary>
            Gets or sets the IDPSF particle system.
            </summary>
      <value>
            The IDPSF particle system.
            </value>
    </member>
    <member name="T:PloobsEngine.Features.DebugDraw.IDebugDrawShape">
      <summary>
            Interface to define a specific Debug Shape
            </summary>
    </member>
    <member name="F:PloobsEngine.Features.DebugDraw.DebugBox.effect">
      <summary>
            The basic effect used to draw boxes.
            </summary>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugBox.#ctor(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Color)">
      <summary>
            Creates a new box.
            Visible by default
            </summary>
      <param name="BoundingBox">The bounding box.</param>
      <param name="color">The box's color.</param>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugBox.Draw(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>
            Draws the box.
            </summary>
      <param name="render">The render.</param>
      <param name="view">The viewing matrix.</param>
      <param name="projection">The projection matrix.</param>
    </member>
    <member name="T:PloobsEngine.Cameras.ICamera">
      <summary>
            Specification of a camera
            </summary>
    </member>
    <member name="M:PloobsEngine.Cameras.ICamera.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates .
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.Cameras.ICamera.CleanUp">
      <summary>
            Called when the attached screen is removed
            If this camera is not attached to a screen, this method is not called =P
            </summary>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.Hasmoved">
      <summary>
            Gets a value indicating whether this <see cref="T:PloobsEngine.Cameras.ICamera" /> has moved.
            </summary>
      <value>
        <c>true</c> if hasmoved; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.Position">
      <summary>
            Gets or sets the position.
            </summary>
      <value>
            The position.
            </value>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.Target">
      <summary>
            Gets or sets the target.
            </summary>
      <value>
            The target.
            </value>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.Up">
      <summary>
            Gets or sets up vector.
            </summary>
      <value>
            Up.
            </value>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.Rotation">
      <summary>
            Gets or sets the rotation.
            </summary>
      <value>
            The rotation.
            </value>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.FieldOfView">
      <summary>
            Gets or sets the field of view.
            </summary>
      <value>
            The field of view.
            </value>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.AspectRatio">
      <summary>
            Gets or sets the aspect ratio.
            </summary>
      <value>
            The aspect ratio.
            </value>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.NearPlane">
      <summary>
            Gets or sets the near plane.
            </summary>
      <value>
            The near plane.
            </value>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.FarPlane">
      <summary>
            Gets or sets the far plane.
            </summary>
      <value>
            The far plane.
            </value>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.View">
      <summary>
            Gets the view.
            </summary>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.Projection">
      <summary>
            Gets the projection.
            </summary>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.ViewProjection">
      <summary>
            Gets the view projection.
            </summary>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.BoundingFrustum">
      <summary>
            Gets the bounding frustum.
            </summary>
    </member>
    <member name="P:PloobsEngine.Cameras.ICamera.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="T:PloobsEngine.IA.StateMachine">
      <summary>
            Ploobs State Machine
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.StateMachine.AddState(PloobsEngine.IA.IState)">
      <summary>
            Add a state to the FSM
            The first added state will be the current state (call SetCurrentState to change it)
            </summary>
      <param name="state">
      </param>
    </member>
    <member name="M:PloobsEngine.IA.StateMachine.SetCurrentState(System.String)">
      <summary>
            Set the current state
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:PloobsEngine.IA.StateMachine.GetCurrentState">
      <summary>
            Get current state
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.IA.StateMachine.UpdateFSM(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates the FSM.
            </summary>
      <param name="gameTime">The game time.</param>
    </member>
    <member name="T:PloobsEngine.Utils.Spline.UnitTestSpline">
      <summary>
            Unit tests for CubicSpline class.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineExceptionOnNoPointsAdded">
      <summary>
            Test exception when trying to interpolate with no points added.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineExceptionOnOnlyOnePointAdded">
      <summary>
            Test exception when trying to interpolate with only one point added.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineExceptionInvalidDimension">
      <summary>
            Test exception when trying to create spline with wrong dimension.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineExceptionAddingWithDimensionMismatch">
      <summary>
            Test exception when trying to add points with the wrong dimension.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineExceptionOnOnlyTwoPointsAdded">
      <summary>
            Test exception when trying to interpolate with only two points added.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineExceptionOnOnlyThreePointsAdded">
      <summary>
            Test exception when trying to interpolate with only three points added.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineInterpolateFourPointLine">
      <summary>
            Interpolate between 4 points forming a straight line.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineRejectDuplicatePointsWhenAdding">
      <summary>
            Validate that adding duplicate x coordinates will reject the data.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineCanClearDataArrayThenAddAndInterpolate">
      <summary>
            Validate that the data array can be cleared.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineInterpolateFourPointShape">
      <summary>
            Interpolate between 4 points forming Z shape.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineInterpolateFourPointShape2D">
      <summary>
            Interpolate between 4 points forming Z shape in two dimensions.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineInterpolatePastEdgeOfFourPointShape">
      <summary>
            Interpolate left and right of the 4 points forming a Z shape.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.UnitTestSpline.SplineInterpolateSineWave">
      <summary>
            Interpolate points along a sine wave approximated with 12 points.
            </summary>
    </member>
    <member name="T:PloobsEngine.Utils.Interpolator`1">
      <summary>
            General Interpolator Base
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:PloobsEngine.Utils.Interpolator`1.IsActive">
      <summary>
            Is active
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Interpolator`1.currentDuration">
      <summary>
            Current Duration
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Interpolator`1.totalDuration">
      <summary>
            Total duration
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Interpolator`1.smoothStep">
      <summary>
            Is smoth step
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Interpolator`1.value1">
      <summary>
            V1
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Interpolator`1.value2">
      <summary>
            V2
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Interpolator`1.currentValue">
      <summary>
            Current value
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Interpolator`1.Start(`0,`0,System.Double)">
      <summary>
            Start the Interpolator
            </summary>
      <param name="value1">Value to Start interpolation from</param>
      <param name="value2">Value to interpolate to</param>
      <param name="totalDuration">Time to interpolate from value1 to value2 in seconds</param>
    </member>
    <member name="M:PloobsEngine.Utils.Interpolator`1.Start(`0,`0,System.Double,System.Boolean)">
      <summary>
            Start the interpolator
            </summary>
      <param name="value1">
      </param>
      <param name="value2">
      </param>
      <param name="totalDuration">
      </param>
      <param name="smoothStep">Use smoothstep rather than lerp</param>
    </member>
    <member name="M:PloobsEngine.Utils.Interpolator`1.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Update the interpolator
            </summary>
      <param name="gameTime">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.Interpolator`1.PeekValue(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Peek the next interpolation value without affecting the next update
            </summary>
      <param name="gameTime">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.Interpolator`1.Reset">
      <summary>
            Reset the interpolator
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Interpolator`1.Interpolate">
      <summary>
            Override to implement interpolation for a concrete data type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.Utils.Interpolator`1.Value2">
      <summary>
            Gets the value2.
            </summary>
    </member>
    <member name="P:PloobsEngine.Utils.Interpolator`1.CurrentValue">
      <summary>
            Gets the current value.
            </summary>
    </member>
    <member name="T:PloobsEngine.Utils.FloatInterpolator">
      <summary>
            Float Interpolator
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.FloatInterpolator.Interpolate">
      <summary>
            Interpolates this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.FloatInterpolatorConstantStep">
      <summary>
            Float Interpolator at constant step
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.FloatInterpolatorConstantStep.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Utils.FloatInterpolatorConstantStep" /> class.
            </summary>
      <param name="step">The step.</param>
    </member>
    <member name="M:PloobsEngine.Utils.FloatInterpolatorConstantStep.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates
            </summary>
      <param name="gameTime">The game time.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.FloatInterpolatorConstantStep.Reset">
      <summary>
            Resets this instance.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.FloatInterpolatorConstantStep.Interpolate">
      <summary>
            Interpolates this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.Vec3InterpolatorConstantStep">
      <summary>
            Interpolator for Vector3 ate Constant step
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Vec3InterpolatorConstantStep.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Utils.Vec3InterpolatorConstantStep" /> class.
            </summary>
      <param name="step">The step.</param>
    </member>
    <member name="M:PloobsEngine.Utils.Vec3InterpolatorConstantStep.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates this instance
            </summary>
      <param name="gameTime">The game time.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.Vec3InterpolatorConstantStep.Reset">
      <summary>
            Resets this instance.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Vec3InterpolatorConstantStep.Interpolate">
      <summary>
            Interpolates this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.Vec3Interpolator">
      <summary>
            Vector3 Interpolator
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Vec3Interpolator.Interpolate">
      <summary>
            Interpolates this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.Vec4Interpolator">
      <summary>
            Vector4 Interpolator
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Vec4Interpolator.Interpolate">
      <summary>
            Interpolates this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.XmlContentLoader">
      <summary>
            XML content loader
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.XmlContentLoader.SaveXmlContent(System.Object,System.Type,System.String)">
      <summary>
            Saves the content of the obj in XML.
            </summary>
      <param name="obj">The obj.</param>
      <param name="tipo">The type.</param>
      <param name="Path">The path.</param>
    </member>
    <member name="M:PloobsEngine.Utils.XmlContentLoader.LoadXmlContent(System.String,System.Type)">
      <summary>
            Loads the content of the XML.
            </summary>
      <param name="name">The name.</param>
      <param name="tipo">The type.</param>
      <returns>object</returns>
    </member>
    <member name="T:PloobsEngine.SceneControl.IContentManager">
      <summary>
            Content Manager, used to load stuffs like Model, Textures
            Cache the results
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IContentManager.GetTransformationMatrix(System.String)">
      <summary>
            Gets the transformation matrix.
            </summary>
      <param name="fileName">Name of the file.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.IContentManager.GetAssetAssync``1(System.String,PloobsEngine.Engine.ContentTracker.AssetLoaded)">
      <summary>
            Gets the asset assync.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="fileName">Name of the file.</param>
      <param name="AssetLoaded">The onassetloaded method. -- cant be null</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.IContentManager.UnloadAsset(System.String,System.Boolean)">
      <summary>
            Unload an asset
            </summary>
      <param name="assetName">Name of the asset.</param>
      <param name="releaseChildren">if set to <c>true</c> [release children].</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IContentManager.Unload">
      <summary>
            Unload all assets
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IContentManager.ReleaseAsset(System.String)">
      <summary>
            Releases the asset.
            </summary>
      <param name="assetName">Name of the asset.</param>
    </member>
    <member name="P:PloobsEngine.SceneControl.IContentManager.ContentManager">
      <summary>
            Gets the content manager.
            </summary>
    </member>
    <member name="T:PloobsEngine.Commands.ICommand">
      <summary>
            Command Pattern
            Its a Class that encapsulates a function call
            </summary>
    </member>
    <member name="M:PloobsEngine.Commands.ICommand.execute">
      <summary>
            Executes the command Call.
            </summary>
    </member>
    <member name="M:PloobsEngine.Commands.ICommand.setTarget(System.Object)">
      <summary>
            Sets the command target.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="P:PloobsEngine.Commands.ICommand.TargetName">
      <summary>
            Gets the name of the command target.
            </summary>
      <value>
            The name of the target.
            </value>
    </member>
    <member name="T:PloobsEngine.Input.TurnOnInputMaskCommand">
      <summary>
            Turn a Input Mask On
            </summary>
    </member>
    <member name="M:PloobsEngine.Input.TurnOnInputMaskCommand.#ctor(PloobsEngine.Input.InputMask)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Input.TurnOnInputMaskCommand" /> class.
            </summary>
      <param name="mask">The mask.</param>
    </member>
    <member name="M:PloobsEngine.Input.TurnOnInputMaskCommand.execute">
      <summary>
            Executes the command Call.
            </summary>
    </member>
    <member name="M:PloobsEngine.Input.TurnOnInputMaskCommand.setTarget(System.Object)">
      <summary>
            Sets the command target.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="P:PloobsEngine.Input.TurnOnInputMaskCommand.TargetName">
      <summary>
            Gets the name of the command target.
            </summary>
      <value>
            The name of the target.
            </value>
    </member>
    <member name="T:PloobsEngine.Engine.GraphicInfo">
      <summary>
            Contains Graphics Informations about the current execution
            </summary>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicInfo.CheckIfRenderTargetFormatIsSupported(Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Boolean,System.Int32,Microsoft.Xna.Framework.Graphics.GraphicsProfile)">
      <summary>
            Checks if render target properties combination is supported.
            </summary>
      <param name="format">The format.</param>
      <param name="depthFormat">The depth format.</param>
      <param name="useMipMap">if set to <c>true</c> [use mip map].</param>
      <param name="multisample">The multisample.</param>
      <param name="GraphicsProfile">The graphics profile.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicInfo.GetRenderTargetSupportedFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@,Microsoft.Xna.Framework.Graphics.DepthFormat@,System.Boolean@,System.Int32@,Microsoft.Xna.Framework.Graphics.GraphicsProfile)">
      <summary>
            Gets the render target supported format.
            </summary>
      <param name="format">The format.</param>
      <param name="depthFormat">The depth format.</param>
      <param name="useMipMap">if set to <c>true</c> [use mip map].</param>
      <param name="multisample">The multisample.</param>
      <param name="GraphicsProfile">The graphics profile.</param>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicInfo.GetBackBufferSupportedFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat@,Microsoft.Xna.Framework.Graphics.DepthFormat@,System.Boolean@,System.Int32@,Microsoft.Xna.Framework.Graphics.GraphicsProfile)">
      <summary>
            Gets the back buffer supported format.
            </summary>
      <param name="format">The format.</param>
      <param name="depthFormat">The depth format.</param>
      <param name="useMipMap">if set to <c>true</c> [use mip map].</param>
      <param name="multisample">The multisample.</param>
      <param name="GraphicsProfile">The graphics profile.</param>
    </member>
    <member name="P:PloobsEngine.Engine.GraphicInfo.GraphicsAdapter">
      <summary>
            Graphic Adapter
            </summary>
    </member>
    <member name="P:PloobsEngine.Engine.GraphicInfo.UseAnisotropicFiltering">
      <summary>
            Gets a value indicating whether [use anisotropic filtering].
            </summary>
      <value>
        <c>true</c> if [use anisotropic filtering]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.Engine.GraphicInfo.SamplerState">
      <summary>
            Sampler to be used when possible
            </summary>
    </member>
    <member name="P:PloobsEngine.Engine.GraphicInfo.UseMipMap">
      <summary>
            Gets a value indicating whether [use mip map].
            </summary>
      <value>
        <c>true</c> if [use mip map]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.Engine.GraphicInfo.DepthFormat">
      <summary>
            BackBuffer Depth Format
            </summary>
    </member>
    <member name="P:PloobsEngine.Engine.GraphicInfo.MultiSample">
      <summary>
            Back Buffer Multisample
            </summary>
    </member>
    <member name="P:PloobsEngine.Engine.GraphicInfo.BackBufferHeight">
      <summary>
            BackBufferHeight
            </summary>
    </member>
    <member name="P:PloobsEngine.Engine.GraphicInfo.BackBufferWidth">
      <summary>
            BackBufferWidth
            </summary>
    </member>
    <member name="P:PloobsEngine.Engine.GraphicInfo.FullScreenRectangle">
      <summary>
            FullScreenRectangle
            </summary>
    </member>
    <member name="P:PloobsEngine.Engine.GraphicInfo.HalfPixel">
      <summary>
            HalfPixel (used in DX 9 shaders)
            </summary>
    </member>
    <member name="P:PloobsEngine.Engine.GraphicInfo.Viewport">
      <summary>
            Viewport
            </summary>
    </member>
    <member name="P:PloobsEngine.Engine.GraphicInfo.Window">
      <summary>
            Game Window.
            </summary>
    </member>
    <member name="E:PloobsEngine.Engine.GraphicInfo.OnGraphicInfoChange">
      <summary>
            Occurs when [on graphic info change].
            </summary>
    </member>
    <member name="E:PloobsEngine.Engine.GraphicInfo.DeviceReset">
      <summary>
            Occurs when [device reset].
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.GUI.IGui">
      <summary>
            Specification for a GUI system
            </summary>
    </member>
    <member name="T:PloobsEngine.Physic2D.I2DPhysicWorld">
      <summary>
            2D physic world specification
            </summary>
    </member>
    <member name="M:PloobsEngine.Physic2D.I2DPhysicWorld.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates 
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.Physic2D.I2DPhysicWorld.AddObject(PloobsEngine.Physic2D.I2DPhysicObject)">
      <summary>
            Adds the object.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.Physic2D.I2DPhysicWorld.RemoveObject(PloobsEngine.Physic2D.I2DPhysicObject)">
      <summary>
            Removes the object.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.Physic2D.I2DPhysicWorld.Picking(Microsoft.Xna.Framework.Vector2)">
      <summary>
            Test a Point agains the world
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Physic2D.I2DPhysicWorld.TestAABB(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>
            Tests the AABB against the world.
            </summary>
      <param name="min">The min.</param>
      <param name="max">The max.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Physic2D.Farseer.FarseerWorld">
      <summary>
            2D farseer physic world implementation
            </summary>
    </member>
    <member name="M:PloobsEngine.Physic2D.Farseer.FarseerWorld.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Physic2D.Farseer.FarseerWorld" /> class.
            </summary>
      <param name="gravity">The gravity.</param>
    </member>
    <member name="M:PloobsEngine.Physic2D.Farseer.FarseerWorld.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.Physic2D.Farseer.FarseerWorld.AddObject(PloobsEngine.Physic2D.I2DPhysicObject)">
      <summary>
            Adds the object.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.Physic2D.Farseer.FarseerWorld.RemoveObject(PloobsEngine.Physic2D.I2DPhysicObject)">
      <summary>
            Removes the object.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.Physic2D.Farseer.FarseerWorld.Picking(Microsoft.Xna.Framework.Vector2)">
      <summary>
            Test a Point agains the world
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Physic2D.Farseer.FarseerWorld.TestAABB(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>
            Tests the AABB against the world.
            </summary>
      <param name="min">The min.</param>
      <param name="max">The max.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Bnoerj.AI.Steering.Pathway">
      <summary>
            Pathway: a pure virtual base class for an abstract pathway in space, as for
            example would be used in path following.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.SegmentInterceptInfo">
      <summary>
            Interception Info
            RayCast using PhysicEngine directly
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.SegmentInterceptInfo.PhysicObject">
      <summary>
            Gets or sets the physic object itercepted.
            </summary>
      <value>
            The physic object.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.SegmentInterceptInfo.Distance">
      <summary>
            Gets or sets the distance from the object to the ray source.
            </summary>
      <value>
            The distance.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.SegmentInterceptInfo.ImpactPosition">
      <summary>
            Gets or sets the impact position.
            </summary>
      <value>
            The impact position.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.SegmentInterceptInfo.ImpactNormal">
      <summary>
            Gets or sets the impact normal.
            </summary>
      <value>
            The impact normal.
            </value>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder">
      <summary>
            Analyzes the contacts on the character's body to find supports.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.#ctor(BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController)">
      <summary>
            Constructs a new support finder.
            </summary>
      <param name="character">Character to analyze.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.UpdateSupports">
      <summary>
            Updates the collection of supporting contacts.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.ClearSupportData">
      <summary>
            Cleans up the support finder.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.MaximumAssistedDownStepHeight">
      <summary>
            Gets or sets the maximum distance from the character to the support that will be assisted by downstepping.
            If the character walks off a step with height less than this value, the character will retain traction despite
            being temporarily airborne according to its contacts.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.RayLengthToBottom">
      <summary>
            Gets the length from the ray start to the bottom of the character.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.SupportData">
      <summary>
            Computes a combined support contact from all available supports (contacts or ray).
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.TractionData">
      <summary>
            Computes a combined traction contact from all available supports with traction (contacts or ray).
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.HasSupport">
      <summary>
            Gets whether or not at least one of the character's body's contacts provide support to the character.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.HasTraction">
      <summary>
            Gets whether or not at least one of the character's supports, if any, are flat enough to allow traction.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.SupportRayData">
      <summary>
            Gets the data about the supporting ray, if any.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.Supports">
      <summary>
            Gets the character's supports.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.TractionSupports">
      <summary>
            Gets a collection of the character's supports that provide traction.
            Traction means that the surface's slope is flat enough to stand on normally.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportFinder.MaximumSlope">
      <summary>
            Gets or sets the maximum slope on which the character will have traction.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.SphereCharacter.TractionSupportCollection">
      <summary>
            Convenience collection for finding the subset of contacts in a supporting contact list that have traction.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.SphereCharacter.TractionSupportCollection.Enumerator">
      <summary>
            Enumerator type for the TractionSupportCollection.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.TractionSupportCollection.Enumerator.#ctor(BEPUphysics.DataStructures.RawList{BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportContact})">
      <summary>
            Constructs the enumerator.
            </summary>
      <param name="supports">Support list to enumerate.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.TractionSupportCollection.Enumerator.MoveNext">
      <summary>
            Moves to the next traction contact.  It skips contacts with normals that cannot provide traction.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.TractionSupportCollection.Enumerator.Current">
      <summary>
            Gets the current contact data.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportContact">
      <summary>
            Contact which acts as a support for the character controller.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportContact.Contact">
      <summary>
            Contact information at the support.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportContact.Support">
      <summary>
            Object that created this contact with the character.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportContact.HasTraction">
      <summary>
            Whether or not the contact was found to have traction.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportRayData">
      <summary>
            Result of a ray cast which acts as a support for the character controller.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportRayData.HitData">
      <summary>
            Ray hit information of the support.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportRayData.HitObject">
      <summary>
            Object hit by the ray.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportRayData.HasTraction">
      <summary>
            Whether or not the support has traction.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportData">
      <summary>
            Contact which acts as a support for the character controller.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportData.Position">
      <summary>
            Position of the support.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportData.Normal">
      <summary>
            Normal of the support.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportData.HasTraction">
      <summary>
            Whether or not the contact was found to have traction.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportData.Depth">
      <summary>
            Depth of the supporting location.
            Can be negative in the case of raycast supports.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportData.SupportObject">
      <summary>
            The object which the character is standing on.
            </summary>
    </member>
    <member name="F:PloobsEngine.Features.DebugDraw.DebugLines.effect">
      <summary>
            The basic effect used to draw boxes.
            </summary>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugLines.AddLine(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
      <summary>
            Add a Line
            You cant remove it        
            </summary>
      <param name="StartPoint">The start point.</param>
      <param name="EndPoint">The end point.</param>
      <param name="color">The box's color.</param>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugLines.ClearLines">
      <summary>
            Clears the lines.
            </summary>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugLines.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Features.DebugDraw.DebugLines" /> class.        
            Use addline to add lines =P
            </summary>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugLines.Draw(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>
            Draws the box.
            </summary>
      <param name="render">The render.</param>
      <param name="view">The viewing matrix.</param>
      <param name="projection">The projection matrix.</param>
    </member>
    <member name="M:PloobsEngine.Engine.Extensions.RemoveAll``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
      <summary> 
            Removes all elements from the List that match the conditions defined by the specified predicate. 
            </summary>
      <typeparam name="T">The type of elements held by the List.</typeparam>
      <param name="list">The List to remove the elements from.</param>
      <param name="match">The Predicate delegate that defines the conditions of the elements to remove.</param>
    </member>
    <member name="M:PloobsEngine.Engine.Extensions.Exists``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
      <summary> 
            Returns true if the List contains elements that match the conditions defined by the specified predicate. 
            </summary>
      <typeparam name="T">The type of elements held by the List.</typeparam>
      <param name="list">The List to search for a match in.</param>
      <param name="match">The Predicate delegate that defines the conditions of the elements to match against.</param>
    </member>
    <member name="T:PloobsEngine.Cameras.CameraStatic">
      <summary>
            Static camera
            </summary>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraStatic.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Static Camera Constructor
            </summary>
      <param name="position">Position</param>
      <param name="Target">Target Vector (Used to create the view matriz - LookAt method)</param>
    </member>
    <member name="T:PloobsEngine.Audio.ISoundEmitter2D">
      <summary>
            Generic Sound 2D Emiter 
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter2D.CleanUp(PloobsEngine.Engine.GraphicFactory,System.Boolean)">
      <summary>
            Cleans up.
            </summary>
      <param name="factory">The factory.</param>
      <param name="removeSoundGeneratorAlso">if set to <c>true</c> [remove sound generator also].</param>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter2D.Update(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl._2DScene.ICamera2D)">
      <summary>
            Updates .
            </summary>
      <param name="gt">The gt.</param>
      <param name="camera">The camera.</param>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter2D.Pause">
      <summary>
            Pauses the sound
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter2D.Resume">
      <summary>
            Resumes the sound
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter2D.Play">
      <summary>
            Plays the sound
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter2D.Stop(System.Boolean)">
      <summary>
            Stops the sound
            </summary>
    </member>
    <member name="P:PloobsEngine.Audio.ISoundEmitter2D.State">
      <summary>
            Gets the Sound state.
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.IWaypointConnector">
      <summary>
            Interface to define how to connect waypoints (used in the handler)
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.IState">
      <summary>
            Interface to represent an abstract State in the ploobs finite state machine
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.IState.Init">
      <summary>
            called on this state is entered
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.IState.NextState">
      <summary>
            called to find a state change is needed.
            Return null if no state change is needed
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.IA.IState.UpdateState(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Called all the frames
            </summary>
      <param name="gameTime">
      </param>
    </member>
    <member name="M:PloobsEngine.IA.IState.Finish">
      <summary>
            Called when leaving this state
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.IState.Name">
      <summary>
            Name of the state (unique)
            </summary>
    </member>
    <member name="T:BehaviorTrees.Node`1">
      <summary>
            Base class for nodes of the behavior tree.
            </summary>
      <typeparam name="E">
            Entity type. Each defined node may only apply to the specified types of the entitie.
            </typeparam>
    </member>
    <member name="M:BehaviorTrees.Node`1.Evaluate(`0)">
      <summary>
            Evaluates the node and returns task object for latent execution.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:BehaviorTrees.Composite`1">
      <summary>
            Base class for nodes that are containing a children nodes.
            </summary>
      <typeparam name="E">Entity type.</typeparam>
    </member>
    <member name="M:BehaviorTrees.Composite`1.Add(BehaviorTrees.Node{`0})">
      <summary>
            Add child node.
            </summary>
      <param name="child">Node to add.</param>
    </member>
    <member name="T:BehaviorTrees.Task`1">
      <summary>
            Base class for tasks - objects which are obtained during tree evaluation,
            and then can be executed.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="T:BehaviorTrees.CompositeTask`1">
      <summary>
            Base class for tasks that are created from composite nodes and has
            to reference other nodes that will be evaluated if the previous task finishes.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="T:BehaviorTrees.ActionDelegate`1">
      <summary>
            Delegate for methods that will be used as actions.
            </summary>
      <typeparam name="E">Type of the entity.</typeparam>
      <param name="entity">Entity on which this method will be executed.</param>
      <returns>
      </returns>
    </member>
    <member name="T:BehaviorTrees.Action`1">
      <summary>
            Node that can perform some action.
            </summary>
      <typeparam name="E">Entity type.</typeparam>
    </member>
    <member name="M:BehaviorTrees.Action`1.Evaluate(`0)">
      <summary>
            Creates task that will be executing associated action method.
            </summary>
    </member>
    <member name="T:BehaviorTrees.ActionTask`1">
      <summary>
            Task that is responsible for running the action on an entity.
            </summary>
      <typeparam name="E">Entity type/</typeparam>
    </member>
    <member name="M:BehaviorTrees.ActionTask`1.#ctor(BehaviorTrees.ActionDelegate{`0})">
      <summary>
            Instantiates action task with a given method to be called.
            </summary>
      <param name="method">Delegate for a method to be called.</param>
    </member>
    <member name="M:BehaviorTrees.ActionTask`1.Execute(`0,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Calls method bound via action delegate.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.PerlinNoise">
      <summary>
            Perlin Noise
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.PerlinNoise.MAX_WIDTH">
      <summary>
            max width
            default 356
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.PerlinNoise.MAX_HEIGHT">
      <summary>
            Max height
            default 256
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.PerlinNoise.#ctor(System.Int32,System.Int32)">
      <summary>
            Perlin Noise Constructot
            </summary>
      <param name="width">max</param>
      <param name="height">max</param>
    </member>
    <member name="M:PloobsEngine.Utils.PerlinNoise.GetRandomHeight(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
      <summary>
            Gets the value for a specific X and Y coordinate
            results in range [-1, 1] * maxHeight
            </summary>
      <param name="X">
      </param>
      <param name="Y">
      </param>
      <param name="MaxHeight">
      </param>
      <param name="Frequency">
      </param>
      <param name="Amplitude">
      </param>
      <param name="Persistance">
      </param>
      <param name="Octaves">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.PerlinNoise.GenerateNoise">
      <summary>
            create a array of randoms
            </summary>
    </member>
    <member name="T:PloobsEngine.Utils.PolygonUnion">
      <summary>
            Perform some polygon unions
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.PolygonUnion.PolyUnion(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Vector2[]@,Microsoft.Xna.Framework.Vector2[]@)">
      <summary>
            Polygon Unio
            </summary>
      <param name="polya">The polya.</param>
      <param name="polyb">The polyb.</param>
      <param name="union">The union.</param>
      <param name="intersection">The intersection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.PolygonUnion.EdgeIntersects(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Checks if the line segments intersect.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.PolygonUnion.Intersects(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Vector2[])">
      <summary>
            Checks if two polygons intersect.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.PolygonUnion.ProjectPoly(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Vector2,System.Single@,System.Single@)">
      <summary>
            Projects a polygon onto the axis, giving the maximum and minimum positions.
            </summary>
      <param name="points">Points that are in world space with origin at the centre</param>
      <param name="axis">The axis.</param>
      <param name="max">The max.</param>
      <param name="min">The min.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl.BeingRemoved">
      <summary>
            Called when the object is being removed
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl.OnUpdate">
      <summary>
            Called on every update
            </summary>
      <param name="obj">The obj.</param>
      <param name="gt">The gt.</param>
      <param name="cam">The cam.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl.OnRecieveMessage">
      <summary>
            called when the object recieves a message
            </summary>
      <param name="Reciever">The reciever.</param>
      <param name="mes">The mes.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl.OnHasMoved">
      <summary>
            Called when the object moves
            </summary>
      <param name="Reciever">The reciever.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl.IObject">
      <summary>
            Basic Object 
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.IObject.lastFrameWorld">
      <summary>
            Last Frame Matrix
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.IObject.worldMatrix">
      <summary>
            World Matrix
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IObject.#ctor(PloobsEngine.Material.IMaterial,PloobsEngine.Modelo.IModelo,PloobsEngine.Physics.IPhysicObject)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.IObject" /> class.
            </summary>
      <param name="Material">The material.</param>
      <param name="Modelo">The modelo.</param>
      <param name="PhysicObject">The physic object.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.IObject" /> class.
            Let the user free to implement the IObject the way they want
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IObject.UpdateObject(Microsoft.Xna.Framework.GameTime,PloobsEngine.Cameras.ICamera,PloobsEngine.SceneControl.IWorld)">
      <summary>
            Updates the object.
            </summary>
      <param name="gt">The gt.</param>
      <param name="cam">The cam.</param>
      <param name="luzes">The luzes.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IObject.CleanUp(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Cleans up.
            </summary>
      <param name="factory">The factory.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IObject.HandleThisMessageType(PloobsEngine.MessageSystem.SenderType)">
      <summary>
            Handles a message from determined sender type.
            </summary>
      <param name="type">Sender type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.IObject.HandleMessage(PloobsEngine.MessageSystem.Message)">
      <summary>
            Handles the message.
            </summary>
      <param name="mes">The mes.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IObject.RemoveThisObject">
      <summary>
            Removes this object.
            Called internally
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IObject.GetId">
      <summary>
            return the entity id
            </summary>
      <returns>
            the id
            </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.IObject.SetId(System.Int64)">
      <summary>
            sets the id
            </summary>
      <param name="id">
      </param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:PloobsEngine.SceneControl.IObject.PhysicObject">
      <summary>
            Gets or sets the physic object.
            </summary>
      <value>
            The physic object.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl.IObject.Modelo">
      <summary>
            Gets or sets the modelo.
            </summary>
      <value>
            The modelo.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl.IObject.Material">
      <summary>
            Gets or sets the material.
            </summary>
      <value>
            The material.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl.IObject.WorldMatrix">
      <summary>
            Gets the world matrix.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IObject.Name">
      <summary>
            Gets or sets the name of the object.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl.IObject.IObjectAttachment">
      <summary>
            Gets or sets the Iobject atachtment.
            </summary>
      <value>
            The Iobject atachtment.
            </value>
    </member>
    <member name="E:PloobsEngine.SceneControl.IObject.OnRecieveMessage">
      <summary>
            Occurs when [on recieve message].
            </summary>
    </member>
    <member name="E:PloobsEngine.SceneControl.IObject.OnBeingRemoved">
      <summary>
            Called when this object is removed from the world
            </summary>
    </member>
    <member name="E:PloobsEngine.SceneControl.IObject.OnHasMoved">
      <summary>
            Raised when objects moves
            </summary>
    </member>
    <member name="E:PloobsEngine.SceneControl.IObject.OnUpdate">
      <summary>
            Called all the time the object is updated
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.ICuller">
      <summary>
            Culler Specification
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.ICuller.GetNotCulledObjectsList(System.Nullable{PloobsEngine.Material.MaterialType})">
      <summary>
            Get all the objects that pass the culling phase
            </summary>
      <param name="Filter">Or Filter, null for all</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.ICuller.StartFrame(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
            Called by the engine Once in the start of each rendering pass
            </summary>
      <param name="view">The view.</param>
      <param name="projection">The projection.</param>
      <param name="frustrum">The frustrum.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.ICuller.onObjectAdded(PloobsEngine.SceneControl.IObject)">
      <summary>
            Called when an object is added to the world
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.ICuller.onObjectRemoved(PloobsEngine.SceneControl.IObject)">
      <summary>
            Called when an object s removed from the world
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="P:PloobsEngine.SceneControl.ICuller.RenderedObjectThisFrame">
      <summary>
            Gets the number of objects rendered in this frame.
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.OctreeCuller">
      <summary>
            Octree culler for 3D
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.OctreeCuller.#ctor(System.Single,System.Single,System.Int32,Microsoft.Xna.Framework.Vector3,PloobsEngine.Features.DebugDraw.DebugShapesDrawer)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.OctreeCuller" /> class.
            </summary>
      <param name="worldSize">Size of the world.</param>
      <param name="loose">The loose.</param>
      <param name="maxDepth">The max depth.</param>
      <param name="center">The center.</param>
      <param name="DebugDrawer">The debug drawer. We strong recomend you to DONT JUST this DebugDrawer for nothing anymore, if you need, create another</param>
    </member>
    <member name="T:PloobsEngine.Modelo.IModelo">
      <summary>
            Model Specification
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.IModelo.modelName">
      <summary>
            Model Name
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.IModelo.BatchInformations">
      <summary>
            All BAtchInformations of the model
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.IModelo.TextureInformations">
      <summary>
            All Texture Informations from the mode
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.IModelo.factory">
      <summary>
            Graphic Factory
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo.IModelo.getTexture(PloobsEngine.Modelo.TextureType,System.Int32,System.Int32)">
      <summary>
            Gets one texture of the model.
            </summary>
      <param name="type">The type.</param>
      <param name="meshIndex">Index of the mesh.</param>
      <param name="meshPartIndex">Index of the mesh part.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Modelo.IModelo.SetTexture(System.String,PloobsEngine.Modelo.TextureType,System.Int32,System.Int32)">
      <summary>
            Sets the texture.
            </summary>
      <param name="textureName">Name of the texture.</param>
      <param name="type">The type.</param>
      <param name="meshIndex">Index of the mesh.</param>
      <param name="meshPartIndex">Index of the mesh part.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.IModelo.SetCubeTexture(Microsoft.Xna.Framework.Graphics.TextureCube,PloobsEngine.Modelo.TextureType,System.Int32,System.Int32)">
      <summary>
            Set Cube Texture of a mesh
            </summary>
      <param name="textureCube">
      </param>
      <param name="meshIndex">
      </param>
      <param name="meshPartIndex">
      </param>
    </member>
    <member name="M:PloobsEngine.Modelo.IModelo.GetCubeTexture(PloobsEngine.Modelo.TextureType,System.Int32,System.Int32)">
      <summary>
            Get texture cube 
            (Only Environment and AmbientCubeMap)
            </summary>
      <param name="TextureType">
      </param>
      <param name="meshIndex">
      </param>
      <param name="meshPartIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Modelo.IModelo.LoadModelo(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Load the model
            </summary>
      <param name="factory">The factory.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.IModelo.LoadModel(PloobsEngine.Engine.GraphicFactory,PloobsEngine.Modelo.BatchInformation[][]@,PloobsEngine.Modelo.TextureInformation[][]@)">
      <summary>
            Loads the batch info, called by the constructor if callLoadContent is true
            </summary>
      <param name="factory">The factory.</param>
      <param name="BatchInformations">The batch informations.</param>
      <param name="TextureInformation">The texture information.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.IModelo.SetTexture(Microsoft.Xna.Framework.Graphics.Texture2D,PloobsEngine.Modelo.TextureType,System.Int32,System.Int32)">
      <summary>
            Sets the texture.
            </summary>
      <param name="tex">The tex.</param>
      <param name="type">The type.</param>
      <param name="meshIndex">Index of the mesh.</param>S
            <param name="meshPartIndex">Index of the mesh part.</param></member>
    <member name="M:PloobsEngine.Modelo.IModelo.GetModelRadius">
      <summary>
            Gets the model radius.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Modelo.IModelo.GetBatchInformation(System.Int32)">
      <summary>
            Gets the batch information.
            </summary>
      <param name="meshNumber">The mesh number.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Modelo.IModelo.CleanUp(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Cleans up the IModelo
            </summary>
    </member>
    <member name="P:PloobsEngine.Modelo.IModelo.Tag">
      <summary>
            Gets or sets the tag.
            </summary>
      <value>
            The tag.
            </value>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.Modelo.IModelo.MeshNumber">
      <summary>
            Gets the Total mesh number.
            </summary>
    </member>
    <member name="P:PloobsEngine.Modelo.IModelo.Name">
      <summary>
            Gets the name.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="T:PloobsEngine.Modelo.Animation.IAnimatedModel">
      <summary>
            New Kind of Model specific for Animations
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.IAnimatedModel.GetAnimation">
      <summary>
            Gets the animation Information from Model
            It can be for example the Bone hierarchy of the model
            The result need to be casted (vary toooo much between animation APIs, better to keep as Object)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Input.KeyStateChange">
      <summary>
            Called when a key event is fired
            </summary>
      <param name="ipk">The ipk.</param>
    </member>
    <member name="T:PloobsEngine.Input.InputPlayableKeyBoard">
      <summary>
            keyboard Input Binding interface
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder">
      <summary>
            Analyzes the contacts on the character's body to find supports.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.#ctor(BEPUphysicsDemos.AlternateMovement.Character.CharacterController)">
      <summary>
            Constructs a new support finder.
            </summary>
      <param name="character">Character to analyze.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.UpdateSupports">
      <summary>
            Updates the collection of supporting contacts.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.ClearSupportData">
      <summary>
            Cleans up the support finder.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.RayLengthToBottom">
      <summary>
            Gets the length from the ray start to the bottom of the character.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.SupportData">
      <summary>
            Computes a combined support contact from all available supports (contacts or ray).
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.TractionData">
      <summary>
            Computes a combined traction contact from all available supports with traction (contacts or ray).
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.HasSupport">
      <summary>
            Gets whether or not at least one of the character's body's contacts provide support to the character.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.HasTraction">
      <summary>
            Gets whether or not at least one of the character's supports, if any, are flat enough to allow traction.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.SupportRayData">
      <summary>
            Gets the data about the supporting ray, if any.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.Supports">
      <summary>
            Gets the character's supports.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.SideContacts">
      <summary>
            Gets the contacts on the side of the character.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.HeadContacts">
      <summary>
            Gets the contacts on the top of the character.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.TractionSupports">
      <summary>
            Gets a collection of the character's supports that provide traction.
            Traction means that the surface's slope is flat enough to stand on normally.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.SupportFinder.MaximumSlope">
      <summary>
            Gets or sets the maximum slope on which the character will have traction.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.TractionSupportCollection">
      <summary>
            Convenience collection for finding the subset of contacts in a supporting contact list that have traction.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.TractionSupportCollection.Enumerator">
      <summary>
            Enumerator type for the TractionSupportCollection.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.TractionSupportCollection.Enumerator.#ctor(BEPUphysics.DataStructures.RawList{BEPUphysicsDemos.AlternateMovement.Character.SupportContact})">
      <summary>
            Constructs the enumerator.
            </summary>
      <param name="supports">Support list to enumerate.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.TractionSupportCollection.Enumerator.MoveNext">
      <summary>
            Moves to the next traction contact.  It skips contacts with normals that cannot provide traction.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.TractionSupportCollection.Enumerator.Current">
      <summary>
            Gets the current contact data.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.SupportContact">
      <summary>
            Contact which acts as a support for the character controller.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.SupportContact.Contact">
      <summary>
            Contact information at the support.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.SupportContact.Support">
      <summary>
            Object that created this contact with the character.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.SupportContact.HasTraction">
      <summary>
            Whether or not the contact was found to have traction.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.OtherContact">
      <summary>
            Contact associated with the character that isn't a support.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.OtherContact.Contact">
      <summary>
            Core information about the contact.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.OtherContact.Collidable">
      <summary>
            Object that created this contact with the character.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.SupportRayData">
      <summary>
            Result of a ray cast which acts as a support for the character controller.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.SupportRayData.HitData">
      <summary>
            Ray hit information of the support.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.SupportRayData.HitObject">
      <summary>
            Object hit by the ray.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.SupportRayData.HasTraction">
      <summary>
            Whether or not the support has traction.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.SupportData">
      <summary>
            Contact which acts as a support for the character controller.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.SupportData.Position">
      <summary>
            Position of the support.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.SupportData.Normal">
      <summary>
            Normal of the support.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.SupportData.HasTraction">
      <summary>
            Whether or not the contact was found to have traction.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.SupportData.Depth">
      <summary>
            Depth of the supporting location.
            Can be negative in the case of raycast supports.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.SupportData.SupportObject">
      <summary>
            The object which the character is standing on.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.StanceManager">
      <summary>
            Handles a character's stances, like standing or crouching, and their transitions.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.StanceManager.#ctor(BEPUphysicsDemos.AlternateMovement.Character.CharacterController)">
      <summary>
            Constructs a stance manager for a character.
            </summary>
      <param name="character">Character governed by the manager.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.StanceManager.UpdateStance(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Attempts to change the stance of the character if possible.
            </summary>
      <returns>Whether or not the character was able to change its stance.</returns>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.StanceManager.StandingHeight">
      <summary>
            Gets the height of the character while standing.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.StanceManager.CrouchingHeight">
      <summary>
            Gets the height of the character while crouching.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.StanceManager.CurrentStance">
      <summary>
            Gets the current stance of the character.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.StanceManager.DesiredStance">
      <summary>
            Gets or sets the stance that the character is trying to move into.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.CharacterController">
      <summary>
            Gives a physical object FPS-like control, including stepping and jumping.
            This is more robust/expensive than the SimpleCharacterController.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.ConstraintAccessLocker">
      <summary>
            This is used to control the access to simulation islands when there are multiple character controllers updating in parallel.
            If other parts of the program are modifying simulation islands during the IBeforeSolverUpdateable.Update stage, the synchronization
            umbrella will need to be widened.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a new character controller with the default configuration.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.ApplyJumpVelocity(BEPUphysicsDemos.AlternateMovement.Character.SupportData@,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Changes the relative velocity between the character and its support.
            </summary>
      <param name="supportData">Support data to use to jump.</param>
      <param name="velocityChange">Change to apply to the character and support relative velocity.</param>
      <param name="relativeVelocity">Relative velocity to update.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.ChangeVelocityUnilaterally(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            In some cases, an applied velocity should only modify the character.
            This allows partially non-physical behaviors, like gluing the character to the ground.
            </summary>
      <param name="velocityChange">Change to apply to the character.</param>
      <param name="relativeVelocity">Relative velocity to update.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.Jump">
      <summary>
            Jumps the character off of whatever it's currently standing on.  If it has traction, it will go straight up.
            If it doesn't have traction, but is still supported by something, it will jump in the direction of the surface normal.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.Body">
      <summary>
            Gets the physical body of the character.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.StepManager">
      <summary>
            Gets the manager responsible for finding places for the character to step up and down to.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.StanceManager">
      <summary>
            Gets the manager responsible for crouching, standing, and the verification involved in changing states.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.QueryManager">
      <summary>
            Gets the support system which other systems use to perform local ray casts and contact queries.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.HorizontalMotionConstraint">
      <summary>
            Gets the constraint used by the character to handle horizontal motion.  This includes acceleration due to player input and deceleration when the relative velocity
            between the support and the character exceeds specified maximums.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.VerticalMotionConstraint">
      <summary>
            Gets the constraint used by the character to stay glued to surfaces it stands on.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.JumpForceFactor">
      <summary>
            Gets or sets the amount of force to apply to supporting dynamic entities as a fraction of the force used to reach the jump speed.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.CharacterController.SupportFinder">
      <summary>
            Gets the support finder used by the character.
            The support finder analyzes the character's contacts to see if any of them provide support and/or traction.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.DisplayBox">
      <summary>
            Helper class that can create shape mesh data.
            </summary>
    </member>
    <member name="T:PloobsEngine.Modelo2D.IModelo2D">
      <summary>
            2D model specification
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo2D.IModelo2D.#ctor(PloobsEngine.Modelo2D.ModelType)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Modelo2D.IModelo2D" /> class.
            </summary>
      <param name="ModelType">Type of the model.</param>
    </member>
    <member name="M:PloobsEngine.Modelo2D.IModelo2D.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates the modelo.
            </summary>
      <param name="gameTime">The game time.</param>
    </member>
    <member name="M:PloobsEngine.Modelo2D.IModelo2D.CleanUp(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Cleans up.
            </summary>
      <param name="factory">The factory.</param>
    </member>
    <member name="P:PloobsEngine.Modelo2D.IModelo2D.SourceRectangle">
      <summary>
            Gets or sets the source rectangle (if texture type)
            Null otherwise
            </summary>
      <value>
            The source rectangle.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo2D.IModelo2D.ModelType">
      <summary>
            Gets the type of the model.
            </summary>
      <value>
            The type of the model.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo2D.IModelo2D.Rotation">
      <summary>
            Gets or sets the rotation.
            </summary>
      <value>
            The rotation.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo2D.IModelo2D.Texture">
      <summary>
            Gets or sets the texture.
            </summary>
      <value>
            The texture.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo2D.IModelo2D.Origin">
      <summary>
            Gets or sets the origin of the model (center of the object normally, in local coordinates)
            </summary>
      <value>
            The origin.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo2D.IModelo2D.LayerDepth">
      <summary>
            Gets or sets the layer depth.
            same concept of Photoshop =P
            0 for near and 1 for last
            </summary>
      <value>
            The layer depth.
            </value>
    </member>
    <member name="T:PloobsEngine.Modelo2D.SpriteAnimated">
      <summary>
            Model used for sprite animation
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo2D.SpriteAnimated.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Modelo2D.SpriteAnimated" /> class.
            </summary>
      <param name="Texture">The texture.</param>
      <param name="Frames">number of frames.</param>
      <param name="animations">number of animations.</param>
    </member>
    <member name="M:PloobsEngine.Modelo2D.SpriteAnimated.AddAnimation(System.String,System.Int32,System.Int32,System.Single,System.Boolean,System.Single)">
      <summary>
            Adds a specific sprite animation
            </summary>
      <param name="name">The name.</param>
      <param name="row">The row.</param>
      <param name="frames">The frames.</param>
      <param name="rotation">The rotation.</param>
      <param name="isLooping">if set to <c>true</c> [is looping].</param>
      <param name="fps">The FPS.</param>
    </member>
    <member name="M:PloobsEngine.Modelo2D.SpriteAnimated.ChangeAnimation(System.String,System.Int32,System.Boolean)">
      <summary>
            Changes the current animation.
            </summary>
      <param name="animationName">Name of the animation.</param>
      <param name="frameToStart">The frame to start.</param>
      <param name="start">if set to <c>true</c> [start].</param>
    </member>
    <member name="M:PloobsEngine.Modelo2D.SpriteAnimated.PauseCurrentAnimation">
      <summary>
            Pauses the current animation.
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo2D.SpriteAnimated.PlayCurrentAnimation">
      <summary>
            Plays the current animation.
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo2D.SpriteAnimated.IsPlaying">
      <summary>
            Status of the animation
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Modelo2D.SpriteAnimated.SetCurrentFrameIndex(System.Int32)">
      <summary>
            Sets the index of the current frame.
            </summary>
      <param name="frameIndex">Index of the frame.</param>
    </member>
    <member name="M:PloobsEngine.Modelo2D.SpriteAnimated.GetCurrentFrameIndex">
      <summary>
            Gets the index of the current frame.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Modelo2D.SpriteAnimated.GetCurrentAnimation">
      <summary>
            Gets the current animation.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Modelo2D.SpriteAnimated.GetFrameRectangle(System.String,System.Int32)">
      <summary>
            Gets the frame rectangle of the current animation.
            </summary>
      <param name="animationName">Name of the animation.</param>
      <param name="frame">The frame.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Material.IShader">
      <summary>
            Base Class For all Shaders
            </summary>
    </member>
    <member name="F:PloobsEngine.Material.IShader.firstTime">
      <summary>
            is fist time that this shader is updated
            </summary>
    </member>
    <member name="F:PloobsEngine.Material.IShader.shaderId">
      <summary>
            Shader ID that the object rendered by this shader will have        
            </summary>
      <remarks>
            This parameter lets the object not be affect by light, or be recovered in a post proccess phase
            </remarks>
    </member>
    <member name="M:PloobsEngine.Material.IShader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Material.IShader" /> class.
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.IShader.Initialize(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.IObject)">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.IShader.PreUpdate(PloobsEngine.SceneControl.IObject,System.Collections.Generic.IList{PloobsEngine.Light.ILight})">
      <summary>
            Called Once only, before all draws
            </summary>
      <param name="ent">The current entity.</param>
      <param name="lights">All The lights </param>
    </member>
    <member name="M:PloobsEngine.Material.IShader.Update(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,System.Collections.Generic.IList{PloobsEngine.Light.ILight})">
      <summary>
            Updates this shader
            Called every frame once
            </summary>
      <param name="gt">The gt.</param>
      <param name="ent">The ent.</param>
      <param name="lights">The lights.</param>
    </member>
    <member name="M:PloobsEngine.Material.IShader.PreDrawPhase(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IWorld,PloobsEngine.SceneControl.IObject,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.Cameras.ICamera)">
      <summary>
            Called every frame before the draw phase.
            In deferred it is called before the GBUFFER is setted
            </summary>
      <param name="gt">The gt.</param>
      <param name="world">The world.</param>
      <param name="obj">The obj.</param>
      <param name="render">The render.</param>
      <param name="cam">The camera</param>
    </member>
    <member name="M:PloobsEngine.Material.IShader.PosDrawPhase(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight})">
      <summary>
            Called after the draw phase.
            In deferred its responsible for the Forward Pass, in forward its not called
            </summary>
      <param name="gt">The gt.</param>
      <param name="obj">The obj.</param>
      <param name="render">The render.</param>
      <param name="cam">The camera.</param>
      <param name="lights">The lights.</param>
    </member>
    <member name="M:PloobsEngine.Material.IShader.Draw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight})">
      <summary>
            Draw
            </summary>
      <param name="gt">The gt.</param>
      <param name="obj">The obj.</param>
      <param name="render">The render.</param>
      <param name="cam">The cam.</param>
      <param name="lights">The lights.</param>
    </member>
    <member name="M:PloobsEngine.Material.IShader.Cleanup(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Cleanups this instance.
            </summary>
    </member>
    <member name="P:PloobsEngine.Material.IShader.MaterialType">
      <summary>
            Gets the type of the material.
            </summary>
      <value>
            The type of the material.
            </value>
    </member>
    <member name="P:PloobsEngine.Material.IShader.ShaderId">
      <summary>
            Used to Recover the object in PostProcces
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.ForwardEnvironmentShader.Initialize(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.IObject)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="ginfo">
      </param>
      <param name="factory">
      </param>
      <param name="obj">
      </param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardEnvironmentShader.Draw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight})">
      <summary>
            Draw
            </summary>
      <param name="gt">gametime</param>
      <param name="obj">the obj</param>
      <param name="render">The render.</param>
      <param name="cam">The cam.</param>
      <param name="lights">
      </param>
    </member>
    <member name="P:PloobsEngine.Material.ForwardEnvironmentShader.MaterialType">
      <summary>
            Gets the type of the material.
            </summary>
      <value>
            The type of the material.
            </value>
    </member>
    <member name="T:PloobsEngine.SceneControl.ICleanupAble">
      <summary>
            Implemented by those objects that wants to be cleaned when the screen where it is attached is gone
            Call Screen.AttachCleanUpAble to attach this to a screen
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.ICleanupAble.CleanUp(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Cleans up.
            </summary>
      <param name="factory">The factory.</param>
    </member>
    <member name="T:PloobsEngine.Loader.IModelLoader">
      <summary>
            Specification for Classes that can Load a Model from a file/stream ...
            </summary>
    </member>
    <member name="M:PloobsEngine.Loader.IModelLoader.Load(PloobsEngine.Engine.GraphicFactory,PloobsEngine.Engine.GraphicInfo,System.String)">
      <summary>
            Extract infos about models
            </summary>
      <param name="factory">The factory.</param>
      <param name="info">The info.</param>
      <param name="Name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Loader.ExtractXmlModelLoader">
      <summary>
            Loader for our 3ds max exporter
            </summary>
    </member>
    <member name="M:PloobsEngine.Loader.ExtractXmlModelLoader.#ctor(System.String,System.String,System.String)">
      <summary>
            Combine the xmlBasePath + Name + .xml
            when using load, just pass the Name
            </summary>
      <param name="xmlBasePath">The XML base path.</param>
      <param name="modelPath">The model path.</param>
      <param name="texturePath">The texture path.</param>
    </member>
    <member name="M:PloobsEngine.Loader.ExtractXmlModelLoader.#ctor">
      <summary>
            Use the default Path for everything
            string xmlpath = "Content\\ModelInfos\\";
            string modelPath = "..\\Content\\Model\\";
            string texturePath = "..\\Content\\Textures\\";
            </summary>
    </member>
    <member name="M:PloobsEngine.Loader.ExtractXmlModelLoader.CleanUp(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Cleans up.
            </summary>
      <param name="factory">The factory.</param>
    </member>
    <member name="T:PloobsEngine.Commands.IReciever">
      <summary>
            Specification for everyone that recieves ICommands    
            </summary>
    </member>
    <member name="M:PloobsEngine.Commands.IReciever.getMyName">
      <summary>
            The name of the reciever
            MUST BE UNIQUE 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Components.IComponent">
      <summary>
            Component Specification
            Components can Recieve Commands and send messages
            Designed to be VERY low coupled
            </summary>
    </member>
    <member name="M:PloobsEngine.Components.IComponent.Initialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:PloobsEngine.Components.IComponent.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Update
            Its called deppending of the ComponentType
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.Components.IComponent.PreDraw(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Pres draw.
            Its called deppending of the ComponentType
            </summary>
      <param name="render">The render.</param>
      <param name="gt">The gt.</param>
      <param name="activeView">The active view.</param>
      <param name="activeProjection">The active projection.</param>
    </member>
    <member name="M:PloobsEngine.Components.IComponent.PosWithDepthDraw(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Pos With Depth draw.
            Its called deppending of the ComponentType
            </summary>
      <param name="render">The render.</param>
      <param name="gt">The gt.</param>
      <param name="activeView">The active view.</param>
      <param name="activeProjection">The active projection.</param>
    </member>
    <member name="M:PloobsEngine.Components.IComponent.iPosWithDepthDraw(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Is the pos with depth draw.
            </summary>
      <param name="render">The render.</param>
      <param name="gt">The gt.</param>
      <param name="activeView">The active view.</param>
      <param name="activeProjection">The active projection.</param>
    </member>
    <member name="M:PloobsEngine.Components.IComponent.AfterDraw(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Afters draw.
            Its called deppending of the ComponentType
            </summary>
      <param name="render">The render.</param>
      <param name="gt">The gt.</param>
      <param name="activeView">The active view.</param>
      <param name="activeProjection">The active projection.</param>
    </member>
    <member name="M:PloobsEngine.Components.IComponent.LoadContent(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Loads the content.
            </summary>
      <param name="GraphicInfo">The graphic info.</param>
      <param name="factory">The factory.</param>
    </member>
    <member name="M:PloobsEngine.Components.IComponent.GetId">
      <summary>
            return the entity id
            </summary>
      <returns>
            the id
            </returns>
    </member>
    <member name="M:PloobsEngine.Components.IComponent.SetId(System.Int64)">
      <summary>
            sets the id
            </summary>
      <param name="id">
      </param>
    </member>
    <member name="P:PloobsEngine.Components.IComponent.DrawPriority">
      <summary>
            Defines the Components order when drawing (ALL draws types)
            </summary>
    </member>
    <member name="P:PloobsEngine.Components.IComponent.UpdatePriority">
      <summary>
            Defines the Components order when updating
            </summary>
    </member>
    <member name="P:PloobsEngine.Components.IComponent.ComponentType">
      <summary>
            Gets the type of the component type.
            </summary>
      <value>
            The type of the component.
            </value>
    </member>
    <member name="T:PloobsEngine.Features.TaskProcessor">
      <summary>
            Task Command Executor
            </summary>
    </member>
    <member name="F:PloobsEngine.Features.TaskProcessor.MyName">
      <summary>
            The Name of the Component
            </summary>
    </member>
    <member name="M:PloobsEngine.Features.TaskProcessor.StartTask(PloobsEngine.Features.ITask)">
      <summary>
            Starts the task.
            </summary>
      <param name="task">The task.</param>
    </member>
    <member name="M:PloobsEngine.Features.TaskProcessor.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Update
            Its called deppending of the ComponentType
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.Features.TaskProcessor.getMyName">
      <summary>
            The name of the reciever
            MUST BE UNIQUE
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.Features.TaskProcessor.ComponentType">
      <summary>
            Gets the type of the component type.
            </summary>
      <value>
            The type of the component.
            </value>
    </member>
    <member name="T:PloobsEngine.Events.IEvent`1">
      <summary>
            Coloca um objeto em uma mensagem e envia para quem tiver interessado
            Content eh o conteudo (objeto acima mencionado)
            </summary>
    </member>
    <member name="T:PloobsEngine.Events.GroupedEvent`1">
      <summary>
            Evento que tem como alvo um grupo , nao precisa adicionar targets
            </summary>
    </member>
    <member name="T:PloobsEngine.Engine.IntermediateRenderTarget">
      <summary>
            Instance of a render target that belongs to a pool
            </summary>
    </member>
    <member name="T:PloobsEngine.Audio.ISoundEmitter3D">
      <summary>
            Generic Sound 3D Emiter 
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter3D.#ctor(PloobsEngine.Engine.GraphicFactory,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Audio.ISoundEmitter3D" /> class.
            </summary>
      <param name="factory">The factory.</param>
      <param name="SoundName">Name of the sound.</param>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter3D.CleanUp(PloobsEngine.Engine.GraphicFactory,System.Boolean)">
      <summary>
            Cleans up.
            </summary>
      <param name="factory">The factory.</param>
      <param name="removeSoundGeneratorAlso">if set to <c>true</c> [remove sound generator also].</param>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter3D.Update(Microsoft.Xna.Framework.GameTime,PloobsEngine.Cameras.ICamera)">
      <summary>
            Updates .
            </summary>
      <param name="gt">The gt.</param>
      <param name="camera">The camera.</param>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter3D.Pause">
      <summary>
            Pauses the sound
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter3D.Resume">
      <summary>
            Resumes the sound
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter3D.Play">
      <summary>
            Plays the sound
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.ISoundEmitter3D.Stop(System.Boolean)">
      <summary>
            Stops the sound
            </summary>
    </member>
    <member name="P:PloobsEngine.Audio.ISoundEmitter3D.State">
      <summary>
            Gets the Sound state.
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.IAPathfinderNode">
      <summary>
            Node in the Astar algorithm
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.IAPathfinderNode.F">
      <summary>
            fitness
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.IAPathfinderNode.G">
      <summary>
            goal
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.IAPathfinderNode.H">
      <summary>
            heuristic
            </summary>
    </member>
    <member name="T:PloobsEngine.Utils.BundleHandler">
      <summary>
            Handles Bundle like files
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.BundleHandler.getBundle(System.String)">
      <summary>
            Parse files info of the type a=b and t=return a dicionary with keys and values
            % is a comentary
            </summary>
      <param name="filename">file name</param>
      <returns>dic with the parse info</returns>
    </member>
    <member name="T:PloobsEngine.Utils.Primitives">
      <summary>
            Gelper to Generate Primitives
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Primitives.Sphere(System.Single,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.VertexPositionTexture[]@,System.Int32[]@)">
      <summary>
            Spheres.
            </summary>
      <param name="radius">The radius.</param>
      <param name="n">The n.</param>
      <param name="invertFaces">if set to <c>true</c> [invert faces].</param>
      <param name="vertices">The vertices.</param>
      <param name="indices">The indices.</param>
    </member>
    <member name="M:PloobsEngine.Utils.Primitives.Capsole(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.VertexPositionTexture[]@,System.Int32[]@)">
      <summary>
            Capsoles
            </summary>
      <param name="p0">The p0.</param>
      <param name="p1">The p1.</param>
      <param name="r0">The r0.</param>
      <param name="r1">The r1.</param>
      <param name="segments">The segments.</param>
      <param name="slices">The slices.</param>
      <param name="invertFaces">if set to <c>true</c> [invert faces].</param>
      <param name="vertices">The vertices.</param>
      <param name="indices">The indices.</param>
    </member>
    <member name="M:PloobsEngine.Utils.Primitives.SuperCylinder(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.VertexPositionTexture[]@,System.Int32[]@)">
      <summary>
            Superscylinder.
            </summary>
      <param name="p0">The p0.</param>
      <param name="p1">The p1.</param>
      <param name="r0">The r0.</param>
      <param name="r1">The r1.</param>
      <param name="m">The m.</param>
      <param name="n1">The n1.</param>
      <param name="n2">The n2.</param>
      <param name="n3">The n3.</param>
      <param name="segments">The segments.</param>
      <param name="slices">The slices.</param>
      <param name="invertFaces">if set to <c>true</c> [invert faces].</param>
      <param name="vertices">The vertices.</param>
      <param name="indices">The indices.</param>
    </member>
    <member name="M:PloobsEngine.Utils.Primitives.Cylinder(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.VertexPositionTexture[]@,System.Int32[]@)">
      <summary>
            Cylinders.
            </summary>
      <param name="p0">The p0.</param>
      <param name="p1">The p1.</param>
      <param name="r0">The r0.</param>
      <param name="r1">The r1.</param>
      <param name="segments">The segments.</param>
      <param name="slices">The slices.</param>
      <param name="invertFaces">if set to <c>true</c> [invert faces].</param>
      <param name="vertices">The vertices.</param>
      <param name="indices">The indices.</param>
    </member>
    <member name="M:PloobsEngine.Utils.Primitives.FullscreenQuad(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexPositionTexture[]@,System.Int32[]@)">
      <summary>
            Fullscreens quad.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="vertices">The vertices.</param>
      <param name="indices">The indices.</param>
    </member>
    <member name="T:PloobsEngine.Utils.Circle">
      <summary> 
            Represents a 2D circle. 
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Circle.Center">
      <summary> 
            Center position of the circle. 
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Circle.Radius">
      <summary> 
            Radius of the circle. 
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Circle.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary> 
            Constructs a new circle. 
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Circle.Intersects(Microsoft.Xna.Framework.Rectangle)">
      <summary> 
            Determines if a circle intersects a rectangle. 
            </summary>
      <returns>True if the circle and rectangle overlap. False otherwise.</returns>
    </member>
    <member name="T:PloobsEngine.Utils.SmartWeakEvent`1">
      <summary>
            A class for managing a weak event.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.SmartWeakEvent`1.Add(`0)">
      <summary>
            Adds the specified ev.
            </summary>
      <param name="eh">The eh.</param>
    </member>
    <member name="M:PloobsEngine.Utils.SmartWeakEvent`1.RemoveDeadEntries">
      <summary>
            Removes the dead entries.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.SmartWeakEvent`1.Remove(`0)">
      <summary>
            Removes the specified ev.
            </summary>
      <param name="eh">The eh.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl.SimpleCuller">
      <summary>
            Culler that uses the bepu scene control
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.SimpleCuller.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.SimpleCuller" /> class.
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.SphereObject.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,PloobsEngine.Physics.MaterialDescription)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Physics.Bepu.SphereObject" /> class.
            </summary>
      <param name="pos">The pos.</param>
      <param name="raio">The raio.</param>
      <param name="mass">The mass.</param>
      <param name="scale">The scale.</param>
      <param name="materialDescription">The material description.</param>
    </member>
    <member name="T:PloobsEngine.Physic.Constraints.IPhysicConstraint">
      <summary>
            Specification of a physic Constraint
            </summary>
    </member>
    <member name="T:PloobsEngine.Physic.Constraints.BepuConstraint.JointConstraint">
      <summary>
            Bepu Constraint Type
            Extend this class to implement any constraint in bepu
            </summary>
    </member>
    <member name="P:PloobsEngine.Physic.Constraints.BepuConstraint.JointConstraint.Joint">
      <summary>
            Gets or sets the joint.
            </summary>
      <value>
            The joint.
            </value>
    </member>
    <member name="P:PloobsEngine.Physic.Constraints.BepuConstraint.JointConstraint.BodyA">
      <summary>
            Gets or sets the body A.
            </summary>
      <value>
            The body A.
            </value>
    </member>
    <member name="P:PloobsEngine.Physic.Constraints.BepuConstraint.JointConstraint.BodyB">
      <summary>
            Gets or sets the body B.
            </summary>
      <value>
            The body B.
            </value>
    </member>
    <member name="T:PloobsEngine.Light2D.Light2D">
      <summary>
            Abstract class to define a 2D light
            </summary>
    </member>
    <member name="T:PloobsEngine.Light2D.SpotLight2D">
      <summary>
            2D sport light
            </summary>
    </member>
    <member name="M:PloobsEngine.Light2D.SpotLight2D.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,PloobsEngine.Light2D.ShadowmapSize)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Light2D.SpotLight2D" /> class.
            </summary>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="direction">The direction.</param>
      <param name="angle">The angle. IN RADIANS !!!!!!!!!!!!!!!</param>
      <param name="intensity">The intensity.</param>
      <param name="ShadowmapSize">Size of the shadowmap.</param>
    </member>
    <member name="T:PloobsEngine.Audio.SimpleSoundEffect">
      <summary>
            Simple effect Sound effect class
            This instance is not shared. It is completely independent
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.SimpleSoundEffect.#ctor(PloobsEngine.Engine.GraphicFactory,System.String,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Audio.SimpleSoundEffect" /> class.
            </summary>
      <param name="factory">The factory.</param>
      <param name="name">The name.</param>
      <param name="volume">The volume.</param>
      <param name="pitch">The pitch(-1 to 1).</param>
      <param name="pan">The pan (-1 to 1).</param>
      <param name="isLooped">if set to <c>true</c> [is looped].</param>
    </member>
    <member name="M:PloobsEngine.Audio.SimpleSoundEffect.CleanUp">
      <summary>
            Cleans up.
            Not called by the engine
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.SimpleSoundEffect.CleanUp(PloobsEngine.Engine.GraphicFactory,System.Boolean)">
      <summary>
            Cleans up.
            Not called by the engine
            </summary>
      <param name="factory">The factory.</param>
      <param name="removeSoundGeneratorAlso">if set to <c>true</c> [remove sound generator also].</param>
    </member>
    <member name="T:PloobsEngine.IA.IMap">
      <summary>
            AI Map interface
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.IMap.GetClosestWaypoint(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Gets the closest waypoint to a position
            </summary>
      <param name="Position">The position.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.IA.IMap.Waypoints">
      <summary>
            Waypoints of the map
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.IScreen">
      <summary>
            IScreen, base class for all screens
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.IScreen.OnScreenChangeState">
      <summary>
            called on OnScreenStateChange 
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.#ctor(PloobsEngine.SceneControl.GUI.IGui)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.IScreen" /> class.
            </summary>
      <param name="gui">The GUI Component, if null you cant use GUI in this screen.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.AttachCleanUpAble(PloobsEngine.SceneControl.ICleanupAble)">
      <summary>
            Attach a cleanupable to the screen
            </summary>
      <param name="ICleanupAble">The Icleanupable.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.BindInput(PloobsEngine.Input.InputPlayableKeyBoard)">
      <summary>
            Binds the KeyBoard input.
            </summary>
      <param name="ipk">The InputPlayableKeyBoard.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.BindInput(PloobsEngine.Input.InputPlaybleMouseBottom)">
      <summary>
            Binds the MouseBottom input.
            </summary>
      <param name="ipk">The InputPlaybleMouseBottom.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.BindInput(PloobsEngine.Input.InputPlaybleMousePosition)">
      <summary>
            Binds the MousePosition input.
            </summary>
      <param name="ipk">The InputPlaybleMousePosition.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.RemoveInputBinding(PloobsEngine.Input.InputPlayableKeyBoard)">
      <summary>
            Removes the KeyBoard binding.
            </summary>
      <param name="ipk">The InputPlayableKeyBoard.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.RemoveInputBinding(PloobsEngine.Input.InputPlaybleMouseBottom)">
      <summary>
            Removes the MouseBottom binding.
            </summary>
      <param name="ipk">The InputPlaybleMouseBottom.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.RemoveInputBinding(PloobsEngine.Input.InputPlaybleMousePosition)">
      <summary>
            Removes the MousePosition bindings.
            </summary>
      <param name="ipk">The InputPlaybleMousePosition.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.AddScreenUpdateable(PloobsEngine.IScreenUpdateable)">
      <summary>
            Attach one IScreenUpdateable to this screen
            </summary>
      <param name="updateable">The updateable.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.RemoveScreenUpdateable(PloobsEngine.IScreenUpdateable,System.Boolean)">
      <summary>
            Removes the IScreenUpdateable.
            </summary>
      <param name="updateable">The updateable.</param>
      <param name="callCleanUp">if set to <c>true</c> [call clean up].</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.LoadContent(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.IContentManager)">
      <summary>
            Load graphics content for the screen.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.InitScreen(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.EngineStuff)">
      <summary>
            Init Screen
            </summary>
      <param name="GraphicInfo">The graphic info.</param>
      <param name="engine">The engine.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.AfterLoadContent(PloobsEngine.SceneControl.IContentManager,PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Called after all the screens LoadContent is called
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Update the Screen
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.Draw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            This is called when the screen should draw itself.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScreen.CleanUp(PloobsEngine.Engine.EngineStuff)">
      <summary>
            Cleans up resources that dont are exclusive of the screen        
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IScreen.IsLoaded">
      <summary>
            Gets a value indicating whether this instance is loaded.
            </summary>
      <value>
        <c>true</c> if this instance is loaded; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl.IScreen.Gui">
      <summary>
            Gets the GUI interface.
            REMEMBER, you need to provide an implementation in the Screen Constructor, if you dont, you cant access this property
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IScreen.ScreenState">
      <summary>
            Gets or sets the state of the screen.
            </summary>
      <value>
            The state of the screen.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl.IScreen.ScreenManager">
      <summary>
            Gets the manager that this screen belongs to.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IScreen.GraphicInfo">
      <summary>
            Gets the graphic info.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IScreen.GraphicFactory">
      <summary>
            Gets the graphic factory.
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.IScene">
      <summary>
            Describe a 3D World
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScene.#ctor(PloobsEngine.SceneControl.GUI.IGui)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.IScene" /> class.
            </summary>
      <param name="gui">The GUI Component, if null you cant use GUI in this screen.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScene.AfterLoadContent(PloobsEngine.SceneControl.IContentManager,PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Function called After all the stuffs LoadContent is called
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScene.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Update the Screen
            </summary>
      <param name="gameTime">
      </param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScene.Draw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            This is called when the screen should draw itself.
            </summary>
      <param name="gameTime">
      </param>
      <param name="render">
      </param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScene.CleanUp(PloobsEngine.Engine.EngineStuff)">
      <summary>
            CleanUp the Scene
            </summary>
      <param name="engine">
      </param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScene.LoadContent(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.IContentManager)">
      <summary>
            Load content for the screen.        
            </summary>
      <param name="GraphicInfo">
      </param>
      <param name="factory">
      </param>
      <param name="contentManager">
      </param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScene.InitScreen(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.EngineStuff)">
      <summary>
            Init Screen
            </summary>
      <param name="GraphicInfo">The graphic info.</param>
      <param name="engine">
      </param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IScene.SetWorldAndRenderTechnich(PloobsEngine.SceneControl.IRenderTechnic@,PloobsEngine.SceneControl.IWorld@)">
      <summary>
            Sets the world and render technich.
            </summary>
      <param name="renderTech">The render tech.</param>
      <param name="world">The world.</param>
    </member>
    <member name="P:PloobsEngine.SceneControl.IScene.RenderTechnic">
      <summary>
            Gets the render technics.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IScene.World">
      <summary>
            Gets or sets the world instance.
            </summary>
      <value>
            The world.
            </value>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.Culler.I2DCuller">
      <summary>
            Specification for a 2D culler system
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.Culler.I2DCuller.GetNotCulledObjectsList">
      <summary>
            Get all the objects that pass the culling phase
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.Culler.I2DCuller.StartFrame(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
            Called by the engine Once in the start of each rendering pass
            </summary>
      <param name="view">The view.</param>
      <param name="projection">The projection.</param>
      <param name="frustrum">The frustrum.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.Culler.I2DCuller.onObjectAdded(PloobsEngine.SceneControl._2DScene.I2DObject)">
      <summary>
            Called when an object is added to the world
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.Culler.I2DCuller.onObjectRemoved(PloobsEngine.SceneControl._2DScene.I2DObject)">
      <summary>
            Called when an object s removed from the world
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Culler.I2DCuller.RenderedObjectThisFrame">
      <summary>
            Gets the number of objects rendered in this frame.
            </summary>
    </member>
    <member name="T:PloobsEngine.Particles.IParticleManager">
      <summary>
            Abstract particle manager
            </summary>
    </member>
    <member name="M:PloobsEngine.Particles.IParticleManager.AddAndInitializeParticleSystem(PloobsEngine.Particles.IParticleSystem)">
      <summary>
            Adds the and initialize particle system.
            </summary>
      <param name="particleSystem">The particle system.</param>
    </member>
    <member name="M:PloobsEngine.Particles.IParticleManager.RemoveParticleSystem(PloobsEngine.Particles.IParticleSystem)">
      <summary>
            Removes the particle system.
            </summary>
      <param name="particleSystem">The particle system.</param>
    </member>
    <member name="M:PloobsEngine.Particles.IParticleManager.GetParticleSystem(System.String)">
      <summary>
            Gets the particle system.
            </summary>
      <param name="particleSystemName">Name of the particle system.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.Particles.IParticleManager.GraphicFactory">
      <summary>
            Gets the graphic factory.
            </summary>
    </member>
    <member name="P:PloobsEngine.Particles.IParticleManager.GraphicInfo">
      <summary>
            Gets the graphic info.
            </summary>
    </member>
    <member name="P:PloobsEngine.Particles.IParticleManager.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:PloobsEngine.Particles.IParticleManager" /> is enabled.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PloobsEngine.Particles.DPSFParticleManager">
      <summary>
            DPSF particle manager implementation
            </summary>
    </member>
    <member name="F:PloobsEngine.Particles.DPSFParticleManager.ParticleSystem">
      <summary>
      </summary>
    </member>
    <member name="M:PloobsEngine.Particles.DPSFParticleManager.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Particles.DPSFParticleManager" /> class.
            </summary>
    </member>
    <member name="M:PloobsEngine.Particles.DPSFParticleManager.AddAndInitializeParticleSystem(PloobsEngine.Particles.IParticleSystem)">
      <summary>
            Adds the and initialize particle system.
            </summary>
      <param name="particleSystem">The particle system.</param>
    </member>
    <member name="M:PloobsEngine.Particles.DPSFParticleManager.RemoveParticleSystem(PloobsEngine.Particles.IParticleSystem)">
      <summary>
            Removes the particle system.
            </summary>
      <param name="particleSystem">The particle system.</param>
    </member>
    <member name="M:PloobsEngine.Particles.DPSFParticleManager.Update3D(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Update3D particle systems
            </summary>
      <param name="gt">The gt.</param>
      <param name="view">The view.</param>
      <param name="Projection">The projection.</param>
      <param name="camPosition">The cam position.</param>
    </member>
    <member name="M:PloobsEngine.Particles.DPSFParticleManager.Update2D(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>
            Updates 2D particle systems
            </summary>
      <param name="gt">The gt.</param>
      <param name="view">The view.</param>
      <param name="Projection">The projection.</param>
    </member>
    <member name="M:PloobsEngine.Particles.DPSFParticleManager.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Draws all particles
            </summary>
      <param name="gt">The gt.</param>
      <param name="view">The view.</param>
      <param name="Projection">The projection.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.Particles.DPSFParticleManager.GetParticleSystem(System.String)">
      <summary>
            Gets the particle system.
            </summary>
      <param name="particleSystemName">Name of the particle system.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.Particles.DPSFParticleManager.ParticleSystemManager">
      <summary>
            Gets the particle system manager.
            </summary>
    </member>
    <member name="P:PloobsEngine.Particles.DPSFParticleManager.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:PloobsEngine.Particles.IParticleManager" /> is enabled.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PloobsEngine.Material2D.I2DMaterial">
      <summary>
            2D material Specification
            </summary>
    </member>
    <member name="M:PloobsEngine.Material2D.I2DMaterial.Initialization(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl._2DScene.I2DObject)">
      <summary>
            Called when the material is initialized (added to the world)
            </summary>
      <param name="ginfo">
      </param>
      <param name="factory">
      </param>
      <param name="obj">
      </param>
    </member>
    <member name="M:PloobsEngine.Material2D.I2DMaterial.PreDrawnPhase(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl._2DScene.I2DWorld,PloobsEngine.SceneControl._2DScene.I2DObject,PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Called once each frame before the draw phase
            </summary>
      <param name="gt">The gt.</param>
      <param name="mundo">The mundo.</param>
      <param name="obj">The obj.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.Material2D.I2DMaterial.Draw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl._2DScene.I2DObject,PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Draws 
            Called once each frame
            </summary>
      <param name="gt">The gt.</param>
      <param name="obj">The obj.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.Material2D.I2DMaterial.LightDraw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl._2DScene.I2DObject,PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.Color,PloobsEngine.Light2D.Light2D)">
      <summary>
            Called once when lights are enabled
            Responsible for drawing the scene from the light perspective
            </summary>
      <param name="gt">The gt.</param>
      <param name="obj">The obj.</param>
      <param name="render">The render.</param>
      <param name="color">The color.</param>
      <param name="light">The light.</param>
    </member>
    <member name="M:PloobsEngine.Material2D.I2DMaterial.Update(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl._2DScene.I2DObject)">
      <summary>
            Updates.
            Called once each frame
            </summary>
      <param name="gameTime">The game time.</param>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.Material2D.I2DMaterial.CleanUp(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Cleans up.
            </summary>
      <param name="factory">The factory.</param>
    </member>
    <member name="T:PloobsEngine.Engine.ContentTracker">
      <summary>
            Async section of ContentTracker
            </summary>
      <summary>
            Custom content manager. Allows for removing individual items and provides
            detailed information about asset relationships
            </summary>
    </member>
    <member name="T:PloobsEngine.Engine.ContentTracker.AssetLoaded">
      <summary>
            Signature of a method to call when an 
            asset finishes loading asyncronously
            </summary>
      <param name="asset">
      </param>
    </member>
    <member name="T:PloobsEngine.Engine.ContentTracker.LoadAsyncParams">
      <summary>
            The paramaters required to asyncronously load an asset
            </summary>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.LoadAsyncParams.#ctor(System.Type,System.String,PloobsEngine.Engine.ContentTracker.AssetLoaded)">
      <summary>
            Constructor for convenience
            </summary>
    </member>
    <member name="T:PloobsEngine.Engine.ContentTracker.ValidSourceAssetDesc">
      <summary>
            Internal class for storing source asset loading information
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.ContentTracker.loadItemsQueue">
      <summary>
            Queue of items to be loaded
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.ContentTracker.loadThread">
      <summary>
            Thread on which asyncronous loading will occur
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.ContentTracker.loadResetEvent">
      <summary>
            Reset event so load thread can wait once the queue is empty
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.ContentTracker.mCloseRequested">
      <summary>
             A flag to request the thread to return from its loop
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.ContentTracker.loadedAssets">
      <summary>
            All loaded AssetTrackers, keyed by the asset name
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.ContentTracker.loadedAssetNames">
      <summary>
            List of loaded asset names. Useful for statistics
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.ContentTracker.untrackedAssets">
      <summary>
            A list of AssetTrackers that were loaded directly from disk. 
            They can not be reloaded or unloaded individually as they do not have unique names.
            They do need to be stored so they can be Disposed when the ContentTracker is Unloaded.
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.ContentTracker.SourceAssetLoaders">
      <summary>
            Registered source asset types
            </summary>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.LoadAsync``1(System.String,PloobsEngine.Engine.ContentTracker.AssetLoaded)">
      <summary>
            Asyncronously loads the specified asset
            </summary>
      <typeparam name="T">Generic type parameter</typeparam>
      <param name="assetName">Name of asset to laod</param>
      <param name="itemLoadedMethod">Method to call once load is completed</param>
      <returns>AssetTracker of asset to be loaded. Allows 
            users to poll the asset status if desired</returns>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.LoadingThreadWorker">
      <summary>
            Consume the Queue of assets to be loaded then wait 
            </summary>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.#ctor(System.IServiceProvider)">
      <summary>
            Constructs a ContentTracker
            </summary>
      <param name="serviceProvider">The provider object for getting services</param>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.#ctor(System.IServiceProvider,System.String)">
      <summary>
            Constructs a ContentTracker
            </summary>
      <param name="serviceProvider">The provider object for getting services</param>
      <param name="rootDirectory">The root directory of the ContentTracker</param>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.Load``1(System.String)">
      <summary>
            Return the specified asset. Read it from disk if not available
            </summary>
      <typeparam name="T">The Type of asset to load</typeparam>
      <param name="assetName">Name of the asset to load</param>
      <returns>A reference to the loaded asset</returns>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.LoadFromDisk``1(System.String)">
      <summary>
            Return the specified asset. ALWAYS Read it from disk
            </summary>
      <typeparam name="T">The Type of asset to load</typeparam>
      <param name="assetName">Name of the asset to load</param>
      <returns>A reference to the loaded asset</returns>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.LoadToTracker``1(System.String,PloobsEngine.Engine.AssetTracker,System.Boolean)">
      <summary>
            Return the specified asset. Read it from disk if not available
            </summary>
      <typeparam name="T">The Type of asset to load</typeparam>
      <param name="assetName">Name of the asset to load</param>
      <param name="tracker">An AssetTracker to use when loading this asset. May be null</param>
      <param name="forceReadAsset">if set to <c>true</c> [force read asset].</param>
      <returns>
            A reference to the loaded asset
            </returns>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.Unload">
      <summary>
            Clean up all assets
            </summary>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.Release(System.String)">
      <summary>
            Release asset. Decrements the reference count and
            removes child assets when the count is zero
            </summary>
      <param name="assetName">Asset to release</param>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.Unload(System.String,System.Boolean)">
      <summary>
            Force an asset to be disposed. Optionally releases child assets 
            </summary>
      <param name="assetName">Name of asset to unload</param>
      <param name="releaseChildren">Release child assets</param>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.DisposeAssetTracker(PloobsEngine.Engine.AssetTracker,System.Boolean)">
      <summary>
            Destroy IDisposables that were tracked by this asset but do not 
            exist as assets in their own right. This will also dispose the
            unmanaged internals like vertex and index buffers
            </summary>
      <param name="tracker">AssetTracker to dispose</param>
      <param name="releaseChildren">If true, child assets will be released</param>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.Reload``1(System.String)">
      <summary>
            Reloads the specified asset.
            </summary>
      <typeparam name="T">The Type of asset to reload</typeparam>
      <param name="assetName">Name of the asset to load</param>
      <returns>The new reference to the reloaded asset</returns>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.IsLoaded(System.String)">
      <summary>
            Tests if the specified asset is loaded
            </summary>
      <param name="assetName">Name of asset to test</param>
      <returns>True if asset is loaded otherwise false</returns>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.GetTracker(System.String)">
      <summary>
            Returns the Asset Tracker
            </summary>
      <param name="assetName">Name of asset to get tracker for</param>
      <returns>The AssetTracker with specified name, or null if not existing</returns>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.GetReferenceCount(System.String)">
      <summary>
            Gets an Asset's reference count
            </summary>
      <param name="assetName">Name of asset to get reference count for</param>
      <returns>Reference count of specified asset</returns>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.GetLoadedAssetNames">
      <summary>
            Get the names of all assets that are currently loaded
            </summary>
      <returns>List of loaded asset names</returns>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.SearchForAsset(System.Object,System.String@)">
      <summary>
            Check if the specified object is a loaded asset
            </summary>
      <param name="asset">asset reference to search for</param>
      <param name="assetName">Name asset with specified reference if found</param>
      <returns>True if the specified asset was found and false otherwise</returns>
    </member>
    <member name="M:PloobsEngine.Engine.ContentTracker.RegisterSourceAssetLoader(System.Type,System.String[],System.Func{System.String,System.Object})">
      <summary>
            Causes ContentTracker to attempt to find and load source assets of the given Type.
            UseSourceAssets must also be set to true for this to happen
            </summary>
      <param name="assetType">Asset Type to search for source assets</param>
      <param name="validExtensions">An array of file extensions (eg ".png") that are valid for the asset Type</param>
      <param name="loadAssetDelegate">Method to call when a valid source file is found</param>
    </member>
    <member name="P:PloobsEngine.Engine.ContentTracker.IsLoading">
      <summary>
            Returns true if the ContentTracker is currently loading.
            Returns false otherwise
            </summary>
    </member>
    <member name="P:PloobsEngine.Engine.ContentTracker.UseSourceAssets">
      <summary>
            Tells the ContentTracker to attempt to load source asset types, if they exist.
            </summary>
    </member>
    <member name="T:PloobsEngine.Audio.ObjectFollower3DSound">
      <summary>
            3D sound that follows a 3D object
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.Waypoint">
      <summary>
            Waypoint
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.Waypoint.Node">
      <summary>
            Gets or sets the node attached
            </summary>
      <value>
            The node.
            </value>
    </member>
    <member name="T:PloobsEngine.IA.WAYPOINTTYPE">
      <summary>
            EXEMPLOS DE TIPOS DE WAYPONIT
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm">
      <summary>
            The abstract class describing a learning
            algorithm for a neural network
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.nn">
      <summary>
            The neural network
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.ERROR_THRESHOLD">
      <summary>
            Under this threshold value, learning will be
            considered as complete
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.MAX_ITER">
      <summary>
            Max number of iteration to learn data
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.ins">
      <summary>
            Input matrix of data to learn
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.outs">
      <summary>
            output matrix of data to learn
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.iter">
      <summary>
            Number of learning iterations done
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.error">
      <summary>
            Last sum of square errors computed
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.#ctor(PloobsEngine.IA.NeuralNetwork.NeuralNetwork)">
      <summary>
            Learning algorithm constructor
            </summary>
      <param name="n">The neural network to train</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.Learn(System.Single[][],System.Single[][])">
      <summary>
            To train the neuronal network on data.
            inputs[n] represents an input vector of 
            the neural network and expected_outputs[n]
            the expected ouput for this vector. 
            </summary>
      <param name="inputs">the input matrix</param>
      <param name="expected_outputs">the expected output matrix</param>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.N_Network">
      <summary>
            Get the neural network of the learning algorithm
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.Error">
      <summary>
            Get the last square error
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.ErrorTreshold">
      <summary>
            Get or set the maximum sum of square errors value ( &gt;0)
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.Iteration">
      <summary>
            Get the current number of learning iterations done
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.LearningAlgorithm.MaxIteration">
      <summary>
            Get or set the maximum number of learning iterations.
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.NeuralNetwork.BackPropagationLearningAlgorithm">
      <summary>
            Implementation of stockastic gradient backpropagation
            learning algorithm
            </summary>
      <remarks>
        <code>
            
                                 PROPAGATION WAY IN NN
                               -------------------------&gt;
            
                   o ----- Sj = f(WSj) ----&gt; o ----- Si = f(WSi) ----&gt; o
                 Neuron j                Neuron i                   Neuron k
               (layer L-1)               (layer L)                 (layer L+1)
            
            For the neuron i :
            -------------------
            W[i,j](n+1) = W[i,j](n) + alpha * Ai * Sj + gamma * ( W[i,j](n) - W[i,j](n-1) )
            T[i](n+1) = T[i](n) - alpha * Ai + gamma * ( T[i](n) - T[i](n-1) )
            
            	with :
            			Ai = f'(WSi) * (expected_output_i - si) for output layer
            			Ai = f'(WSi) * SUM( Ak * W[k,i] )       for others
            
            </code>
            NOTE : This is stockastic version of the algorithm because the error
            is back-propaged after every learning case. There is another version
            of this algorithm which works on global error.
            </remarks>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.BackPropagationLearningAlgorithm.alpha">
      <summary>
            the alpha parameter of the algorithm
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.BackPropagationLearningAlgorithm.gamma">
      <summary>
            the gamma parameter of the algorithm
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.BackPropagationLearningAlgorithm.e">
      <summary>
            The error vector
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.BackPropagationLearningAlgorithm.#ctor(PloobsEngine.IA.NeuralNetwork.NeuralNetwork)">
      <summary>
            Build a new BackPropagation learning algorithm instance
            with alpha = 0,5 and gamma = 0,3
            </summary>
      <param name="nn">The neural network to train</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.BackPropagationLearningAlgorithm.Learn(System.Single[][],System.Single[][])">
      <summary>
            To train the neuronal network on data.
            inputs[n] represents an input vector of 
            the neural network and expected_outputs[n]
            the expected ouput for this vector. 
            </summary>
      <param name="inputs">the input matrix</param>
      <param name="expected_outputs">the expected output matrix</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.BackPropagationLearningAlgorithm.ComputeA(System.Int32)">
      <summary>
            Compute the "A" parameter for each neuron
            of the network
            </summary>
      <param name="i">the index of the curent training data</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.BackPropagationLearningAlgorithm.setWeight(System.Int32)">
      <summary>
            Set new neron's weights
            </summary>
      <param name="i">the index of the curent training data</param>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.BackPropagationLearningAlgorithm.Alpha">
      <summary>
            get or set the alpha parameter of the algorithm
            between 0 and 1, must be &gt;0
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.BackPropagationLearningAlgorithm.Gamma">
      <summary>
            get or set the gamma parameter of the algorithm
            (Rumelhart coef)
            between 0 and 1.
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm">
      <summary>
             A genetic learning algorithm
             </summary>
      <remarks>
             This is an aplication of genetic algorithm to train neural networks.
             The population is made of GeneticNeuralNetwork instance which is a
             compact representation of neural network. A genetic neural network
             represent a set of weights and threshold for a particular neural network.
             
             Here is the main loop of the algorithm :
             <code>
            	  Create initial random population of POPULATION_SIZE neural networks
            	   -&gt; Evaluate fitness function (square error on learning values)
            	  |   Select best neural networks
            	  |   Cross selected networks to make new generation
                -- apply mutation operator on new generation
            	  Until error &gt; error_threshold  	   
             </code></remarks>
    </member>
    <member name="T:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork">
      <summary>
            Representation of a neural network for the genetic algorithm
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.#ctor(PloobsEngine.IA.NeuralNetwork.NeuralNetwork)">
      <summary>
            Build a new Genetic NeuralNetwork from the Neural Network given as parameter
            </summary>
      <param name="n">The neural network model</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.Init">
      <summary>
            Initialize Genetic network from Neural Network
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.setWeights">
      <summary>
            Set Genetic neural network weights to the real neural network
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.CompareTo(System.Object)">
      <summary>
            Compare 2 genetic neural network on their square error
            </summary>
      <param name="other">another neural network</param>
      <returns>the comparative value</returns>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.Item(System.Int32)">
      <summary>
            Get or set the genes value
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.Error">
      <summary>
            Get or set the square error of the Network
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.GeneticNeuralNetwork.N_Genes">
      <summary>
            Get the number of genes of the Genetic Neural Network
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.rand">
      <summary>
            The random number generator
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.POPULATION_SIZE">
      <summary>
            The population size
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.MUTATION_RATIO">
      <summary>
            The mutation ratio during crossover
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.MAX_MUTATION_AMP">
      <summary>
            Maximum mutation amplitude
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.SELECTION_RATIO">
      <summary>
            The ratio of population selected for crossover
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.population">
      <summary>
            The population of GeneticNeuralNetwork
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.CrossOver(System.Int32,System.Int32)">
      <summary>
            Define the crossover operator for 2 GeneticNeuralNetwork
            </summary>
      <param name="i1">index of mother in population</param>
      <param name="i2">index of father in population</param>
      <returns>the child</returns>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.makeNewGeneration">
      <summary>
            Compute the new generation
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.ComputeErrors">
      <summary>
            Computes square error for each GeneticNeuralNetwork in population
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.#ctor(PloobsEngine.IA.NeuralNetwork.NeuralNetwork)">
      <summary>
            GeneticLearningAlgorithm constructor
            </summary>
      <param name="nn">The neural network to train</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.RandomizePopulation">
      <summary>
            Make a new random population
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.Learn(System.Single[][],System.Single[][])">
      <summary>
            To train the neuronal network on data.
            inputs[n] represents an input vector of 
            the neural network and expected_outputs[n]
            the expected ouput for this vector. 
            </summary>
      <param name="inputs">the input matrix</param>
      <param name="expected_outputs">the expected output matrix</param>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.PopulationSize">
      <summary>
            Get or set the population size
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.MutationRatio">
      <summary>
            Get or set the mutation ratio (between 0 and 100)
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.MaxMutationAmplitude">
      <summary>
            Get or set the maximum mutation amplitude
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.SelectionRatio">
      <summary>
            get or set the selection ratio
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.MutationValue">
      <summary>
            Get the random amplitude of a mutation
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.Mute">
      <summary>
            Get a bool with MUTATION_RATIO/100 probability to be true
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.RandSelectionIndex">
      <summary>
            Get a random selected neural network in the population
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GeneticLearningAlgorithm.Muted_NeuralNetwork">
      <summary>
            get a muted GeneticNeuralNetwork from the neural network
            </summary>
    </member>
    <member name="T:PloobsEngine.Utils.WeakReference.WeakList`1">
      <summary>
            List with weak references
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference.WeakList`1.IndexOf(`0)">
      <summary>
            Indexes the of.
            </summary>
      <param name="item">The item.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference.WeakList`1.Insert(System.Int32,`0)">
      <summary>
            Inserts the specified index.
            </summary>
      <param name="index">The index.</param>
      <param name="item">The item.</param>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference.WeakList`1.RemoveAt(System.Int32)">
      <summary>
            Removes at.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference.WeakList`1.Add(`0)">
      <summary>
            Adds the specified item.
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference.WeakList`1.Clear">
      <summary>
            Clears this instance.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference.WeakList`1.Contains(`0)">
      <summary>
            Determines whether [contains] [the specified item].
            </summary>
      <param name="item">The item.</param>
      <returns>
        <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference.WeakList`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies to.
            </summary>
      <param name="array">The array.</param>
      <param name="arrayIndex">Index of the array.</param>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference.WeakList`1.Remove(`0)">
      <summary>
            Removes the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference.WeakList`1.GetEnumerator">
      <summary>
            Gets the enumerator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference.WeakList`1.Purge">
      <summary>
            Purges this instance.
            </summary>
    </member>
    <member name="P:PloobsEngine.Utils.WeakReference.WeakList`1.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="!:T" /> at the specified index.
            </summary>
    </member>
    <member name="P:PloobsEngine.Utils.WeakReference.WeakList`1.Count">
      <summary>
            Gets the count.
            </summary>
    </member>
    <member name="P:PloobsEngine.Utils.WeakReference.WeakList`1.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
      <value>
        <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PloobsEngine.Utils.StaticRandom">
      <summary>
            Lots of Random Helpers
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.StaticRandom.Random">
      <summary>
            Returns a float randomly distributed between 0 and 1
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.StaticRandom.Random(System.Single,System.Single)">
      <summary>
            Returns a float randomly distributed between lowerBound and upperBound
            </summary>
      <param name="lowerBound">The lower bound.</param>
      <param name="upperBound">The upper bound.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.StaticRandom.RandomChoice(System.Single)">
      <summary>
            Return True or false depending of the probability passed in the parameter
            </summary>
      <param name="chanceOfTrue">Entre 0 e 1</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.StaticRandom.RandomIntInterval(System.Int32,System.Int32)">
      <summary>
            Random between two parameters
            </summary>
      <param name="min">The min.</param>
      <param name="max">The max.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.StaticRandom.PickRandomPoint(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Helper function chooses a random location on a triangle.
            </summary>
      <param name="position1">The position1.</param>
      <param name="position2">The position2.</param>
      <param name="position3">The position3.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.StaticRandom.RandomDirection">
      <summary>
            Pick a 3D Random Direction
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.StaticRandom.RandomBetween(System.Double,System.Double)">
      <summary>
            Returns a number between two values.
            </summary>
      <param name="min">Lower bound value</param>
      <param name="max">Upper bound value</param>
      <returns>
            Random number between bounds.
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.StaticRandom.RandomColor">
      <summary>
            Return a Random Color
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.StaticRandom.RandomPosition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Random Position inside a Box
            </summary>
      <param name="minBoxPos">The min box pos.</param>
      <param name="maxBoxPos">The max box pos.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.Utils.StaticRandom.RandomInstance">
      <summary>
            Gets or sets the random instance.
            </summary>
      <value>
            The random instance.
            </value>
    </member>
    <member name="F:PloobsEngine.SceneControl.ForwardRenderTecnichDescription.OrderAllObjectsBeforeDraw">
      <summary>
            Function called all frames to order all objects that are not culled
            Use this to sort objects by material and minimize gpu state changes
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.Scene.IIRenderTechnic">
      <summary>
            IRender Technic Specification
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.Scene.IIRenderTechnic.AddPostEffect(PloobsEngine.SceneControl.IPostEffect)">
      <summary>
            Adds the post effect.
            </summary>
      <param name="postEffect">The post effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.Scene.IIRenderTechnic.ContainsPostEffect(PloobsEngine.SceneControl.IPostEffect)">
      <summary>
            Determines whether [contains post effect] [the specified post effect].
            </summary>
      <param name="postEffect">The post effect.</param>
      <returns>
        <c>true</c> if [contains post effect] [the specified post effect]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.Scene.IIRenderTechnic.RemovePostEffect(PloobsEngine.SceneControl.IPostEffect)">
      <summary>
            Removes the post effect.
            </summary>
      <param name="postEffect">The post effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.Scene.IIRenderTechnic.CleanUp">
      <summary>
            Cleans up.
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.IRenderTechnic">
      <summary>
            Specification of a Render Technic
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.IRenderTechnic.PostEffectType">
      <summary>
            Post Effect type
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.IRenderTechnic.PostEffects">
      <summary>
            List off all PostEffects
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IRenderTechnic.#ctor(PloobsEngine.SceneControl.PostEffectType)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.IRenderTechnic" /> class.
            </summary>
      <param name="PostEffectType">Type of the post effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IRenderTechnic.AddPostEffect(PloobsEngine.SceneControl.IPostEffect)">
      <summary>
            Adds one post effect.
            </summary>
      <param name="postEffect">The post effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IRenderTechnic.RemovePostEffect(PloobsEngine.SceneControl.IPostEffect)">
      <summary>
            Removes one post effect.
            </summary>
      <param name="postEffect">The post effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IRenderTechnic.ContainsPostEffect(PloobsEngine.SceneControl.IPostEffect)">
      <summary>
            Determines whether [contains post effect] [the specified post effect].
            </summary>
      <param name="postEffect">The post effect.</param>
      <returns>
        <c>true</c> if [contains post effect] [the specified post effect]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.IRenderTechnic.BeforeFirstExecution(PloobsEngine.SceneControl.RenderHelper,PloobsEngine.SceneControl.IWorld)">
      <summary>
            Befores the first execution.
            </summary>
      <param name="render">The render.</param>
      <param name="world">The world.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IRenderTechnic.ExecuteTechnic(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.SceneControl.IWorld)">
      <summary>
            Executes the technic.
            </summary>
      <param name="gameTime">The game time.</param>
      <param name="render">The render.</param>
      <param name="world">The world.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IRenderTechnic.AfterLoadContent(PloobsEngine.SceneControl.IContentManager,PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Called after the All the Engine stuffs are loaded
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IRenderTechnic.CleanUp">
      <summary>
            Cleans up.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IRenderTechnic.TechnicName">
      <summary>
            Gets the name of the technic.
            </summary>
      <value>
            The name of the technic.
            </value>
    </member>
    <member name="T:PloobsEngine.SceneControl.IWorld">
      <summary>
            Specification of a world
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.IWorld.multThreading">
      <summary>
            Mulyi threading enabled ?
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.#ctor(PloobsEngine.Physics.IPhysicWorld,PloobsEngine.SceneControl.ICuller,PloobsEngine.Particles.IParticleManager,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.IWorld" /> class.
            </summary>
      <param name="PhysicWorld">The physic world.</param>
      <param name="Culler">The culler.</param>
      <param name="particleManager">The particle manager.</param>
      <param name="multiThread">if set to <c>true</c> [mult thread].</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.IWorld" /> class.
            Desserialization
            </summary>
      <param name="info">The info.</param>
      <param name="context">The context.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.IWorld" /> class.
            TO let the IWorld implementations free from the formal constructor
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.AddObject(PloobsEngine.SceneControl.IObject,System.Boolean)">
      <summary>
            Adds an object to the world.
            </summary>
      <param name="obj">The obj.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.ContainsObject(PloobsEngine.SceneControl.IObject)">
      <summary>
            Contains the specified obj.
            </summary>
      <param name="obj">The obj.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.RemoveObject(PloobsEngine.SceneControl.IObject)">
      <summary>
            Removes an object from the world.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.UpdateWorld(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates the world.
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.AddLight(PloobsEngine.Light.ILight)">
      <summary>
            Adds the light.
            </summary>
      <param name="light">The light.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.RemoveLight(PloobsEngine.Light.ILight)">
      <summary>
            Removes the light.
            </summary>
      <param name="light">The light.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.AddTrigger(PloobsEngine.Trigger.ITrigger)">
      <summary>
            Adds the trigger.
            </summary>
      <param name="trigger">The trigger.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.RemoveTrigger(PloobsEngine.Trigger.ITrigger)">
      <summary>
            Removes the trigger.
            </summary>
      <param name="trigger">The trigger.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.AddDummy(PloobsEngine.SceneControl.IDummy)">
      <summary>
            Add a Dummy to the world
            Its like a position, 
            usefull to serializable position from a world editor
            </summary>
      <param name="dummy">The dummy.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.RemoveDummy(PloobsEngine.SceneControl.IDummy)">
      <summary>
            Removes the dummy.
            </summary>
      <param name="dummy">The dummy.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.AddSoundEmitter(PloobsEngine.Audio.ISoundEmitter3D,System.Boolean)">
      <summary>
            Adds the sound emitter.
            </summary>
      <param name="em">The em.</param>
      <param name="play">if set to <c>true</c> [play].</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.RemoveSoundEmitter(PloobsEngine.Audio.ISoundEmitter3D)">
      <summary>
            Removes the sound emitter.
            </summary>
      <param name="em">The em.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.CleanUp">
      <summary>
            Cleans up.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IWorld.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            TODO
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:PloobsEngine.SceneControl.IWorld.ParticleManager">
      <summary>
            Gets the particle manager.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IWorld.GraphicsInfo">
      <summary>
            Gets or sets the graphics info.
            </summary>
      <value>
            The graphics info.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl.IWorld.GraphicsFactory">
      <summary>
            Gets or sets the graphics factory.
            </summary>
      <value>
            The graphics factory.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl.IWorld.CameraManager">
      <summary>
            Camera Managment
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IWorld.PhysicWorld">
      <summary>
            Gets or sets the physic world.
            </summary>
      <value>
            The physic world.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl.IWorld.Dummies">
      <summary>
            Gets all the dummyes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.SceneControl.IWorld.Lights">
      <summary>
            Gets the lights.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IWorld.Culler">
      <summary>
            Gets or sets the culler.
            </summary>
      <value>
            The culler.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl.IWorld.Objects">
      <summary>
            Gets the objects.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IWorld.SoundEmiters3D">
      <summary>
            Gets the objects.
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.IPostEffect">
      <summary>
            IPost Effect Specification
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IPostEffect.#ctor(PloobsEngine.SceneControl.PostEffectType)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.IPostEffect" /> class.
            </summary>
      <param name="PostEffectType">Type of the post effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IPostEffect.Init(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Initiates the specified Post Effect.
            Called by the engine
            </summary>
      <param name="ginfo">The ginfo.</param>
      <param name="factory">The factory.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IPostEffect.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.GameTime,PloobsEngine.Engine.GraphicInfo,PloobsEngine.SceneControl.IWorld,System.Boolean)">
      <summary>
            Apply the post effect
            </summary>
      <param name="ImageToProcess">The image to process.</param>
      <param name="rHelper">The r helper.</param>
      <param name="gt">The gt.</param>
      <param name="GraphicInfo">The graphic info.</param>
      <param name="world">The world.</param>
      <param name="useFloatBuffer">if set to <c>true</c> [use float buffer].</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IPostEffect.CleanUp">
      <summary>
            Cleans up
            Called when the screen that this post effect is attached is removed
            IF this post effect is not bounded to a screen (render technic), this method obvious is not called =P
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IPostEffect.PostEffectType">
      <summary>
            Gets or sets the type of the post effect.
            </summary>
      <value>
            The type of the post effect.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl.IPostEffect.Priority">
      <summary>
            Gets the priority in relation with others PostEffects        
            Lower the number, first the effect will be applied
            0 By Default
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IPostEffect.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:PloobsEngine.SceneControl.IPostEffect" /> is enabled.
            Enabled by default
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PloobsEngine.SceneControl.BloomPostEffect">
      <summary>
            Bloom Post Effect
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.BloomPostEffect.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.BloomPostEffect" /> class.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.BloomPostEffect.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.GameTime,PloobsEngine.Engine.GraphicInfo,PloobsEngine.SceneControl.IWorld,System.Boolean)">
      <summary>
            Draws
            </summary>
      <param name="ImageToProcess">The image to process.</param>
      <param name="render">The render.</param>
      <param name="gt">The gt.</param>
      <param name="GraphicInfo">The graphic info.</param>
      <param name="world">The world.</param>
      <param name="useFloatingBuffer">if set to <c>true</c> [use floating buffer].</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.BloomPostEffect.Init(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Initiates the specified Post Effect.
            Called by the engine
            </summary>
      <param name="ginfo">The ginfo.</param>
      <param name="factory">The factory.</param>
    </member>
    <member name="P:PloobsEngine.SceneControl.BloomPostEffect.BloomThreshold">
      <summary>
            Bloom Parameter
            0 TO 255
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.OnScreenChangeState">
      <summary>
            Called when Screen state change
            </summary>
      <param name="screen">The screen.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl.ScreenState">
      <summary>
            Enum describes the screen transition state.
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.ScreenState.Active">
      <summary>
            Updates and Draw called (normal operation)
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.ScreenState.Paused">
      <summary>
            Updates is not called
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.ScreenState.Hidden">
      <summary>
            Draw is not called
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.ScreenState.Inactive">
      <summary>
            draw and update not called
            </summary>
    </member>
    <member name="T:PloobsEngine.MessageSystem.Message">
      <summary>
            Message To Be sent
            </summary>
    </member>
    <member name="M:PloobsEngine.MessageSystem.Message.#ctor(System.Int64,System.Int64,System.String,PloobsEngine.MessageSystem.Priority,System.Int32,PloobsEngine.MessageSystem.SenderType,System.Object,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.MessageSystem.Message" /> class.
            </summary>
      <param name="sender">Id of the sender, use -1 to be an undentified sender</param>
      <param name="receiver">Reciever ID, use -1 to send to a Tag group</param>
      <param name="tag">Tag (used to send to a group of entities), if the message will be send to just one reciver, use null here</param>
      <param name="pri">Priority</param>
      <param name="timetodeliver">Time to send the message in MILISECONDS( Use 0 to send in THIS frame and -1 to send NOW)</param>
      <param name="type">Message Type; The engine DONT use this field for NOTHING, its for user control</param>
      <param name="Content">Message Content</param>
      <param name="cod">Message Code, The engine DONT use this field, its for user control</param>
    </member>
    <member name="P:PloobsEngine.MessageSystem.Message.Check">
      <summary>
            Gets or sets the check.
            This is used by the Message deliver to decide id it will check if the
            Reciever exists
            </summary>
      <value>
            The check.
            </value>
    </member>
    <member name="P:PloobsEngine.MessageSystem.Message.Sender">
      <summary>
            Gets or sets the sender ID.
            </summary>
      <value>
            The sender.
            </value>
    </member>
    <member name="P:PloobsEngine.MessageSystem.Message.Receiver">
      <summary>
            Gets or sets the receiver ID.
            </summary>
      <value>
            The receiver.
            </value>
    </member>
    <member name="P:PloobsEngine.MessageSystem.Message.Tag">
      <summary>
            Gets or sets the tag of this message.
            If tag is set, the message will be send to the TAG group, and not to the
            reciever
            </summary>
      <value>
            The tag.
            </value>
    </member>
    <member name="P:PloobsEngine.MessageSystem.Message.Prioridade">
      <summary>
            Gets or sets the Priority.
            </summary>
      <value>
            The prioridade.
            </value>
    </member>
    <member name="P:PloobsEngine.MessageSystem.Message.Timetodeliver">
      <summary>
            Gets or sets the timetodeliver.
            0 for now
            </summary>
      <value>
            The timetodeliver.
            </value>
    </member>
    <member name="P:PloobsEngine.MessageSystem.Message.SenderType">
      <summary>
            Gets or sets the type of the sender.
            </summary>
      <value>
            The type of the sender.
            </value>
    </member>
    <member name="P:PloobsEngine.MessageSystem.Message.Content">
      <summary>
            Gets or sets the content of the message.
            </summary>
      <value>
            The content.
            </value>
    </member>
    <member name="P:PloobsEngine.MessageSystem.Message.Cod">
      <summary>
            Gets or sets the message code.
            </summary>
      <value>
            The cod.
            </value>
    </member>
    <member name="T:PloobsEngine.MessageSystem.Priority">
      <summary>
            Message Priority
            </summary>
    </member>
    <member name="F:PloobsEngine.MessageSystem.Priority.URGENT">
      <summary>
            urgent
            </summary>
    </member>
    <member name="F:PloobsEngine.MessageSystem.Priority.HIGH">
      <summary>
            Hight
            </summary>
    </member>
    <member name="F:PloobsEngine.MessageSystem.Priority.MEDIUM">
      <summary>
            Medium
            </summary>
    </member>
    <member name="F:PloobsEngine.MessageSystem.Priority.LOW">
      <summary>
            Low
            </summary>
    </member>
    <member name="F:PloobsEngine.MessageSystem.Priority.VERYLOW">
      <summary>
            Very low
            </summary>
    </member>
    <member name="T:PloobsEngine.MessageSystem.SenderType">
      <summary>
            Avaliable Sender Types
            </summary>
    </member>
    <member name="T:PloobsEngine.MessageSystem.Checks">
      <summary>
            Types of checking
            </summary>
    </member>
    <member name="F:PloobsEngine.MessageSystem.Checks.CHECK_DELIVERY">
      <summary>
            Check if destiny exist before sending the message
            </summary>
    </member>
    <member name="F:PloobsEngine.MessageSystem.Checks.DONT_CHECK_DELIVERY">
      <summary>
            Do not check anything.
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.ICamera2D">
      <summary>
            2D camera specification
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.ICamera2D.ConvertScreenToWorld(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean)">
      <summary>
            Converts the screen to world coordinates.
            </summary>
      <param name="location">The location.</param>
      <param name="useSimulatedProjection">if set to <c>true</c> [use simulated projection].</param>
      <param name="returnInDisplayUnits">if set to <c>true</c> [return in display units].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.ICamera2D.ConvertWorldToScreen(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean)">
      <summary>
            Converts the world to screen coordinates.
            </summary>
      <param name="location">The location.</param>
      <param name="useSimulatedProjection">if set to <c>true</c> [use simulated projection].</param>
      <param name="convertToSimUnits">if set to <c>true</c> [convert to sim units].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.ICamera2D.MoveCamera(Microsoft.Xna.Framework.Vector2)">
      <summary>
            Moves the camera.
            </summary>
      <param name="amount">The amount.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.ICamera2D.RotateCamera(System.Single)">
      <summary>
            Rotates the camera.
            </summary>
      <param name="amount">The amount.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.ICamera2D.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates
            </summary>
      <param name="gameTime">The game time.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.ICamera2D.CleanUp">
      <summary>
            Called when the attached screen is removed
            If this camera is not attached to a screen, this method is not called =P
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.ICamera2D.Position">
      <summary>
            Gets or sets the position.
            </summary>
      <value>
            The position.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.ICamera2D.Rotation">
      <summary>
            Gets or sets the rotation.
            </summary>
      <value>
            The rotation.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.ICamera2D.SimProjection">
      <summary>
            Gets the sim projection.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.ICamera2D.Projection">
      <summary>
            Gets the projection.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.ICamera2D.SimView">
      <summary>
            Gets the sim view.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.ICamera2D.View">
      <summary>
            Gets the view.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.ICamera2D.Zoom">
      <summary>
            Gets or sets the zoom.
            </summary>
      <value>
            The zoom.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.ICamera2D.ScreenPortion">
      <summary>
            Piece of the screen seen by the camera
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.ICamera2D.BoundingFrustrum">
      <summary>
            Gets the bounding frustrum.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physic2D.I2DPhysicObject">
      <summary>
            2D physic object specification
            </summary>
    </member>
    <member name="M:PloobsEngine.Physic2D.I2DPhysicObject.ApplyForce(Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Vector2})">
      <summary>
            Applies the force.
            </summary>
      <param name="force">The force.</param>
      <param name="point">The point.</param>
    </member>
    <member name="P:PloobsEngine.Physic2D.I2DPhysicObject.Physic2DType">
      <summary>
            Gets the type of the physic2D.
            </summary>
      <value>
            The type of the physic2 D.
            </value>
    </member>
    <member name="P:PloobsEngine.Physic2D.I2DPhysicObject.Origin">
      <summary>
            Gets or sets the origin.
            </summary>
      <value>
            The origin.
            </value>
    </member>
    <member name="P:PloobsEngine.Physic2D.I2DPhysicObject.Owner">
      <summary>
            Gets the owner.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physic2D.I2DPhysicObject.isDynamic">
      <summary>
            Gets or sets a value indicating whether this instance is dynamic.
            </summary>
      <value>
        <c>true</c> if this instance is dynamic; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.Physic2D.I2DPhysicObject.Position">
      <summary>
            Gets or sets the position.
            </summary>
      <value>
            The position.
            </value>
    </member>
    <member name="P:PloobsEngine.Physic2D.I2DPhysicObject.LinearVelocity">
      <summary>
            Gets or sets the linear velocity.
            </summary>
      <value>
            The linear velocity.
            </value>
    </member>
    <member name="P:PloobsEngine.Physic2D.I2DPhysicObject.AngularVelocity">
      <summary>
            Gets or sets the angular velocity.
            </summary>
      <value>
            The angular velocity.
            </value>
    </member>
    <member name="P:PloobsEngine.Physic2D.I2DPhysicObject.Rotation">
      <summary>
            Gets or sets the rotation.
            </summary>
      <value>
            The rotation.
            </value>
    </member>
    <member name="P:PloobsEngine.Physic2D.I2DPhysicObject.Enabled">
      <summary>
            Gets a value indicating whether this <see cref="T:PloobsEngine.Physic2D.I2DPhysicObject" /> is enabled.
            </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PloobsEngine.Physic2D.Farseer.FarseerObject">
      <summary>
            Farseer 2D physic object implementation
            </summary>
    </member>
    <member name="T:Bnoerj.AI.Steering.IObstacle">
      <summary>
            Obstacle: a pure virtual base class for an abstract shape in space, to be
            used with obstacle avoidance.
            
            XXX this should define generic methods for querying the obstacle shape
            </summary>
    </member>
    <member name="T:Bnoerj.AI.Steering.SphericalObstacle">
      <summary>
            SphericalObstacle a simple concrete type of obstacle.
            </summary>
    </member>
    <member name="T:Bnoerj.AI.Steering.IAnnotationService">
      <summary>
            Provides methods to annotate the steering behaviors.
            </summary>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.AddTrail(Bnoerj.AI.Steering.Trail)">
      <summary>
            Adds a Trail.
            </summary>
      <param name="trail">
      </param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.RemoveTrail(Bnoerj.AI.Steering.Trail)">
      <summary>
            Removes the specified Trail.
            </summary>
      <param name="trail">
      </param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.DrawTrails(Bnoerj.AI.Steering.IDraw)">
      <summary>
            Draws all registered Trails.
            </summary>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.Line(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
      <summary>
            Draws an opaque colored line segment between two locations in space.
            </summary>
      <param name="startPoint">The start point of the line.</param>
      <param name="endPoint">The end point of the line.</param>
      <param name="color">The color of the line.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.CircleXZ(System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,System.Int32)">
      <summary>
            Draws a circle on the XZ plane.
            </summary>
      <param name="radius">The radius of the circle.</param>
      <param name="center">The center of the circle.</param>
      <param name="color">The color of the circle.</param>
      <param name="segments">The number of segments to use to draw the circle.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.DiskXZ(System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,System.Int32)">
      <summary>
            Draws a disk on the XZ plane.
            </summary>
      <param name="radius">The radius of the disk.</param>
      <param name="center">The center of the disk.</param>
      <param name="color">The color of the disk.</param>
      <param name="segments">The number of segments to use to draw the disk.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.Circle3D(System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,System.Int32)">
      <summary>
            Draws a circle perpendicular to the given axis.
            </summary>
      <param name="radius">The radius of the circle.</param>
      <param name="center">The center of the circle.</param>
      <param name="axis">The axis of the circle.</param>
      <param name="color">The color of the circle.</param>
      <param name="segments">The number of segments to use to draw the circle.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.Disk3D(System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,System.Int32)">
      <summary>
            Draws a disk perpendicular to the given axis.
            </summary>
      <param name="radius">The radius of the disk.</param>
      <param name="center">The center of the disk.</param>
      <param name="axis">The axis of the disk.</param>
      <param name="color">The color of the disk.</param>
      <param name="segments">The number of segments to use to draw the disk.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.CircleOrDiskXZ(System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,System.Int32,System.Boolean)">
      <summary>
            Draws a circle (not filled) or disk (filled) on the XZ plane.
            </summary>
      <param name="radius">The radius of the circle/disk.</param>
      <param name="center">The center of the circle/disk.</param>
      <param name="color">The color of the circle/disk.</param>
      <param name="segments">The number of segments to use to draw the circle/disk.</param>
      <param name="filled">Flag indicating whether to draw a disk or circle.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.CircleOrDisk3D(System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,System.Int32,System.Boolean)">
      <summary>
            Draws a circle (not filled) or disk (filled) perpendicular to the given axis.
            </summary>
      <param name="radius">The radius of the circle/disk.</param>
      <param name="center">The center of the circle/disk.</param>
      <param name="axis">The axis of the circle/disk.</param>
      <param name="color">The color of the circle/disk.</param>
      <param name="segments">The number of segments to use to draw the circle/disk.</param>
      <param name="filled">Flag indicating whether to draw a disk or circle.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.CircleOrDisk(System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Draws a circle (not filled) or disk (filled) perpendicular to the given axis.
            </summary>
      <param name="radius">The radius of the circle/disk.</param>
      <param name="axis">The axis of the circle/disk.</param>
      <param name="center">The center of the circle/disk.</param>
      <param name="color">The color of the circle/disk.</param>
      <param name="segments">The number of segments to use to draw the circle/disk.</param>
      <param name="filled">Flag indicating whether to draw a disk or circle.</param>
      <param name="in3d">Flag indicating whether to draw the disk/circle in 3D or the XZ plane.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.AvoidObstacle(System.Single)">
      <summary>
            Called when steerToAvoidObstacles decides steering is required.
            </summary>
      <param name="minDistanceToCollision">
      </param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.PathFollowing(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Called when steerToFollowPath decides steering is required.
            </summary>
      <param name="future">
      </param>
      <param name="onPath">
      </param>
      <param name="target">
      </param>
      <param name="outside">
      </param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.AvoidCloseNeighbor(Bnoerj.AI.Steering.IVehicle,System.Single)">
      <summary>
            Called when steerToAvoidCloseNeighbors decides steering is required.
            </summary>
      <param name="other">
      </param>
      <param name="additionalDistance">
      </param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.AvoidNeighbor(Bnoerj.AI.Steering.IVehicle,System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Called when steerToAvoidNeighbors decides steering is required.
            </summary>
      <param name="threat">
      </param>
      <param name="steer">
      </param>
      <param name="ourFuture">
      </param>
      <param name="threatFuture">
      </param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.VelocityAcceleration(Bnoerj.AI.Steering.IVehicle)">
      <summary>
            Draws lines from the vehicle's position showing its velocity and acceleration.
            </summary>
      <param name="vehicle">The vehicle to annotate.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.VelocityAcceleration(Bnoerj.AI.Steering.IVehicle,System.Single)">
      <summary>
            Draws lines from the vehicle's position showing its velocity and acceleration.
            </summary>
      <param name="vehicle">The vehicle to annotate.</param>
      <param name="maxLength">The maximum length for the acceleration and velocity lines.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.IAnnotationService.VelocityAcceleration(Bnoerj.AI.Steering.IVehicle,System.Single,System.Single)">
      <summary>
            Draws lines from the vehicle's position showing its velocity and acceleration.
            </summary>
      <param name="vehicle">The vehicle to annotate.</param>
      <param name="maxLengthAcceleration">The maximum length for the acceleration line.</param>
      <param name="maxLengthVelocity">The maximum length for the velocity line.</param>
    </member>
    <member name="P:Bnoerj.AI.Steering.IAnnotationService.IsEnabled">
      <summary>
            Indicates whether annotation is enabled.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.MaterialDescription">
      <summary>
            3D Physic Material Description
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.MaterialDescription.StaticFriction">
      <summary>
            Static Friction
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.MaterialDescription.DinamicFriction">
      <summary>
            Dynamic Friction
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.MaterialDescription.Bounciness">
      <summary>
            Bounciness
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.MaterialDescription.DefaultBepuMaterial">
      <summary>
            Defaults the bepu material.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Physics.PhysicObjectTypes">
      <summary>
            Physic Types allowed
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.MobilePhysicObject">
      <summary>
            Mobile Physic Obj
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.InstancedTriangleMeshObject">
      <summary>
            InstancedTriangleMeshObject
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.TERRAIN">
      <summary>
            Terrain
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.DETECTOROBJECT">
      <summary>
            Detector object like a trigger, dont has physic part
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.COMPOUNDOBJECT">
      <summary>
            Compound (lots of shapes)
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.CYLINDEROBJECT">
      <summary>
            Cilinder
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.BOXOBJECT">
      <summary>
            Box
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.CAROBJECT">
      <summary>
            Car
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.CAPSULEOBJECT">
      <summary>
            Capsule
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.CHARACTEROBJECT">
      <summary>
            Character
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.FULLCHARACTEROBJECT">
      <summary>
            FULLCHARACTER OBJECT
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.SPHERECHARACTEROBJECT">
      <summary>
            Sphere Character Object
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.PLANEOBJECT">
      <summary>
            Plane
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.SPHEREOBJECT">
      <summary>
            Sphere
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.TRIANGLEMESHOBJECT">
      <summary>
            Triangle Mesh
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.HEIGHMAPOBJECT">
      <summary>
            HeightMap
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.GHOST">
      <summary>
            Not added to physicWorld,
            cant colide, cant be detected by raycast or triggers
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.SPECIALIZEDMOVER">
      <summary>
            Object that moves kinematicaly
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.OTHER">
      <summary>
            None of those before
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.PhysicObjectTypes.NONE">
      <summary>
            Should not be used, here for compatibility
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.Write(Lidgren.Network.NetOutgoingMessage,Microsoft.Xna.Framework.Point)">
      <summary>
            Write a Point
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.ReadPoint(Lidgren.Network.NetIncomingMessage)">
      <summary>
            Read a Point
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.WriteHalfPrecision(Lidgren.Network.NetOutgoingMessage,System.Single)">
      <summary>
            Write a Single with half precision (16 bits)
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.ReadHalfPrecisionSingle(Lidgren.Network.NetIncomingMessage)">
      <summary>
            Reads a half precision Single written using WriteHalfPrecision(float)
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.Write(Lidgren.Network.NetOutgoingMessage,Microsoft.Xna.Framework.Vector2)">
      <summary>
            Writes a Vector2
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.ReadVector2(Lidgren.Network.NetIncomingMessage)">
      <summary>
            Reads a Vector2
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.Write(Lidgren.Network.NetOutgoingMessage,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Writes a Vector3
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.WriteHalfPrecision(Lidgren.Network.NetOutgoingMessage,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Writes a Vector3 at half precision
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.ReadVector3(Lidgren.Network.NetIncomingMessage)">
      <summary>
            Reads a Vector3
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.ReadHalfPrecisionVector3(Lidgren.Network.NetIncomingMessage)">
      <summary>
            Writes a Vector3 at half precision
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.Write(Lidgren.Network.NetOutgoingMessage,Microsoft.Xna.Framework.Vector4)">
      <summary>
            Writes a Vector4
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.ReadVector4(Lidgren.Network.NetIncomingMessage)">
      <summary>
            Reads a Vector4
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.WriteUnitVector3(Lidgren.Network.NetOutgoingMessage,Microsoft.Xna.Framework.Vector3,System.Int32)">
      <summary>
            Writes a unit vector (ie. a vector of length 1.0, for example a surface normal) 
            using specified number of bits
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.ReadUnitVector3(Lidgren.Network.NetIncomingMessage,System.Int32)">
      <summary>
            Reads a unit vector written using WriteUnitVector3(numberOfBits)
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.WriteRotation(Lidgren.Network.NetOutgoingMessage,Microsoft.Xna.Framework.Quaternion,System.Int32)">
      <summary>
            Writes a unit quaternion using the specified number of bits per element
            for a total of 4 x bitsPerElements bits. Suggested value is 8 to 24 bits.
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.ReadRotation(Lidgren.Network.NetIncomingMessage,System.Int32)">
      <summary>
            Reads a unit quaternion written using WriteRotation(... ,bitsPerElement)
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.WriteMatrix(Lidgren.Network.NetOutgoingMessage,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Writes an orthonormal matrix (rotation, translation but not scaling or projection)
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.WriteMatrix(Lidgren.Network.NetOutgoingMessage,Microsoft.Xna.Framework.Matrix)">
      <summary>
            Writes an orthonormal matrix (rotation, translation but no scaling or projection)
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.ReadMatrix(Lidgren.Network.NetIncomingMessage)">
      <summary>
            Reads a matrix written using WriteMatrix()
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.ReadMatrix(Lidgren.Network.NetIncomingMessage,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Reads a matrix written using WriteMatrix()
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.Write(Lidgren.Network.NetOutgoingMessage,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>
            Writes a bounding sphere
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.XNAExtensions.ReadBoundingSphere(Lidgren.Network.NetIncomingMessage)">
      <summary>
            Reads a bounding sphere written using Write(message, BoundingSphere)
            </summary>
    </member>
    <member name="T:PloobsEngine.Loader.ExtractMeshesFromMoldelLoader">
      <summary>
            Extracts meshes from a scene model
            </summary>
    </member>
    <member name="T:PloobsEngine.Features.DebugDraw.Primitive2DDraw">
      <summary>
            Component to draw 2D primitives on the top of the screen
            </summary>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.Primitive2DDraw.Add2DPrimitive(PloobsEngine.Features.DebugDraw.I2DPrimitive)">
      <summary>
            Add the 2D primitive.
            </summary>
      <param name="I2DPrimitive">The i2 D primitive.</param>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.Primitive2DDraw.Remove2DPrimitive(PloobsEngine.Features.DebugDraw.I2DPrimitive)">
      <summary>
            Remove the 2D primitive.
            </summary>
      <param name="I2DPrimitive">The i2 D primitive.</param>
    </member>
    <member name="T:PloobsEngine.Components.ComponentManager">
      <summary>
            Handles the Components
            </summary>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates 
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.GetPreDraw">
      <summary>
            Gets all the pre draw components.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.GetPosDraw">
      <summary>
            Gets all the pos draw components.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.GetPosWithDepthDraw">
      <summary>
            Gets the pos with Depth draw.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.PreDraw(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Draw the Pre Draw components
            </summary>
      <param name="gt">The gt.</param>
      <param name="activeView">The active view.</param>
      <param name="activeProjection">The active projection.</param>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.AfterDraw(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Draw the Afters draw.
            </summary>
      <param name="render">The render.</param>
      <param name="gt">The gt.</param>
      <param name="activeView">The active view.</param>
      <param name="activeProjection">The active projection.</param>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.PosWithDepthDraw(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Draw the Afters with depth draw.
            </summary>
      <param name="render">The render.</param>
      <param name="gt">The gt.</param>
      <param name="activeView">The active view.</param>
      <param name="activeProjection">The active projection.</param>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.LoadContent(PloobsEngine.Engine.GraphicInfo@)">
      <summary>
            Loads the content.
            </summary>
      <param name="GraphicInfo">The graphic info.</param>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.HasComponent(System.String)">
      <summary>
            Determines whether the component is already added
            </summary>
      <param name="componentName">Name of the component.</param>
      <returns>
        <c>true</c> if the specified component name has component; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.AddComponent(PloobsEngine.Components.IComponent)">
      <summary>
            Adds the component.
            </summary>
      <param name="comp">The comp.</param>
      <returns>FALSE if the component already exist, false otherwise </returns>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.GetComponent(System.String)">
      <summary>
            Gets the component.
            </summary>
      <param name="componentName">Name of the component.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.GetComponentsNames">
      <summary>
            Return all the Components Names
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Components.ComponentManager.RemoveComponent(System.String)">
      <summary>
            Removes the component.
            </summary>
      <param name="name">The name.</param>
      <returns>TRUE is the component exist and was remove, false otherwise</returns>
    </member>
    <member name="T:PloobsEngine.IA.NeuralNetwork.Neuron">
      <summary>
             Class representing an artificial neuron
             </summary>
      <remarks>
        <code>
              
              --------------&gt; * W[0] \                              -----  
              --------------&gt; * W[1] - + -------&gt; -threshold -------| f | ---------&gt; O
              --------------&gt; * W[i] /                              -----
                 SYNAPSES      WEIGHT             THRESHOLD       ACTIVATION       OUTPUT
            
             </code>
      </remarks>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Neuron.rand">
      <summary>
            Pseudo random number generator to initialize neuron weight
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Neuron.R_MIN">
      <summary>
            Minimum value for randomisation of weights and threshold
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Neuron.R_MAX">
      <summary>
            Maximum value for randomization of weights and threshold
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Neuron.w">
      <summary>
            Weight of every synapse
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Neuron.last_w">
      <summary>
            Last weight of every synapse
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Neuron.threshold">
      <summary>
            Threshold of the neuron
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Neuron.last_threshold">
      <summary>
            Last threshold of the neuron
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Neuron.f">
      <summary>
            Activation function of the neuron
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Neuron.o">
      <summary>
            Value of the last neuron ouput
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Neuron.ws">
      <summary>
            Last value of synapse sum minus threshold
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Neuron.a">
      <summary>
            Usefull for backpropagation algorithm
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Neuron.#ctor(System.Int32,PloobsEngine.IA.NeuralNetwork.ActivationFunction)">
      <summary>
            Build a neurone with Ni inputs
            </summary>
      <param name="Ni">number of inputs</param>
      <param name="af">The activation function of the neuron</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Neuron.#ctor(System.Int32)">
      <summary>
            Build a neurone with Ni inputs whith a default 
            activation function (SIGMOID)
            </summary>
      <param name="Ni">number of inputs</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Neuron.randomizeWeight">
      <summary>
            Randomize Weight for each input between R_MIN and R_MAX
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Neuron.randomizeThreshold">
      <summary>
            Randomize the threshold (between R_MIN and R_MAX)
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Neuron.randomizeAll">
      <summary>
            Randomize the threshold and the weights
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Neuron.ComputeOutput(System.Single[])">
      <summary>
            Compute the output of the neurone
            </summary>
      <param name="input">The input vector</param>
      <returns>The output value of the neuron ( =f(ws) )</returns>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Neuron.N_Inputs">
      <summary>
             Number of neuron inputs (synapses)
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Neuron.Item(System.Int32)">
      <summary>
            Indexer of the neuron to get or set weight of synapses
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Neuron.Threshold">
      <summary>
            To get or set the threshold value of the neuron
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Neuron.Output">
      <summary>
            Get the last output of the neuron
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Neuron.OutputPrime">
      <summary>
            Get the last output prime of the neuron (f'(ws))
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Neuron.WS">
      <summary>
            Get the last sum of inputs
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Neuron.F">
      <summary>
            Get or set the neuron activation function
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Neuron.A">
      <summary>
            Get or set a value of the neuron
            (usefull for backpropagation learning algorithm)
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Neuron.Last_Threshold">
      <summary>
            Get the last threshold value of the neuron
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Neuron.Last_W">
      <summary>
            Get the last weights of the neuron
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Neuron.Randomization_Min">
      <summary>
            Get or set the minimum value for randomisation of weights and threshold
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Neuron.Randomization_Max">
      <summary>
            Get or set the maximum value for randomization of weights and threshold
            </summary>
    </member>
    <member name="T:BehaviorTrees.Parallel`1">
      <summary>
            Composite node executing its subnodes in parallel.
            </summary>
      <typeparam name="E">Entity type.</typeparam>
    </member>
    <member name="M:BehaviorTrees.Parallel`1.#ctor(BehaviorTrees.Node{`0})">
      <summary>
            Instantiates parallel node with a given master node. Provided master node
            is added to the collection as well.
            </summary>
      <remarks>
            Master node is the one whose result have higher priority than others
            ie if master node succeeds, than whole parallel does
            </remarks>
      <param name="masterNode">
      </param>
    </member>
    <member name="M:BehaviorTrees.Parallel`1.Evaluate(`0)">
      <summary>
            Creates task responsible for running the children nodes in parallel.
            </summary>
      <param name="entity">Entity which is used in the process of executing task.</param>
      <returns>
      </returns>
    </member>
    <member name="T:BehaviorTrees.ParallelTask`1">
      <summary>
            Task responsible for running parallel node.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.ParallelTask`1.Execute(`0,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Executes children nodes' task in parallel.
            </summary>
      <param name="entity">Entity which is used in the process of executing task.</param>
      <returns>
            Success if master node succeeds or all of the children succeeds.
            Failure if one of the children fails.
            Running otherwise.
            </returns>
    </member>
    <member name="T:PloobsEngine.Utils.WeakReference`1">
      <summary>
            Weak reference Strong type
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Utils.WeakReference`1" /> class.
            </summary>
      <param name="target">The target.</param>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference`1.#ctor(`0,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Utils.WeakReference`1" /> class.
            </summary>
      <param name="target">The target.</param>
      <param name="trackResurrection">if set to <c>true</c> [track resurrection].</param>
    </member>
    <member name="M:PloobsEngine.Utils.WeakReference`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Utils.WeakReference`1" /> class.
            </summary>
      <param name="info">An object that holds all the data needed to serialize or deserialize the current <see cref="T:System.WeakReference" /> object.</param>
      <param name="context">(Reserved) Describes the source and destination of the serialized stream specified by <paramref name="info" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null. </exception>
    </member>
    <member name="P:PloobsEngine.Utils.WeakReference`1.Target">
      <summary>
            Gets or sets the object (the target) referenced by the current <see cref="T:System.WeakReference" /> object.
            </summary>
      <returns>null if the object referenced by the current <see cref="T:System.WeakReference" /> object has been garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.WeakReference" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The reference to the target object is invalid. This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</exception>
    </member>
    <member name="T:PloobsEngine.Utils.BinaryContentLoader">
      <summary>
            Binary Content Loader
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.BinaryContentLoader.SaveBinaryContent(System.Object,System.Type,System.String)">
      <summary>
            Saves the content of the object in a binary format.
            </summary>
      <param name="obj">The obj.</param>
      <param name="tipo">The type.</param>
      <param name="Path">The path.</param>
    </member>
    <member name="M:PloobsEngine.Utils.BinaryContentLoader.LoadBynaryContent(System.String,System.Type)">
      <summary>
            Loads the content of the bynary file.
            </summary>
      <param name="name">The name.</param>
      <param name="tipo">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.Reader.Read(System.Char,System.Char,System.Char)">
      <summary>
            Liest das gesamte Dokument
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Reader.ReadValue(System.String)">
      <summary>
            Liest den Wert eines Keys aus dem Dokument heraus.
            </summary>
      <param name="key">der Schlüssel: "resolution = 'Wert'"</param>
    </member>
    <member name="T:PloobsEngine.MessageSystem.SystemMessageFactory">
      <summary>
            Helper to create system messages
            </summary>
    </member>
    <member name="M:PloobsEngine.MessageSystem.SystemMessageFactory.NotFoundReciever(System.Int64,System.Int64)">
      <summary>
            Not found message.
            </summary>
      <param name="reciever">The reciever.</param>
      <param name="notfoundid">The notfoundid.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Material.IMaterial">
      <summary>
            Material Specification
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.IMaterial.Initialization(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.IObject)">
      <summary>
            Initializations the specified Material.
            </summary>
      <param name="ginfo">The ginfo.</param>
      <param name="factory">The factory.</param>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.Material.IMaterial.PreDrawnPhase(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IWorld,PloobsEngine.SceneControl.IObject,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight},PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Pre drawn Function.
            Called before all the objects are draw
            </summary>
      <param name="mundo">The mundo.</param>
      <param name="gt">The gt.</param>
      <param name="obj">The obj.</param>
      <param name="cam">The cam.</param>
      <param name="lights">The lights.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.Material.IMaterial.PosDrawnPhase(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight},PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Pos drawn Function.        
            Called after all objects are Draw
            </summary>
      <param name="gt">The gt.</param>
      <param name="obj">The obj.</param>
      <param name="cam">The cam.</param>
      <param name="lights">The lights.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.Material.IMaterial.Drawn(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight},PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Normal Drawn Function.
            </summary>
      <param name="gt">The gt.</param>
      <param name="obj">The obj.</param>
      <param name="cam">The cam.</param>
      <param name="lights">The lights.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.Material.IMaterial.Update(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.SceneControl.IWorld)">
      <summary>
            Update.
            </summary>
      <param name="gametime">The gametime.</param>
      <param name="obj">The obj.</param>        
            /// <param name="world">The world.</param></member>
    <member name="M:PloobsEngine.Material.IMaterial.CleanUp(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Cleans up.
            </summary>
    </member>
    <member name="P:PloobsEngine.Material.IMaterial.Shader">
      <summary>
            Gets or sets the shadder.
            </summary>
      <value>
            The shadder.
            </value>
    </member>
    <member name="P:PloobsEngine.Material.IMaterial.MaterialType">
      <summary>
            Gets or sets the type of the material.
            </summary>
      <value>
            The type of the material.
            </value>
    </member>
    <member name="P:PloobsEngine.Material.IMaterial.IsVisible">
      <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
      <value>
        <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PloobsEngine.Material.MaterialType">
      <summary>
            Material Type
            </summary>
    </member>
    <member name="F:PloobsEngine.Material.MaterialType.DEFERRED">
      <summary>
            When this type is set AND the render is Deferred,
            Only the Pre Draw and the Draw call are called
            </summary>
    </member>
    <member name="F:PloobsEngine.Material.MaterialType.FORWARD">
      <summary>
            When this type is set AND the render is Deferred,
            Only the Pos Draw call is called.
            </summary>
    </member>
    <member name="T:PloobsEngine.Entity.EntityMapper">
      <summary>
            Manage all entities
            Responsable for setting the ids, managing tags and RecieverEntities    
            Its a singleton
            IT USES WEAK REFERENCES !!! (Even so, YOU ARE RESPONSIBLE FOR REMOVING ENTITIES NOT USED !!!!!!!!!)
            Weak reference is just a fail safe mechanism =P
            </summary>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.getInstance">
      <summary>
            Gets the instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.AddEntity(PloobsEngine.Entity.IEntity)">
      <summary>
            Add and entity and sets its id
            </summary>
      <param name="Agente">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.getEntity(System.Int64)">
      <summary>
            Return and entity by id
            </summary>
      <param name="id">id</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.getRecieveEntity(System.Int64)">
      <summary>
            return a RecieverMessageEntity by ID
            </summary>
      <param name="id">id</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.AddgrouptagRecieveEntity(System.String,PloobsEngine.Utils.WeakReference.WeakList{PloobsEngine.MessageSystem.IRecieveMessageEntity})">
      <summary>
            Add a list of RecieverMessageEntity 
            int a tag (id the tag do not exist , create it)
            </summary>
      <param name="tag">tag</param>
      <param name="Agente">agents list</param>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.RemovegrouptagRecieveEntity(System.String,PloobsEngine.MessageSystem.IRecieveMessageEntity)">
      <summary>
            Remove one IRecieveMessageEntity from a tag
            </summary>
      <param name="tag">
      </param>
      <param name="Agente">
      </param>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.AddgrouptagRecieveEntity(System.String,PloobsEngine.MessageSystem.IRecieveMessageEntity)">
      <summary>
            Add the IrecieveMessageEntity in a tag (create the tag if doesnt exists)
            </summary>
      <param name="tag">
      </param>
      <param name="Agente">
      </param>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.GetTagRecieveEntity(System.String)">
      <summary>
            Return a list of RecieveEntities that has the parameter tag
            </summary>
      <param name="tag">tag</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.GetAllEntities">
      <summary>
            return all entities
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.GetAllRecieveEntities">
      <summary>
            return all IRecieveMessageEntity entities
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.CheckEntity(System.Int64)">
      <summary>
            Checks if entity with parameter id exists.
            </summary>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.RemoveEntity(System.Int64)">
      <summary>
            Remove the entity
            THE ID USED BY THIS ENTITY WILL NOT USED AGAIN (EVEN AFTER THE REMOVE)
            </summary>
      <param name="cod">id</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.ClearAllEntries">
      <summary>
            Clears all entries. (REMOVE ALL ENTITIES)
            RESET FUNCTION
            </summary>
    </member>
    <member name="M:PloobsEngine.Entity.EntityMapper.RemoveEntity(PloobsEngine.Entity.IEntity)">
      <summary>
            REMOVE AN ENTITY
            </summary>
      <param name="ent">
      </param>
    </member>
    <member name="T:PloobsEngine.DataStructure.SerializableDictionary`2">
      <summary>
            XML serializabe dictionary (the .net dictionary is not)
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:PloobsEngine.DataStructure.SerializableDictionary`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.DataStructure.SerializableDictionary`2" /> class.
            Serialization purpose
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.DataStructure.SerializableDictionary`2" /> class.
            </summary>
      <param name="dic">The dic.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.SerializableDictionary`2.Concate(PloobsEngine.DataStructure.SerializableDictionary{`0,`1})">
      <summary>
            Concates the specified dic.
            </summary>
      <param name="dic">The dic.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.SerializableDictionary`2.GetSchema">
      <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
      <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
    </member>
    <member name="M:PloobsEngine.DataStructure.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl.PostEffectType">
      <summary>
            Defines in what render the post effect works
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.PostEffectType.Deferred">
      <summary>
            Only on Deferred
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.PostEffectType.Forward3D">
      <summary>
            only on Forward Hidef
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.PostEffectType.Forward2D">
      <summary>
            Works in 2D Also Hidef
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.PostEffectType.WindowsPhoneAndReach">
      <summary>
            Works on WindowsPhoneAndReach (2D and 3D) 
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.PostEffectType.AllHidef">
      <summary>
            Works in both renders for PC Hidef
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.PostEffectType.All">
      <summary>
            Works in all renders (Designed to run on Phone7)
            </summary>
    </member>
    <member name="T:Bnoerj.AI.Steering.ILocalSpace">
      <summary>
            A local coordinate system for 3d space
            <para>
            Provides functionality such as transforming from local space to global
            space and vice versa.  Also regenerates a valid space from a perturbed
            "forward vector" which is the basis of abnstract vehicle turning.
            </para><para>
            These are comparable to a 4x4 homogeneous transformation matrix where the
            3x3 (R) portion is constrained to be a pure rotation (no shear or scale).
            The rows of the 3x3 R matrix are the basis vectors of the space.  They are
            all constrained to be mutually perpendicular and of unit length.  The top
            ("x") row is called "side", the middle ("y") row is called "up" and the
            bottom ("z") row is called forward.  The translation vector is called
            "position".  Finally the "homogeneous column" is always [0 0 0 1].
            </para><code>
            [ R R R  0 ]      [ Sx Sy Sz  0 ]
            [ R R R  0 ]      [ Ux Uy Uz  0 ]
            [ R R R  0 ]  -&gt;  [ Fx Fy Fz  0 ]
            [          ]      [             ]
            [ T T T  1 ]      [ Tx Ty Tz  1 ]
            </code></summary>
    </member>
    <member name="M:Bnoerj.AI.Steering.ILocalSpace.ResetLocalSpace">
      <summary>
            Resets the transform to identity.
            </summary>
    </member>
    <member name="M:Bnoerj.AI.Steering.ILocalSpace.LocalizeDirection(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Transforms a direction in global space to its equivalent in local space.
            </summary>
      <param name="globalDirection">The global space direction to transform.</param>
      <returns>The global space direction transformed to local space .</returns>
    </member>
    <member name="M:Bnoerj.AI.Steering.ILocalSpace.LocalizePosition(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Transforms a point in global space to its equivalent in local space.
            </summary>
      <param name="globalPosition">The global space position to transform.</param>
      <returns>The global space position transformed to local space.</returns>
    </member>
    <member name="M:Bnoerj.AI.Steering.ILocalSpace.GlobalizeDirection(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Transforms a direction in local space to its equivalent in global space.
            </summary>
      <param name="localDirection">The local space direction to tranform.</param>
      <returns>The local space direction transformed to global space</returns>
    </member>
    <member name="M:Bnoerj.AI.Steering.ILocalSpace.GlobalizePosition(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Transforms a point in local space to its equivalent in global space.
            </summary>
      <param name="localPosition">The local space position to tranform.</param>
      <returns>The local space position transformed to global space.</returns>
    </member>
    <member name="M:Bnoerj.AI.Steering.ILocalSpace.SetUnitSideFromForwardAndUp">
      <summary>
            Sets the "side" basis vector to normalized cross product of forward and up.
            </summary>
    </member>
    <member name="M:Bnoerj.AI.Steering.ILocalSpace.RegenerateOrthonormalBasisUF(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Regenerates the orthonormal basis vectors given a new forward.
            </summary>
      <param name="newUnitForward">The new unit-length forward.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.ILocalSpace.RegenerateOrthonormalBasis(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Regenerates the orthonormal basis vectors given a new forward.
            </summary>
      <param name="newForward">The new forward.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.ILocalSpace.RegenerateOrthonormalBasis(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Regenerates the orthonormal basis vectors given a new forward and up.
            </summary>
      <param name="newForward">The new forward.</param>
      <param name="newUp">The new up.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.ILocalSpace.LocalRotateForwardToSide(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Rotates, in the canonical direction, a vector pointing in the
            "forward" (+Z) direction to the "side" (+/-X) direction as implied
            by IsRightHanded.
            </summary>
      <param name="value">The local space vector.</param>
      <returns>The rotated vector.</returns>
    </member>
    <member name="M:Bnoerj.AI.Steering.ILocalSpace.GlobalRotateForwardToSide(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Rotates, in the canonical direction, a vector pointing in the
            "forward" (+Z) direction to the "side" (+/-X) direction as implied
            by IsRightHanded.
            </summary>
      <param name="value">The global space forward.</param>
      <returns>The rotated vector.</returns>
    </member>
    <member name="P:Bnoerj.AI.Steering.ILocalSpace.Side">
      <summary>
            Gets or sets the side.
            </summary>
    </member>
    <member name="P:Bnoerj.AI.Steering.ILocalSpace.Up">
      <summary>
            Gets or sets the up.
            </summary>
    </member>
    <member name="P:Bnoerj.AI.Steering.ILocalSpace.Forward">
      <summary>
            Gets or sets the forward.
            </summary>
    </member>
    <member name="P:Bnoerj.AI.Steering.ILocalSpace.Position">
      <summary>
            Gets or sets the position.
            </summary>
    </member>
    <member name="P:Bnoerj.AI.Steering.ILocalSpace.IsRightHanded">
      <summary>
            Indicates whether the local space is right handed.
            </summary>
    </member>
    <member name="T:Bnoerj.AI.Steering.LocalSpace">
      <summary>
            LocalSpaceMixin is a mixin layer, a class template with a paramterized base
            class.  Allows "LocalSpace-ness" to be layered on any class.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.DisplayWrappedBody">
      <summary>
            Helper class that can create shape mesh data.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.DisplayWrappedBody.NumSamples">
      <summary>
            Number of sides of spherical sampling to take when creating graphical representations.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.DisplayCapsule">
      <summary>
            Helper class that can create shape mesh data.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.DisplayCapsule.NumSides">
      <summary>
            Number of sides to build geometry with.
            </summary>
    </member>
    <member name="M:PloobsEngine.NetWorking.NetworkServerWorld.#ctor(PloobsEngine.Physics.IPhysicWorld,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.IWorld" /> class.
            </summary>
      <param name="PhysicWorld">The physic world.</param>
      <param name="multiThread">if set to <c>true</c> [mult thread].</param>
    </member>
    <member name="T:PloobsEngine.Modelo.VertexMultitextured">
      <summary>
            Vertex Struct used in the Water shader
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.VertexMultitextured.SizeInBytes">
      <summary>
            Size in bytes
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.VertexMultitextured.VertexElements">
      <summary>
            Vertex Elements
            </summary>
    </member>
    <member name="T:PloobsEngine.Modelo.BilboardInstance">
      <summary>
            Represent each billboard
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo.InstancedBilboardModel.#ctor(PloobsEngine.Engine.GraphicFactory,System.String,System.String,PloobsEngine.Modelo.BilboardInstance[])">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Modelo.InstancedBilboardModel" /> class.
            </summary>
      <param name="factory">The factory.</param>
      <param name="BilboardsName">Name of the bilboards.</param>
      <param name="diffuseTextureName">Name of the diffuse texture.</param>
      <param name="instances">The instances.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.InstancedBilboardModel.SetBilboardInstances(PloobsEngine.Modelo.BilboardInstance[])">
      <summary>
            Sets the bilboard instances.
            </summary>
      <param name="instances">The instances.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.InstancedBilboardModel.GetBilboardInstances">
      <summary>
            Gets the bilboard instances.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Modelo2D.SpriteFarseer">
      <summary>
            Specific model for farseer physics
            MOST WIDELY USED +P
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo2D.SpriteFarseer.#ctor(PloobsEngine.Engine.GraphicFactory,FarseerPhysics.Common.Vertices,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
      </summary>
      <param name="factory">
      </param>
      <param name="vertices">
      </param>
      <param name="color">
      </param>
      <param name="isInSimulationUnits">
      </param>
    </member>
    <member name="M:PloobsEngine.Modelo2D.SpriteFarseer.#ctor(PloobsEngine.Engine.GraphicFactory,FarseerPhysics.Collision.Shapes.PolygonShape,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
      </summary>
      <param name="factory">
      </param>
      <param name="shape">
      </param>
      <param name="color">
      </param>
      <param name="isInSimulationUnits">
      </param>
    </member>
    <member name="T:PloobsEngine.Features.DebugDraw.DebugShapesDrawer">
      <summary>
            Responsible for a collection of Debug primitives Draw
            </summary>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugShapesDrawer.AddShape(PloobsEngine.Features.DebugDraw.IDebugDrawShape)">
      <summary>
            Adds a shape to this drawer.
            </summary>
      <param name="shape">The shape.</param>
    </member>
    <member name="P:PloobsEngine.Features.DebugDraw.DebugShapesDrawer.DrawAllShapesEachFrame">
      <summary>
            Gets a value indicating whether [draw all shapes each frame].
            </summary>
      <value>
        <c>true</c> if [draw all shapes each frame]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PloobsEngine.IA.ConnectorType">
      <summary>
            Type of connections
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.ConnectorType.BETWEEN_COLLECTIONS_CONNECTEC">
      <summary>
            Between islands
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.ConnectorType.BETWEEN_WAYPOINTS_UNCONNECTED">
      <summary>
            Between waypoints
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.AStar">
      <summary>
            Ploobs Astar Pathfinding implementation
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.AStar.CostToCross">
      <summary>
            Delegate called to evaluate the cost to cross a determined waypoint type
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.AStar.#ctor(PloobsEngine.IA.IMap)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.IA.AStar" /> class.
            </summary>
      <param name="map">The map.</param>
    </member>
    <member name="M:PloobsEngine.IA.AStar.CostToCrossImplementation(PloobsEngine.IA.WAYPOINTTYPE)">
      <summary>
            Costs to cross implementation. (used if no delegate costtowalk is provided)
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.IA.AStar.GetPath(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Compute and return the path
            </summary>
      <param name="Start">The start.</param>
      <param name="End">The end.</param>
      <param name="iterations">The iterations.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.IA.AStar.GetPath(PloobsEngine.IA.Waypoint,PloobsEngine.IA.Waypoint,System.Single)">
      <summary>
            Compute and return the path
            </summary>
      <param name="Start">The start.</param>
      <param name="End">The end.</param>
      <param name="iterations">The iterations.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.IA.AStar.Ended">
      <summary>
            Gets a value indicating whether Astar <see cref="T:PloobsEngine.IA.AStar" /> is ended.
            </summary>
      <value>
        <c>true</c> if ended; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.IA.AStar.HeuristicEstimateValue">
      <summary>
            Gets or sets the heuristic estimate value.
            </summary>
      <value>
            The heuristic estimate value.
            </value>
    </member>
    <member name="P:PloobsEngine.IA.AStar.Map">
      <summary>
            Gets or sets the map.
            </summary>
      <value>
            The map.
            </value>
    </member>
    <member name="T:BehaviorTrees.Decorator`1">
      <summary>
            Base class for nodes which decorate other nodes with additional functionality.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:BehaviorTrees.Repeater`1">
      <summary>
            Execute decorated subnode a specified amount of times.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.Repeater`1.#ctor(System.Int32,BehaviorTrees.Node{`0})">
      <summary>
            Instantiates repeater and set amount of repeats.
            </summary>
      <param name="amount">
      </param>
      <param name="node">
      </param>
    </member>
    <member name="M:BehaviorTrees.Repeater`1.#ctor(BehaviorTrees.Node{`0})">
      <summary>
            Instantiates infinite repeater
            </summary>
      <param name="node">
      </param>
    </member>
    <member name="M:BehaviorTrees.Repeater`1.Evaluate(`0)">
      <summary>
            Creates task that will be executing decorated subnode, but will returning Running status until
            it will be executed specified amount of times.
            </summary>
      <returns>TaskResult.Success</returns>
    </member>
    <member name="T:BehaviorTrees.DecoratorTask`1">
      <summary>
            Base class for decorator tasks. These tasks create subtasks from provided nodes,
            and executes them with some other decorations.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="T:BehaviorTrees.RepeaterTask`1">
      <summary>
            Class responsible for running Repeater node.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.RepeaterTask`1.Execute(`0,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Executes decorated subnode, but return Running status until
            it will be executed specified amount of times.
            </summary>
    </member>
    <member name="T:BehaviorTrees.Deactivator`1">
      <summary>
            Doesn't execute decorated subnode, but return success.
            Useful for temporary disabling nodes.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.Deactivator`1.Evaluate(`0)">
      <summary>
            Creates a task that will deactivate subnode.
            (Executing it will be always returning success).
            </summary>
    </member>
    <member name="T:BehaviorTrees.DeactivatorTask`1">
      <summary>
            Class responsible for running deactivator task which is simple
            TaskResult.Success returning.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.DeactivatorTask`1.Execute(`0,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Doesn't execute node's task, but returns success.
            </summary>
      <returns>TaskResult.Success</returns>
    </member>
    <member name="T:PloobsEngine.Utils.VectorUtils">
      <summary>
            Lots of Vector Helpers
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.Perpendicular2DNormalized(Microsoft.Xna.Framework.Vector2)">
      <summary>
            Return the Perpendicular 2D normalized vector.
            </summary>
      <param name="vx">The base vector.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.ToVector2(Microsoft.Xna.Framework.Vector3)">
      <summary>
            transforms the 3dvector to 2d, 
            throw away the Y component
            Projects to XZ PLANE
            </summary>
      <param name="vec">The vec.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.ToVector3(Microsoft.Xna.Framework.Vector2)">
      <summary>
            Transforms a 2D vector to vector3.
            THE Y COMPONENT IS SET TO 0 -&gt; Vector3(vec.X, 0,vec.Y);
            </summary>
      <param name="vec">The vec.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.ToVector3(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>
            Creates a 3D vector -&gt; Vector3(vec.X, y, vec.Y);
            </summary>
      <param name="vec">The vec.</param>
      <param name="y">The y.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.FindAngleBetweenTwoVectors2D(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Finds the angle between two vectors2.
            </summary>
      <param name="v1">The v1.</param>
      <param name="v2">The v2.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.rotateVector2(Microsoft.Xna.Framework.Vector2,System.Double)">
      <summary>
            Rotates the vector by an arbitrary angle
            </summary>
      <param name="vector">Vector to rotate</param>
      <param name="angle">Rotation angle</param>
      <returns>
            The rotated vector
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.FindAngleBetweenTwoVectors2D(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>
            Angle between 2 vectors WITH SIGNAL
            </summary>
      <param name="v1">The v1.</param>
      <param name="v2">The v2.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.GetSignedAngleBetween2DVectors(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Find the angle between two vectors. This will not only give the angle difference, but the direction.
            For example, it may give you -1 radian, or 1 radian, depending on the direction. Angle given will be the
            angle from the FromVector to the DestVector, in radians.
            </summary>
      <param name="FromVector">Vector to start at.</param>
      <param name="DestVector">Destination vector.</param>
      <param name="DestVectorsRight">Right vector of the destination vector</param>
      <returns>
            Signed angle, in radians
            </returns>
      <remarks>
            All three vectors must lie along the same plane.
            </remarks>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.UnsignedAngleBetweenTwoV3(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Unsigneds the angle between two v3.
            </summary>
      <param name="v1">The v1.</param>
      <param name="v2">The v2.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.CalculateDeflection(Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Returns velocity of deflection
            </summary>
      <param name="CurrentVelocity">Velocity vector if item to be bounced</param>
      <param name="Elasticity">Elasticity of item to be bounced</param>
      <param name="CollisionNormal">Normal vector of plane the item is bouncing off of</param>
      <returns>
            Velocity vector of deflection
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.RotateAroundPoint(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Translates a point around an origin
            </summary>
      <param name="point">Point that is going to be translated</param>
      <param name="originPoint">Origin of rotation</param>
      <param name="rotationAxis">Axis to rotate around, this Vector should be a unit vector (normalized)</param>
      <param name="radiansToRotate">Radians to rotate</param>
      <returns>
            Translated point
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.QuaternionToEuler(Microsoft.Xna.Framework.Quaternion)">
      <summary>
            Quaternions to euler.
            </summary>
      <param name="q">The q.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.LookAt(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Calculate the rotation for one vector to face another vector
            </summary>
      <param name="position">The position.</param>
      <param name="lookat">The lookat.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.ParallelComponent(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            return component of vector parallel to a unit basis vector
            IMPORTANT NOTE: assumes "basis" has unit magnitude (length == 1)        
            Parallels the component.
            </summary>
      <param name="vector">The vector.</param>
      <param name="unitBasis">The unit basis.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.PerpendicularComponent(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            return component of vector perpendicular to a unit basis vector
            IMPORTANT NOTE: assumes "basis" has unit magnitude(length==1)
            </summary>
      <param name="vector">The vector.</param>
      <param name="unitBasis">The unit basis.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.TruncateLength(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            clamps the length of a given vector to maxLength.  If the vector is
            shorter its value is returned unaltered, if the vector is longer
            the value returned has length of maxLength and is paralle to the
            original input.
            </summary>
      <param name="vector">The vector.</param>
      <param name="maxLength">Length of the max.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.RotateAboutGlobalY(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            rotate this vector about the global Y (up) axis by the given angle
            </summary>
      <param name="vector">The vector.</param>
      <param name="angle">The angle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.RotateAboutGlobalY(Microsoft.Xna.Framework.Vector3,System.Single,System.Single@,System.Single@)">
      <summary>
            version for caching sin/cos computation
            </summary>
      <param name="vector">The vector.</param>
      <param name="angle">The angle.</param>
      <param name="sin">The sin.</param>
      <param name="cos">The cos.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.SphericalWrapAround(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Spherical WrapAround.
            if this position is outside sphere, push it back in by one diameter
            </summary>
      <param name="vector">The vector.</param>
      <param name="center">The center.</param>
      <param name="radius">The radius.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.RandomVectorOnUnitRadiusXZDisk">
      <summary>
            Returns a position randomly distributed on a disk of unit radius
            on the XZ (Y=0) plane, centered at the origin.  Orientation will be
            random and length will range between 0 and 1
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.RandomVectorInUnitRadiusSphere">
      <summary>
            Returns a position randomly distributed inside a sphere of unit radius
            centered at the origin.  Orientation will be random and length will range
            between 0 and 1
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.RandomUnitVector">
      <summary>
            Returns a position randomly distributed on the surface of a sphere
            of unit radius centered at the origin.  Orientation will be random
            and length will be 1
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.RandomUnitVectorOnXZPlane">
      <summary>
            Returns a position randomly distributed on a circle of unit radius
            on the XZ (Y=0) plane, centered at the origin.  Orientation will be
            random and length will be 1
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.LimitDeviationAngleUtility(System.Boolean,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3)">
      <summary>
            used by limitMaxDeviationAngle / limitMinDeviationAngle below
            </summary>
      <param name="insideOrOutside">if set to <c>true</c> [inside or outside].</param>
      <param name="source">The source.</param>
      <param name="cosineOfConeAngle">The cosine of cone angle.</param>
      <param name="basis">The basis.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.LimitMaxDeviationAngle(Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Enforce an upper bound on the angle by which a given arbitrary vector
            diviates from a given reference direction (specified by a unit basis
            vector).  The effect is to clip the "source" vector to be inside a cone
            defined by the basis and an angle.
            </summary>
      <param name="source">The source.</param>
      <param name="cosineOfConeAngle">The cosine of cone angle.</param>
      <param name="basis">The basis.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.LimitMinDeviationAngle(Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Enforce a lower bound on the angle by which a given arbitrary vector
            diviates from a given reference direction (specified by a unit basis
            vector).  The effect is to clip the "source" vector to be outside a cone
            defined by the basis and an angle.
            </summary>
      <param name="source">The source.</param>
      <param name="cosineOfConeAngle">The cosine of cone angle.</param>
      <param name="basis">The basis.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.DistanceFromLine(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Returns the distance between a point and a line.  The line is defined in
            terms of a point on the line ("lineOrigin") and a UNIT vector parallel to
            the line ("lineUnitTangent")
            </summary>
      <param name="point">The point.</param>
      <param name="lineOrigin">The line origin.</param>
      <param name="lineUnitTangent">The line unit tangent.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.VectorUtils.FindPerpendicularIn3d(Microsoft.Xna.Framework.Vector3)">
      <summary>
            given a vector, return a vector perpendicular to it (note that this
            arbitrarily selects one of the infinitude of perpendicular vectors)
            </summary>
      <param name="direction">The direction.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.StatisticsUtils">
      <summary>
            Statistics helper class
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.StatisticsUtils.GetAverage(System.Double[])">
      <summary>
            Get average
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.StatisticsUtils.GetVariance(System.Double[])">
      <summary>
            Get variance
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.StatisticsUtils.GetStdev(System.Double[])">
      <summary>
            Get standard deviation
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.StatisticsUtils.GetCorrelation(System.Double[],System.Double[],System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Get the correlation between X and Y
            </summary>
      <param name="x">X</param>
      <param name="y">Y</param>
      <param name="covXY">Covariance X,Y</param>
      <param name="pearson">Pearson X,Y</param>
      <param name="multiplierX">The multiplier X.</param>
      <param name="multiplierY">The multiplier Y.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl.RenderHelper">
      <summary>
            Renderer
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,PloobsEngine.Components.ComponentManager,PloobsEngine.SceneControl.IContentManager)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.RenderHelper" /> class.
            </summary>
      <param name="device">The device.</param>
      <param name="componentManager">The component manager.</param>
      <param name="cmanager">The cmanager.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderPreComponents(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Renders the pre components.
            </summary>
      <param name="gametime">The gametime.</param>
      <param name="view">The view.</param>
      <param name="projection">The projection.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderPosComponents(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Renders the pos components.
            </summary>
      <param name="gametime">The gametime.</param>
      <param name="view">The view.</param>
      <param name="projection">The projection.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderPosWithDepthComponents(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Renders the pos with depth components.
            </summary>
      <param name="gametime">The gametime.</param>
      <param name="view">The view.</param>
      <param name="projection">The projection.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PushRasterizerState(Microsoft.Xna.Framework.Graphics.RasterizerState)">
      <summary>
            Pushes the state of the rasterizer.
            </summary>
      <param name="state">The state.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PeekRasterizerState">
      <summary>
            Peeks the state of the rasterizer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PopRasterizerState">
      <summary>
            Pops the state of the rasterizer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PushBlendState(Microsoft.Xna.Framework.Graphics.BlendState)">
      <summary>
            Pushes one blendstate.
            </summary>
      <param name="state">The state.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PeekBlendState">
      <summary>
            Peeks the blendstate..
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PopBlendState">
      <summary>
            Pops one blendstate.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.SetSamplerState(Microsoft.Xna.Framework.Graphics.SamplerState,System.Int32)">
      <summary>
            Sets the state of the sampler.
            </summary>
      <param name="SamplerState">State of the sampler.</param>
      <param name="index">The index.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.SetVertexSamplerStates(Microsoft.Xna.Framework.Graphics.SamplerState,System.Int32)">
      <summary>
            Sets the vertex sampler states.
            </summary>
      <param name="SamplerState">State of the sampler.</param>
      <param name="index">The index.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.GetSamplerState(System.Int32)">
      <summary>
            Gets the state of the sampler.
            </summary>
      <param name="index">The index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PushDepthStencilState(Microsoft.Xna.Framework.Graphics.DepthStencilState)">
      <summary>
            Pushes the DepthState.
            </summary>
      <param name="state">The state.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PeekDepthState">
      <summary>
            Peeks the DepthState.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PopDepthStencilState">
      <summary>
            Pops the DepthState.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PushRenderTargetBinding(Microsoft.Xna.Framework.Graphics.RenderTargetBinding[])">
      <summary>
            Pushed a Render Target Bindings
            </summary>
      <param name="binding">
      </param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PushRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D[])">
      <summary>
            Pushes the render target.
            </summary>
      <param name="renderTarget">The render target.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PopRenderTarget">
      <summary>
            Pops the render target.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.PopRenderTargetAsSingleRenderTarget2D">
      <summary>
            Pops the render target.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.SetViewPort(Microsoft.Xna.Framework.Graphics.Viewport)">
      <summary>
            Sets the view port.
            </summary>
      <param name="viewPort">The view port.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.GetViewPort">
      <summary>
            Gets the view port.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.Clear(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.ClearOptions,System.Single,System.Int32)">
      <summary>
            Clears actual target.
            </summary>
      <param name="color">The color.</param>
      <param name="options">The options.</param>
      <param name="depth">The depth.</param>
      <param name="stencil">The stencil.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderBatch(PloobsEngine.Modelo.BatchInformation,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Renders the batch.
            </summary>
      <param name="bi">The BatchInformation</param>
      <param name="effect">The effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderUserPrimitive``1(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32)">
      <summary>
            Renders user primitive.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="effect">The effect.</param>
      <param name="PrimitiveType">Type of the primitive.</param>
      <param name="verts">The verts.</param>
      <param name="vertexOffset">The vertex offset.</param>
      <param name="primitiveCount">The primitive count.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderUserPrimitive``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32)">
      <summary>
            Renders the user primitive.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="PrimitiveType">Type of the primitive.</param>
      <param name="verts">The verts.</param>
      <param name="vertexOffset">The vertex offset.</param>
      <param name="primitiveCount">The primitive count.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderUserIndexedPrimitive``1(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int16[],System.Int32,System.Int32)">
      <summary>
            Renders user indexed primitive. 16 bits indices
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="effect">The effect.</param>
      <param name="PrimitiveType">Type of the primitive.</param>
      <param name="verts">The verts.</param>
      <param name="vertexOffset">The vertex offset.</param>
      <param name="vertesCount">The vertes count.</param>
      <param name="indices">The indices.</param>
      <param name="indexOffset">The index offset.</param>
      <param name="primitiveCount">The primitive count.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderUserIndexedPrimitive``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int16[],System.Int32,System.Int32)">
      <summary>
            Renders the user indexed primitive.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="PrimitiveType">Type of the primitive.</param>
      <param name="verts">The verts.</param>
      <param name="vertexOffset">The vertex offset.</param>
      <param name="vertesCount">The vertes count.</param>
      <param name="indices">The indices.</param>
      <param name="indexOffset">The index offset.</param>
      <param name="primitiveCount">The primitive count.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderUserIndexedPrimitive``1(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
      <summary>
            Renders user indexed primitive. 32 bits indices
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="effect">The effect.</param>
      <param name="PrimitiveType">Type of the primitive.</param>
      <param name="verts">The verts.</param>
      <param name="vertexOffset">The vertex offset.</param>
      <param name="vertesCount">The vertes count.</param>
      <param name="indices">The indices.</param>
      <param name="indexOffset">The index offset.</param>
      <param name="primitiveCount">The primitive count.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderUserIndexedPrimitive``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
      <summary>
            Renders the user indexed primitive.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="PrimitiveType">Type of the primitive.</param>
      <param name="verts">The verts.</param>
      <param name="vertexOffset">The vertex offset.</param>
      <param name="vertesCount">The vertes count.</param>
      <param name="indices">The indices.</param>
      <param name="indexOffset">The index offset.</param>
      <param name="primitiveCount">The primitive count.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderBatch(PloobsEngine.Modelo.BatchInformation)">
      <summary>
            Renders the batch.
            </summary>
      <param name="bi">The BatchInformation .</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderTextComplete(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Boolean,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Renders the text complete. (THIS FUNCTION ALREADY CALLS BEGIN AND END)
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="transform">The transform.</param>
      <param name="font">The font.</param>
      <param name="resyncState">if set to <c>true</c> [resync state].</param>
      <param name="SpriteSortMode">The sprite sort mode.</param>
      <param name="samplerState">State of the sampler.</param>
      <param name="blenderState">State of the blender.</param>
      <param name="rasterizerState">State of the rasterizer.</param>
      <param name="depthState">State of the depth.</param>
      <param name="effect">The effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderText(System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>
            Renders the texture.
            CALL THIS ONLY AFTER RenderBegin
            AFTER DRAWING ALL THE TEXTURES CALL RenderEnd
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="scale">The scale.</param>
      <param name="color">The color.</param>
      <param name="font">The font.</param>
      <param name="rotation">The rotation.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderText(System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>
            Renders the text.
            </summary>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="scale">The scale.</param>
      <param name="color">The color.</param>
      <param name="font">The font.</param>
      <param name="rotation">The rotation.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderBegin(Microsoft.Xna.Framework.Matrix,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Begin render Texture.
            DO NOT USE THIS WITH RenderTextureComplete (RenderTextureComplete does all the job inside)
            </summary>
      <param name="transform">The transform.</param>
      <param name="source">The source.</param>
      <param name="SpriteSortMode">The sprite sort mode.</param>
      <param name="samplerState">State of the sampler.</param>
      <param name="blenderState">State of the blender.</param>
      <param name="rasterizerState">State of the rasterizer.</param>
      <param name="depthState">State of the depth.</param>
      <param name="effect">The effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
      <summary>
            Renders the texture.
            CALL THIS ONLY AFTER RenderBegin
            AFTER DRAWING ALL THE TEXTURES CALL RenderEnd
            </summary>
      <param name="texture">The texture.</param>
      <param name="color">The color.</param>
      <param name="destination">The destination.</param>
      <param name="source">The source.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>
            Renders the texture.
            CALL THIS ONLY AFTER RenderBegin
            AFTER DRAWING ALL THE TEXTURES CALL RenderEnd
            </summary>
      <param name="texture">The texture.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="SpriteEffects">The sprite effects.</param>
      <param name="layerdepth">The layerdepth.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>
            Renders the texture.
            CALL THIS ONLY AFTER RenderBegin
            AFTER DRAWING ALL THE TEXTURES CALL RenderEnd
            </summary>
      <param name="texture">The texture.</param>
      <param name="position">The position.</param>
      <param name="sourceRectangle">The source rectangle.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="SpriteEffects">The sprite effects.</param>
      <param name="layerdepth">The layerdepth.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderEnd(System.Boolean)">
      <summary>
            End Rendering the texture
            ONLY USE THIS if you call RenderBegin BEFORE
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderTextureComplete(Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean)">
      <summary>
            Renders the texture (Begin, Texture,End).
            </summary>
      <param name="texture">The texture.</param>
      <param name="resyncState">if set to <c>true</c> [resync state].</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderTextureComplete(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Matrix,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Boolean,Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Renders the texture (Begin, render , End)
            </summary>
      <param name="texture">The texture.</param>
      <param name="color">The color.</param>
      <param name="destination">The destination.</param>
      <param name="transform">The transform.</param>
      <param name="source">The source.</param>
      <param name="resyncState">if set to <c>true</c> [resync state].</param>
      <param name="SpriteSortMode">The sprite sort mode.</param>
      <param name="samplerState">State of the sampler.</param>
      <param name="blenderState">State of the blender.</param>
      <param name="rasterizerState">State of the rasterizer.</param>
      <param name="depthState">State of the depth.</param>
      <param name="effect">The effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.ResyncStates">
      <summary>
            Resyncs the Device States
            THIS IS BECAUSE THE SPRITEBATCH KILLS THE RENDER STATES, NO SAVE STATE. XNA DOCUMENTATION FAILS !!!!
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderTextureToFullScreenSpriteBatch(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.BlendState,System.Boolean)">
      <summary>
            Renders the texture to full screen using sprite batch.
            </summary>
      <param name="scene">The scene.</param>
      <param name="effect">The effect.</param>
      <param name="rectangle">The rectangle.</param>
      <param name="samplerState">State of the sampler.</param>
      <param name="blenderState">State of the blender.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderTextureToFullScreenSpriteBatch(System.String,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.BlendState,System.Boolean)">
      <summary>
            Renders the texture to full screen using sprite batch.
            </summary>
      <param name="texture">The texture name (already in this class).</param>
      <param name="effect">The effect.</param>
      <param name="samplerState">State of the sampler.</param>
      <param name="blenderState">State of the blender.</param>
      <param name="sync">if set to <c>true</c> [sync].</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.RenderHelper.RenderSceneWithBasicMaterial(PloobsEngine.SceneControl.IWorld,Microsoft.Xna.Framework.GameTime,System.Collections.Generic.List{PloobsEngine.SceneControl.IObject},Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,System.Boolean,System.Boolean)">
      <summary>
            Renders the scene without material.
            Uses XNA Basic Effect
            </summary>
      <param name="world">The world.</param>
      <param name="gt">The gt.</param>
      <param name="objListException">The obj list exception.(objects in this list wont be rendered) - can be null</param>
      <param name="view">The view.</param>
      <param name="projection">The projection.</param>
      <param name="drawComponentsPreDraw">if set to <c>true</c> [draw components with pre draw setting also].</param>
      <param name="useCuller">if set to <c>true</c> [use culler].</param>
    </member>
    <member name="P:PloobsEngine.SceneControl.RenderHelper.Item(System.String)">
      <summary>
            Gets or sets a scene with the specified name.
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.OnDrawingSceneCustomMaterial">
      <summary>
            OnDrawingScene with CustomMaterial
            </summary>
      <param name="effect">The effect.</param>
      <param name="obj">The obj.</param>
      <param name="bi">The bi.</param>
      <param name="ti">The ti.</param>
      <param name="view">The view.</param>
      <param name="projection">The projection.</param>
      <param name="vp">The vp.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl.IObjectAttachment">
      <summary>    
            You can bind one IObjectAtachtment to one IObject
            The IObjectAtachtment method Update will be called everytime 
            the method Update of the object is called
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IObjectAttachment.Update(PloobsEngine.SceneControl.IObject,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates the atachment.
            </summary>
      <param name="obj">The obj.</param>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.Input.SimpleConcreteKeyboardInputPlayable.#ctor(PloobsEngine.Input.StateKey,Microsoft.Xna.Framework.Input.Keys,PloobsEngine.Input.KeyStateChange,PloobsEngine.Input.InputMask,PloobsEngine.Input.EntityType)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Input.SimpleConcreteKeyboardInputPlayable" /> class.
            
            </summary>
      <param name="state">The state.</param>
      <param name="key">The key.</param>
      <param name="callback">The callback.</param>
      <param name="mask">The mask.</param>
      <param name="type">The type.</param>
    </member>
    <member name="M:PloobsEngine.Input.SimpleConcreteKeyboardInputPlayable.#ctor(PloobsEngine.Input.StateKey,Microsoft.Xna.Framework.Input.Keys[],PloobsEngine.Input.KeyStateChange,PloobsEngine.Input.InputMask,PloobsEngine.Input.EntityType)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Input.SimpleConcreteKeyboardInputPlayable" /> class.
            For Combo
            </summary>
      <param name="state">The state.</param>
      <param name="key">The key.</param>
      <param name="callback">The callback.</param>
      <param name="mask">The mask.</param>
      <param name="type">The type.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.RenderTechnich2D">
      <summary>
            Render technic for 2D specification
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl._2DScene.RenderTechnich2D.PostEffects">
      <summary>
            List off all PostEffects
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.RenderTechnich2D.#ctor(PloobsEngine.SceneControl.PostEffectType)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl._2DScene.RenderTechnich2D" /> class.
            </summary>
      <param name="PostEffectType">Type of the post effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.RenderTechnich2D.AddPostEffect(PloobsEngine.SceneControl.IPostEffect)">
      <summary>
            Adds one post effect.
            </summary>
      <param name="postEffect">The post effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.RenderTechnich2D.RemovePostEffect(PloobsEngine.SceneControl.IPostEffect)">
      <summary>
            Removes one post effect.
            </summary>
      <param name="postEffect">The post effect.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.RenderTechnich2D.ContainsPostEffect(PloobsEngine.SceneControl.IPostEffect)">
      <summary>
            Determines whether [contains post effect] [the specified post effect].
            </summary>
      <param name="postEffect">The post effect.</param>
      <returns>
        <c>true</c> if [contains post effect] [the specified post effect]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.RenderTechnich2D.BeforeFirstExecution(PloobsEngine.SceneControl.RenderHelper,PloobsEngine.SceneControl._2DScene.I2DWorld)">
      <summary>
            Befores the first execution.
            </summary>
      <param name="render">The render.</param>
      <param name="world">The world.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.RenderTechnich2D.ExecuteTechnic(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.SceneControl._2DScene.I2DWorld)">
      <summary>
            Executes the technic.
            </summary>
      <param name="gameTime">The game time.</param>
      <param name="render">The render.</param>
      <param name="world">The world.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.RenderTechnich2D.AfterLoadContent(PloobsEngine.SceneControl.IContentManager,PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Called after the All the Engine stuffs are loaded
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.RenderTechnich2D.TechnicName">
      <summary>
            Gets the name of the technic.
            </summary>
      <value>
            The name of the technic.
            </value>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.Basic2DRenderTechnich">
      <summary>
            2D render technic
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl._2DScene.Basic2DRenderTechnich.UsePreDrawPhase">
      <summary>
            Default false
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl._2DScene.Basic2DRenderTechnich.UseDrawComponents">
      <summary>
            Default false
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl._2DScene.Basic2DRenderTechnich.ambientColor">
      <summary>
            Default
            Color.FromNonPremultiplied(10, 10, 10, 255)
            WHEN NOT USING LIGHTS, this is the background color
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl._2DScene.Basic2DRenderTechnich.UsePostProcessing">
      <summary>
            Default false
            </summary>
    </member>
    <member name="T:PloobsEngine.Physic2D.Farseer.ConvertUnits">
      <summary>
            Convert units between display and simulation units.
            </summary>
    </member>
    <member name="T:Bnoerj.AI.Steering.PolylinePathway">
      <summary>
            PolylinePathway: a simple implementation of the Pathway protocol.  The path
            is a "polyline" a series of line segments between specified points.  A
            radius defines a volume for the path which is the union of a sphere at each
            point and a cylinder along each segment.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject">
      <summary>
            Instanced Triangle Mesh
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.#ctor(BEPUphysics.CollisionShapes.InstancedMeshShape,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3,PloobsEngine.Physics.MaterialDescription,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness)">
      <summary>
            Creates and instance of InstancedTriangleMesh
            Call the Static Method GetInstacedMesh to get the InstancedMeshShape obj
            </summary>
      <param name="InstancedMeshShape">
      </param>
      <param name="pos">
      </param>
      <param name="rotation">
      </param>
      <param name="scale">
      </param>
      <param name="materialDescription">
      </param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.GetInstacedMesh(PloobsEngine.Modelo.IModelo)">
      <summary>
            Return the Instanced MEsh shape from a IModelo
            </summary>
      <param name="model">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.ApplyImpulse(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Cant Aply Impulse on Static Object
            </summary>
      <param name="position">
      </param>
      <param name="force">The force.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serialization
            </summary>
      <param name="info">The info.</param>
      <param name="context">The context.</param>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.PhysicObjectTypes">
      <summary>
            Gets the physic object type.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.Position">
      <summary>
            Gets or sets the position.
            </summary>
      <value>
            The position.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.Scale">
      <summary>
            Gets or sets the scale.
            </summary>
      <value>
            The scale.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.Rotation">
      <summary>
            Gets or sets the rotation.
            </summary>
      <value>
            The rotation.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.FaceVector">
      <summary>
            Vector pointing to the front
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.WorldMatrix">
      <summary>
            Gets the world matrix.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.AngularVelocity">
      <summary>
            Gets or sets the angular velocity.
            </summary>
      <value>
            The angular velocity.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.Velocity">
      <summary>
            Gets velocity. Always Zero cause this object is static
            </summary>
      <value>
            The velocity.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.isMotionLess">
      <summary>
            This object is always motion less
            </summary>
      <value>
        <c>true</c> if this instance is motion less; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.ObjectOwner">
      <summary>
            Gets or sets the IObject owner.
            </summary>
      <value>
            The IObject owner.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.InstancedTriangleMeshObject.BoundingBox">
      <summary>
            Gets the bounding box IN WORLD COORDINATES
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint">
      <summary>
            Manages the horizontal movement of a character.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.#ctor(BEPUphysicsDemos.AlternateMovement.Character.CharacterController)">
      <summary>
            Constructs a new horizontal motion constraint.
            </summary>
      <param name="characterController">Character to be governed by this constraint.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.Update(System.Single)">
      <summary>
            Computes per-frame information necessary for the constraint.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.ExclusiveUpdate">
      <summary>
            Performs any per-frame initialization needed by the constraint that must be done with exclusive access
            to the connected objects.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.SolveIteration">
      <summary>
            Computes a solution to the constraint.
            </summary>
      <returns>Impulse magnitude computed by the iteration.</returns>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.SupportData">
      <summary>
            Gets or sets the support data used by the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.MovementDirection">
      <summary>
            Gets or sets the goal movement direction.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.Speed">
      <summary>
            Gets or sets the maximum speed at which the character can move while standing with a support that provides traction.
            Relative velocities with a greater magnitude will be decelerated.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.CrouchingSpeed">
      <summary>
            Gets or sets the maximum speed at which the character can move while crouching with a support that provides traction.
            Relative velocities with a greater magnitude will be decelerated.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.SlidingSpeed">
      <summary>
            Gets or sets the maximum speed at which the character can move while on a support that does not provide traction.
            Relative velocities with a greater magnitude will be decelerated.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.AirSpeed">
      <summary>
            Gets or sets the maximum speed at which the character can move with no support.
            The character will not be decelerated while airborne.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.MaximumForce">
      <summary>
            Gets or sets the maximum force that the character can apply while on a support which provides traction.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.MaximumSlidingForce">
      <summary>
            Gets or sets the maximum force that the character can apply while on a support which does not provide traction.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.MaximumAirForce">
      <summary>
            Gets or sets the maximum force that the character can apply with no support.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.SupportForceFactor">
      <summary>
            Gets or sets the scaling factor of forces applied to the supporting object if it is a dynamic entity.
            Low values (below 1) reduce the amount of motion imparted to the support object; it acts 'heavier' as far as horizontal motion is concerned.
            High values (above 1) increase the force applied to support objects, making them appear lighter.
            Be careful when changing this- it can create impossible situations! Imagine the character standing on a compound object.  If the support force
            factor is less than 1, then the character can push the compound around while standing on it!
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.MovementMode">
      <summary>
            Gets the movement mode that the character is currently in.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.RelativeVelocity">
      <summary>
            Gets the current velocity between the character and its support in constraint space.
            The X component corresponds to velocity along the movement direction.
            The Y component corresponds to velocity perpendicular to the movement direction and support normal.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.HorizontalMotionConstraint.RelativeWorldVelocity">
      <summary>
            Gets the current velocity between the character and its support.
            </summary>
    </member>
    <member name="F:PloobsEngine.NetWorking.NetWorkServerObject.CreateLoadObjectOrder">
      <summary>
            Create a Remote Create Object Message
            </summary>
    </member>
    <member name="F:PloobsEngine.NetWorking.NetWorkServerObject.CreateRedistributeOrder">
      <summary>
            Create the create object redistribution message
            </summary>
    </member>
    <member name="T:PloobsEngine.Engine.AssetStatus">
      <summary>
            Describes the load status of an asset
            </summary>
    </member>
    <member name="T:PloobsEngine.Engine.AssetTracker">
      <summary>
            Tracks individual asset information
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.AssetTracker.AssetName">
      <summary>
            Name of the asset.
            Used as the key to look up this AssetTracker
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.AssetTracker.Asset">
      <summary>
            The actual asset
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.AssetTracker.Disposables">
      <summary>
            Disposables owned by this asset
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.AssetTracker.RefCount">
      <summary>
            Asset's reference count.
            Asset will be unloaded when this reaches zero
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.AssetTracker.Status">
      <summary>
            Asset's current load status.
            Can be used to check when threaded loading completes
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.AssetTracker.RefersTo">
      <summary>
            Assets that we reference (children)
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.AssetTracker.ReferredToBy">
      <summary>
            Assets that reference us (parents)
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.AssetTracker.AssetChanged">
      <summary>
            Callback invoked when this asset is reloaded or unloaded
            </summary>
    </member>
    <member name="M:PloobsEngine.Engine.AssetTracker.OnAssetChanged(System.Object)">
      <summary>
            Helper for invoking AssetChanged. 
            Marked as internal because it's invoked by ContentTracker. 
            </summary>
    </member>
    <member name="T:PloobsEngine.Cameras.CameraFirstPerson">
      <summary>
            First Person Camera
            To be used in Ploobs Demos and in Debug Mode.
            It is not a camera to be used in Production Environment
            </summary>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraFirstPerson.#ctor(PloobsEngine.Engine.GraphicInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Cameras.CameraFirstPerson" /> class.
            </summary>
      <param name="graphicInfo">The graphic info.</param>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraFirstPerson.#ctor(System.Boolean,PloobsEngine.Engine.GraphicInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Cameras.CameraFirstPerson" /> class.
            </summary>
      <param name="useMouse">if set to <c>true</c> [use mouse].</param>
      <param name="graphicInfo">The graphic info.</param>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraFirstPerson.#ctor(System.Boolean,Microsoft.Xna.Framework.Vector3,PloobsEngine.Engine.GraphicInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Cameras.CameraFirstPerson" /> class.
            </summary>
      <param name="useMouse">if set to <c>true</c> [use mouse].</param>
      <param name="position">The position.</param>
      <param name="graphicInfo">The graphic info.</param>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraFirstPerson.EnableMouse(System.Boolean)">
      <summary>
            Enables the mouse control.
            </summary>
      <param name="status">if set to <c>true</c> [status].</param>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraFirstPerson.#ctor(System.Single,System.Single,Microsoft.Xna.Framework.Vector3,PloobsEngine.Engine.GraphicInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Cameras.CameraFirstPerson" /> class.
            </summary>
      <param name="lrRot">The leftright rotation.</param>
      <param name="udRot">The updown rotation.</param>
      <param name="startingPos">The starting pos.</param>
      <param name="graphicInfo">The graphic info.</param>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraFirstPerson.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates .
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="P:PloobsEngine.Cameras.CameraFirstPerson.View">
      <summary>
            Gets the view.
            </summary>
    </member>
    <member name="P:PloobsEngine.Cameras.CameraFirstPerson.Projection">
      <summary>
            Gets the projection.
            </summary>
    </member>
    <member name="P:PloobsEngine.Cameras.CameraFirstPerson.BoundingFrustum">
      <summary>
            Gets the bounding frustum.
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.Genetic.Genome">
      <summary>
            Summary description for Genome.
            </summary>
    </member>
    <member name="T:BehaviorTrees.ForceFailure`1">
      <summary>
            Executing this node will always fails no matter what are the
            results of the decorated node execution.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.ForceFailure`1.Evaluate(`0)">
      <summary>
            Creates task that will execute the subnode but will always return failure.
            </summary>
    </member>
    <member name="T:BehaviorTrees.ForceFailureTask`1">
      <summary>
            Task responsible for executing ForceFailure node.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.ForceFailureTask`1.Execute(`0,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Executes decorated node's task, but forces returning failure.
            </summary>
      <returns>TaskResult.Failure</returns>
    </member>
    <member name="T:PloobsEngine.SceneControl.Octree`1">
      <summary>
            Represents an octree spatial partioning system.
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.Octree`1.ChildCount">
      <summary>
            The number of children in an octree.
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.Octree`1.looseness">
      <summary>
            The octree's looseness value.
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.Octree`1.depth">
      <summary>
            The octree's depth.
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.Octree`1.center">
      <summary>
            The octree's center coordinates.
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.Octree`1.length">
      <summary>
            The octree's length.
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.Octree`1.bounds">
      <summary>
            The bounding box that represents the octree.
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.Octree`1.objects">
      <summary>
            The objects in the octree.
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.Octree`1.children">
      <summary>
            The octree's child nodes.
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.Octree`1.worldSize">
      <summary>
            The octree's world size.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.Octree`1.#ctor(System.Single,System.Single,System.Int32)">
      <summary>
            Creates a new octree.
            </summary>
      <param name="worldSize">The octree's world size.</param>
      <param name="looseness">The octree's looseness value.</param>
      <param name="depth">The octree recursion depth.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.Octree`1.#ctor(System.Single,System.Single,System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Creates a new octree.
            </summary>
      <param name="worldSize">The octree's world size.</param>
      <param name="looseness">The octree's looseness value.</param>
      <param name="maxDepth">The maximum depth to recurse to.</param>
      <param name="depth">The octree recursion depth.</param>
      <param name="center">The octree's center coordinates.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.Octree`1.Remove(`0)">
      <summary>
            Removes the specified obj.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.Octree`1.HasChanged(`0,Microsoft.Xna.Framework.BoundingBox)">
      <summary>
            Determines whether the specified obj has changed.
            </summary>
      <param name="obj">The obj.</param>
      <param name="transformebbox">The transformebbox.</param>
      <returns>
        <c>true</c> if the specified obj has changed; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.Octree`1.StillInside(`0,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Stills inside ?
            </summary>
      <param name="o">The o.</param>
      <param name="center">The center.</param>
      <param name="radius">The radius.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.Octree`1.Add(`0,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Adds the given object to the octree.
            </summary>
      <param name="o">The object to add.</param>
      <param name="center">The object's center coordinates.</param>
      <param name="radius">The object's radius.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.Octree`1.Add(`0,Microsoft.Xna.Framework.BoundingBox)">
      <summary>
            Adds the given object to the octree.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.Octree`1.Add(`0,Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Adds the given object to the octree.
            </summary>
      <param name="o">The object to add.</param>
      <param name="bounds">The object's bounds.</param>
      <param name="center">The object's center coordinates.</param>
      <param name="radius">The object's radius.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.Octree`1.Draw(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Collections.Generic.List{`0})">
      <summary>
            Draws the octree.
            </summary>
      <param name="view">The viewing matrix.</param>
      <param name="projection">The projection matrix.</param>
      <param name="objects">The objects in the octree.</param>
      <returns>The number of octrees drawn.</returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.Octree`1.Draw(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.ContainmentType,System.Collections.Generic.List{`0})">
      <summary>
            Draws the octree.
            </summary>
      <param name="frustum">The viewing frustum used to determine if the octree is in view.</param>
      <param name="view">The viewing matrix.</param>
      <param name="projection">The projection matrix.</param>
      <param name="containment">Determines how much of the octree is visible.</param>
      <param name="objects">The objects in the octree.</param>
      <returns>The number of octrees drawn.</returns>
    </member>
    <member name="M:PloobsEngine.SceneControl.Octree`1.Split(System.Int32)">
      <summary>
            Splits the octree into eight children.
            </summary>
      <param name="maxDepth">The maximum depth to recurse to.</param>
    </member>
    <member name="P:PloobsEngine.SceneControl.Octree`1.DebugDraw">
      <summary>
            Gets or sets the debug draw.
            </summary>
      <value>
            The debug draw.
            </value>
    </member>
    <member name="T:PloobsEngine.Modelo.SimpleModel">
      <summary>
            Implementation of the most simple Model in the engine
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo.SimpleModel.#ctor(PloobsEngine.Engine.GraphicFactory,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Modelo.SimpleModel" /> class.
            </summary>
      <param name="factory">The graphic factory.</param>
      <param name="modelName">Name of the model.</param>
      <param name="diffuseTextureName">Name of the diffuse texture.</param>
      <param name="bumpTextureName">Name of the bump texture.</param>
      <param name="specularTextureName">Name of the specular texture.</param>
      <param name="glowTextureName">Name of the glow texture.</param>
    </member>
    <member name="T:PloobsEngine.Engine.UnhandledException">
      <summary>
            Delegate Called when a unhandle exception is found in the engine
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.UnhandledExceptionEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:PloobsEngine.Engine.OnExit">
      <summary>
            Delegate Called when the engine exits
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="T:PloobsEngine.Engine.LoadScreen">
      <summary>
            Delegate resposible to load the first screen
            </summary>
      <param name="ScreenManager">The screen manager.</param>
    </member>
    <member name="T:PloobsEngine.Engine.InitialEngineDescription">
      <summary>
            InitialEngineDescription
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.UseAnisotropicFiltering">
      <summary>
            Use Anisotropic Filtering when possible
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.ScreenName">
      <summary>
            Screen Name
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.UseVerticalSyncronization">
      <summary>
            use V-Sync
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.BackBufferHeight">
      <summary>
            BackBufferHeight 
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.BackBufferWidth">
      <summary>
            BackBufferWidth
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.Logger">
      <summary>
            Logger implementation, can be null for no logging
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.isMultiSampling">
      <summary>
            Use Multisampling ?
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.useMipMapWhenPossible">
      <summary>
            Use MipMap When creating the Render Targets
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.GraphicsProfile">
      <summary>        
                 Identifies the set of supported devices for the game based on device capabilities.
            
             Parameters:
               HiDef:
                 Use the largest available set of graphic features and capabilities to target
                 devices, such as an Xbox 360 console and a Windows-based computer, that have
                 more enhanced graphic capabilities.
            
               Reach:
                 Use a limited set of graphic features and capabilities, allowing the game
                 to support the widest variety of devices, including all Windows-based computers
                 and Windows Phone.
             </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.isFullScreen">
      <summary>
            FullScreen Mode ?
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.isFixedGameTime">
      <summary>
            If the engine should force 60 fps
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.UnhandledException_Handler">
      <summary>
            Handler for unexpected error
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.InitialEngineDescription.OnExit">
      <summary>
            handler Called when engine exit
            </summary>
    </member>
    <member name="M:PloobsEngine.Engine.InitialEngineDescription.Default">
      <summary>
            Defaults this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.InitialEngineDescription.#ctor(System.String,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.GraphicsProfile,System.Boolean,System.Boolean,System.Boolean,PloobsEngine.Engine.Logger.ILogger,System.Boolean,System.Boolean,Microsoft.Xna.Framework.DisplayOrientation)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Engine.InitialEngineDescription" /> struct.
            </summary>
      <param name="ScreenName">Name of the screen.</param>
      <param name="BackBufferWidth">Width of the back buffer.</param>
      <param name="BackBufferHeight">Height of the back buffer.</param>
      <param name="isFullScreen">if set to <c>true</c> [is full screen].</param>
      <param name="graphicsProfile">The graphics profile.</param>
      <param name="useVerticalSyncronization">if set to <c>true</c> [use vertical syncronization].</param>
      <param name="isMultiSampling">if set to <c>true</c> [is multi sampling].</param>
      <param name="isFixedGameTime">if set to <c>true</c> [is fixed game time].</param>
      <param name="logger">The logger.</param>
      <param name="useMipMapWhenPossible">if set to <c>true</c> [use mip map when possible].</param>
      <param name="UseAnisotropicFiltering">if set to <c>true</c> [use anisotropic filtering].</param>
      <param name="supportedOrientation">The supported orientation.</param>
    </member>
    <member name="T:PloobsEngine.Engine.SoundMasterOptionDescription">
      <summary>
            Sound Options Desciption
            </summary>
    </member>
    <member name="T:PloobsEngine.Engine.EngineStuff">
      <summary>
            Engine Entry point
            </summary>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.#ctor(PloobsEngine.Engine.InitialEngineDescription@,PloobsEngine.Engine.LoadScreen)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Engine.EngineStuff" /> class.
            </summary>
      <param name="initialDescription">The initial description.</param>
      <param name="LoadScreen">The load screen function.</param>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.GetEngineDescription">
      <summary>
            Gets the engine description.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.ApplyEngineDescription(PloobsEngine.Engine.InitialEngineDescription@)">
      <summary>
            Applies the engine description.
            </summary>
      <param name="initialDescription">The initial description.</param>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.GetSoundMasterOptionDescription">
      <summary>
            Gets the sound master option description.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.SetSoundMasterOptionDescription(PloobsEngine.Engine.SoundMasterOptionDescription@)">
      <summary>
            Sets the sound master option description.
            </summary>
      <param name="soundMasterOptionDescription">The sound master option description.</param>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.LoadContent">
      <summary>
            Load the content
            </summary>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.AddComponent(PloobsEngine.Components.IComponent)">
      <summary>
            Adds the component.
            </summary>
      <param name="component">The component.</param>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.RemoveComponent(System.String)">
      <summary>
            Removes the component by name
            </summary>
      <param name="componentName">Name of the component.</param>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.GetComponent``1(System.String)">
      <summary>
            Gets the component by name.
            </summary>
      <typeparam name="T">Component type</typeparam>
      <param name="componentName">Name of the component.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.HasComponent(System.String)">
      <summary>
            Determines whether the specified component name exist.
            </summary>
      <param name="componentName">Name of the component.</param>
      <returns>
        <c>true</c> if the specified component name has component; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.ShowMissingRequirementMessage(System.Exception)">
      <summary>
            This is used to display an error message if there is no suitable graphics device or sound card.
            </summary>
      <param name="exception">The exception to display.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates the engine, called by XNA
            </summary>
      <param name="gameTime">Time passed since the last call to Update.</param>
    </member>
    <member name="M:PloobsEngine.Engine.EngineStuff.Draw(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Reference page contains code sample.
            </summary>
      <param name="gameTime">Time passed since the last call to Draw.</param>
    </member>
    <member name="P:PloobsEngine.Engine.EngineStuff.ContentManager">
      <summary>
            Gets or sets the content manager.
            </summary>
      <value>
            The content manager.
            </value>
    </member>
    <member name="T:PloobsEngine.SceneControl.IDeferredFinalCombination">
      <summary>
            Deferred final combination specification
            This is the stage number 3, where the light map and the gbuffer are combined
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredFinalCombination.SetFinalCombination(PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Sets the final combination.
            </summary>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredFinalCombination.DrawScene(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IWorld,PloobsEngine.SceneControl.IDeferredGBuffer,PloobsEngine.SceneControl.IDeferredLightMap,PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Draws the pass.
            </summary>
      <param name="gameTime">The game time.</param>
      <param name="world">The world.</param>
      <param name="gbuffer">The gbuffer.</param>
      <param name="lightmap">The lightmap.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredFinalCombination.LoadContent(PloobsEngine.SceneControl.IContentManager,PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,System.Boolean,System.Boolean)">
      <summary>
            Loads the content.
            </summary>
      <param name="manager">The manager.</param>
      <param name="ginfo">The ginfo.</param>
      <param name="factory">The factory.</param>
      <param name="useFloatBuffer">if set to <c>true</c> [use float buffer].</param>
      <param name="saveToTexture">if set to <c>true</c> [save to texture].</param>
    </member>
    <member name="P:PloobsEngine.SceneControl.IDeferredFinalCombination.AmbientColor">
      <summary>
            Gets or sets the ambient color factor.
            Uniform for all the scene
            </summary>
      <value>
            The color of the ambient.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl.IDeferredFinalCombination.Item(PloobsEngine.SceneControl.GBufferTypes)">
      <summary>
            Gets the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" /> with the specified type.
            </summary>
    </member>
    <member name="P:Bnoerj.AI.Steering.IVehicle.Acceleration">
      <summary>
            Gets the acceleration of the vehicle.
            </summary>
    </member>
    <member name="T:PloobsEngineReach.Resource2">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:PloobsEngineReach.Resource2.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:PloobsEngineReach.Resource2.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.IPhysicWorld">
      <summary>
            3D Physic World Specification
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.IPhysicWorld.DebugDrawn(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.GameTime,PloobsEngine.Cameras.ICamera)">
      <summary>
            Draw the physic world in debug mode.
            </summary>
      <param name="gt">The gt.</param>
      <param name="cam">The cam.</param>
    </member>
    <member name="M:PloobsEngine.Physics.IPhysicWorld.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates 
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.Physics.IPhysicWorld.AddObject(PloobsEngine.Physics.IPhysicObject)">
      <summary>
            Adds the object.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.Physics.IPhysicWorld.RemoveObject(PloobsEngine.Physics.IPhysicObject)">
      <summary>
            Removes the object.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.Physics.IPhysicWorld.AddConstraint(PloobsEngine.Physic.Constraints.IPhysicConstraint)">
      <summary>
             Adds the constraint
            </summary>
      <param name="ctn">
      </param>
    </member>
    <member name="M:PloobsEngine.Physics.IPhysicWorld.RemoveConstraint(PloobsEngine.Physic.Constraints.IPhysicConstraint)">
      <summary>
            Removes the constraints
            </summary>
      <param name="ctn">
      </param>
    </member>
    <member name="M:PloobsEngine.Physics.IPhysicWorld.SegmentIntersect(Microsoft.Xna.Framework.Ray,System.Func{PloobsEngine.Physics.IPhysicObject,System.Boolean},System.Single)">
      <summary>
            Raycast
            </summary>
      <param name="raio">The raio.</param>
      <param name="filter">The filter.</param>
      <param name="maxDistance">The max distance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Physics.IPhysicWorld.DetectCollisions(PloobsEngine.Physics.IPhysicObject,System.Collections.Generic.List{PloobsEngine.Physics.IPhysicObject})">
      <summary>
            Detects the collisions of a physic object
            </summary>
      <param name="po">The po.</param>
      <param name="resp">The resp.</param>
    </member>
    <member name="M:PloobsEngine.Physics.IPhysicWorld.GetPhysicsObjectsInRange(PloobsEngine.Physics.IPhysicObject,System.Single,PloobsEngine.Physics.CullerConditionAvaliator{PloobsEngine.Physics.IPhysicObject,PloobsEngine.SceneControl.IObject},System.Collections.Generic.List{PloobsEngine.Physics.IPhysicObject})">
      <summary>
            Get the objects near the object passed as parameter
            </summary>
      <param name="po">The po.</param>
      <param name="distance">The distance.</param>
      <param name="CullerAvaliator">The culler avaliator.</param>
      <param name="resp">The resp.</param>
    </member>
    <member name="M:PloobsEngine.Physics.IPhysicWorld.GetPhysicsObjectsInRange(Microsoft.Xna.Framework.Vector3,System.Single,PloobsEngine.Physics.CullerConditionAvaliator{PloobsEngine.Physics.IPhysicObject,PloobsEngine.SceneControl.IObject},System.Collections.Generic.List{PloobsEngine.Physics.IPhysicObject})">
      <summary>
            Get the objects near the position passed as parameter
            </summary>
      <param name="position">The position.</param>
      <param name="distance">The distance.</param>
      <param name="CullerAvaliator">The culler avaliator.</param>
      <param name="resp">The resp.</param>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicWorld.isDebugDraw">
      <summary>
            Gets or sets a value indicating whether this instance is debug draw.
            </summary>
      <value>
        <c>true</c> if this instance is debug draw; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicWorld.PhysicObjects">
      <summary>
            Gets the physic objects.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.IPhysicWorld.PhysicConstraints">
      <summary>
            Gets the physic constraints.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.BepuPhysicWorld">
      <summary>
            Bepu Implementation of a Physic World
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.#ctor(System.Single,System.Boolean,System.Single,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Physics.BepuPhysicWorld" /> class.
            </summary>
      <param name="gravity">The gravity.</param>
      <param name="useRealElapsedTimeStep">if set to <c>true</c> [use real elapsed time step] in the simulation.</param>
      <param name="PhysicElapsedTimeMultiplier">If useRealElapsedTimeStep is true, multiply the elapsedtime by this value.</param>
      <param name="multiThread">if set to <c>true</c> [multi thread].</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.AddObject(PloobsEngine.Physics.IPhysicObject)">
      <summary>
            Adds the object.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.RemoveObject(PloobsEngine.Physics.IPhysicObject)">
      <summary>
            Removes the object.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.RemoveConstraint(PloobsEngine.Physic.Constraints.IPhysicConstraint)">
      <summary>
            Removes the constraint.
            </summary>
      <param name="ctn">The CTN.</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.DebugDrawn(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.GameTime,PloobsEngine.Cameras.ICamera)">
      <summary>
            Draw the physic world in debug mode.
            </summary>
      <param name="render">The render helper.</param>
      <param name="gt">The gt.</param>
      <param name="cam">The cam.</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.SegmentIntersect(Microsoft.Xna.Framework.Ray,System.Func{PloobsEngine.Physics.IPhysicObject,System.Boolean},System.Single)">
      <summary>
            Raycast
            </summary>
      <param name="raio">The raio.</param>
      <param name="filter">
      </param>
      <param name="maxDistance">The max distance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.DetectCollisions(PloobsEngine.Physics.IPhysicObject,System.Collections.Generic.List{PloobsEngine.Physics.IPhysicObject})">
      <summary>
            Detects the collisions.
            </summary>
      <param name="po">The po.</param>
      <param name="col">The col.</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.GetPhysicsObjectsInRange(PloobsEngine.Physics.IPhysicObject,System.Single,PloobsEngine.Physics.CullerConditionAvaliator{PloobsEngine.Physics.IPhysicObject,PloobsEngine.SceneControl.IObject},System.Collections.Generic.List{PloobsEngine.Physics.IPhysicObject})">
      <summary>
            Gets the physics objects in range.
            </summary>
      <param name="po">The po.</param>
      <param name="distance">The distance.</param>
      <param name="condition">The condition.</param>
      <param name="resp">The resp.</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.GetIObjectsInRange(Microsoft.Xna.Framework.BoundingFrustum,PloobsEngine.Physics.CullerConditionAvaliator{PloobsEngine.Physics.IPhysicObject,PloobsEngine.SceneControl.IObject},System.Collections.Generic.List{PloobsEngine.SceneControl.IObject})">
      <summary>
            Gets the Iobjects in range.
            </summary>
      <param name="frustrum">The frustrum.</param>
      <param name="condition">The condition.</param>
      <param name="resp">The resp.</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Gets the object data.
            </summary>
      <param name="info">The info.</param>
      <param name="context">The context.</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.ApplyDefaultSettings(PloobsEngine.Physics.BepuPhysicWorld)">
      <summary>
            Applies the default settings to the space.
            These values are what the engine starts with; they don't have to be applied unless you just want to get back to the defaults.
            This doesn't cover every single tunable field in the entire engine, just the main ones that this helper class is messing with.
            </summary>
      <param name="world">The world.</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.ApplyRotationSettings">
      <summary>
            Applies some rotation-related settings.
            With these settings enabled, rotation generally behaves better with long shapes.
            Angular motion is more realistic since the momentum is conserved.
            However, these settings can also cause some instability to sneak into the simulation.
            Try using these settings on the Saw Contraption demo to see an example of what can go
            wrong when conservation is enabled.
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.ApplySemiSpeedySettings">
      <summary>
            Applies slightly higher speed settings.
            The only change here is the default minimum iterations.
            In many simulations, having a minimum iteration count of 0 works just fine.
            It's a quick and still fairly robust way to get some extra performance.
            An example of where this might introduce some issues is sphere stacking.
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.ApplySuperSpeedySettings(PloobsEngine.Physics.BepuPhysicWorld)">
      <summary>
            Applies some low quality, high speed settings.
            The main benefit comes from the very low iteration cap.
            By enabling simplex caching, general convex collision detection
            gets a nice chunk faster, but some curved shapes lose collision detection robustness.
            </summary>
      <param name="world">The world.</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.ApplyMediumHighStabilitySettings(PloobsEngine.Physics.BepuPhysicWorld)">
      <summary>
            Applies some higher quality settings.
            By using universal continuous collision detection, missed collisions
            will be much, much rarer.  This actually doesn't have a huge performance cost.
            The increased iterations put this as a midpoint between the normal and high stability settings.
            </summary>
      <param name="world">The world.</param>
    </member>
    <member name="M:PloobsEngine.Physics.BepuPhysicWorld.ApplyHighStabilitySettings(PloobsEngine.Physics.BepuPhysicWorld)">
      <summary>
            Applies some high quality, low performance settings.
            By using universal continuous collision detection, missed collisions
            will be much, much rarer.  This actually doesn't have a huge performance cost.
            However, increasing the iteration limit and the minimum iterations to 5x the default
            will incur a pretty hefty overhead.
            On the upside, pretty much every simulation will be rock-solid.
            </summary>
      <param name="world">The world.</param>
    </member>
    <member name="P:PloobsEngine.Physics.BepuPhysicWorld.Space">
      <summary>
            Gets or sets the space.
            </summary>
      <value>
            The space.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.BepuPhysicWorld.PhysicObjects">
      <summary>
            Gets the physic objects.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.BepuPhysicWorld.PhysicConstraints">
      <summary>
            Gets the constraint objects.
            </summary>
    </member>
    <member name="T:PloobsEngine.Modelo.CustomModel">
      <summary>
            Model implementation responsible for holding a specific mesh of a larger model
            Used by our World loader (from 3ds exporter)
            </summary>
    </member>
    <member name="T:PloobsEngine.Light.ILight">
      <summary>
            Specification of a Light
            </summary>
    </member>
    <member name="P:PloobsEngine.Light.ILight.CastShadown">
      <summary>
            Gets or sets a value indicating whether [cast shadown].
            </summary>
      <value>
        <c>true</c> if [cast shadown]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.ILight.Name">
      <summary>
            Gets or sets the name of the light.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.ILight.LightType">
      <summary>
            Gets the type of the light.
            </summary>
      <value>
            The type of the light.
            </value>
    </member>
    <member name="T:PloobsEngine.Light.DeferredLight">
      <summary>
            Deferred Light Specification
            </summary>
    </member>
    <member name="P:PloobsEngine.Light.DeferredLight.LightType">
      <summary>
            Gets the type of the light.
            </summary>
      <value>
            The type of the light.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.DeferredLight.SHADOWBIAS">
      <summary>
            Gets or sets the SHADOWBIAS.
            </summary>
      <value>
            The SHADOWBIAS.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.DeferredLight.Color">
      <summary>
            Gets or sets the color.
            </summary>
      <value>
            The color.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.DeferredLight.ViewMatrix">
      <summary>
            Gets or sets the view matrix.
            </summary>
      <value>
            The view matrix.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.DeferredLight.ProjMatrix">
      <summary>
            Gets or sets the proj matrix.
            </summary>
      <value>
            The proj matrix.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.DeferredLight.Name">
      <summary>
            Gets or sets the name of the light.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.DeferredLight.CastShadown">
      <summary>
            Gets or sets a value indicating whether [cast shadown].
            </summary>
      <value>
        <c>true</c> if [cast shadown]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PloobsEngine.Light.DirectionalLightPE">
      <summary>
            Deferred Directional Light
            </summary>
    </member>
    <member name="F:PloobsEngine.Light.DirectionalLightPE.nearClipOffset">
      <summary>
            experimentalllll
            </summary>
    </member>
    <member name="M:PloobsEngine.Light.DirectionalLightPE.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Light.DirectionalLightPE" /> class.
            </summary>
    </member>
    <member name="M:PloobsEngine.Light.DirectionalLightPE.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Light.DirectionalLightPE" /> class.
            </summary>
      <param name="direction">The direction.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:PloobsEngine.Light.DirectionalLightPE.FakeViewProjection(PloobsEngine.Cameras.ICamera)">
      <summary>
            Create a Fake view projection matrixes to use in Shadow.
            Calculate a Box that englobes the cam frustrum, put the eye near the center
            and calculates the view matrix, after use an ortograph projection to create
            the projection matrix
            Classic Algorith, dont make assumption on the scene orgnization, but also dont generate an optimal
            depth map (lots of none used pixels)
            </summary>
      <param name="cam">The cam.</param>
    </member>
    <member name="P:PloobsEngine.Light.DirectionalLightPE.NearClipOffset">
      <summary>
            Parameter to Tune the Shadow Mapping Generation
            Default 800
            </summary>
    </member>
    <member name="P:PloobsEngine.Light.DirectionalLightPE.Target">
      <summary>
            Used With the Position to generate a Direction
            </summary>
    </member>
    <member name="P:PloobsEngine.Light.DirectionalLightPE.LightIntensity">
      <summary>
            Gets or sets the light intensity.
            YOU MUST SET BOTH
            </summary>
      <value>
            The light intensity.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.DirectionalLightPE.Position">
      <summary>
            Used with the target to generate a Direction
            YOU MUST SET BOTH
            </summary>
      <value>
            The position.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.DirectionalLightPE.LightDirection">
      <summary>
            Gets or sets the light direction.
            </summary>
      <value>
            The light direction.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.DirectionalLightPE.LightType">
      <summary>
            Gets the type of the light.
            </summary>
      <value>
            The type of the light.
            </value>
    </member>
    <member name="T:PloobsEngine.Light2D.PointLight2D">
      <summary>
            2D point light
            </summary>
    </member>
    <member name="T:PloobsEngine.Features.DebugDraw.RegisterDebugDrawCommand">
      <summary>
            Command responsible for registering a Shape Drawer
            </summary>
    </member>
    <member name="T:PloobsEngine.Events.SimpleEvent">
      <summary>
            Evento Simples com alvos simples
            </summary>
    </member>
    <member name="T:BehaviorTrees.Limiter`1">
      <summary>
            Execute decorated node but only specified amount of times.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.Limiter`1.#ctor(System.Int32,BehaviorTrees.Node{`0})">
      <summary>
            Instantiates limiting decorator with a given limit amount.
            </summary>
      <param name="limit">Amount of times the subnode will be executed.</param>
      <param name="node">
      </param>
    </member>
    <member name="M:BehaviorTrees.Limiter`1.Evaluate(`0)">
      <summary>
            Executes decorated node but stops after the count of execution
            will hit the limit. After that it returns success.
            </summary>
      <returns>TaskResult.Success</returns>
    </member>
    <member name="T:BehaviorTrees.LimiterTask`1">
      <summary>
            Class responsible for running Limiter decorator.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.LimiterTask`1.Execute(`0,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Executes decorated node but stops after the count of execution
            will hit the limit. After that it returns success.
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.ScreenManager">
      <summary>
            The screen manager is a component which manages one or more GameScreen
            instances. It maintains a stack of screens, calls their Update and Draw
            methods at the appropriate times
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.ScreenManager.#ctor(PloobsEngine.Engine.GraphicInfo@,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.IContentManager,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.Engine.EngineStuff)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.ScreenManager" /> class.
            </summary>
      <param name="GraphicInfo">The graphic info.</param>
      <param name="factory">The factory.</param>
      <param name="contentManager">The content manager.</param>
      <param name="render">The render.</param>
      <param name="engine">The engine.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.ScreenManager.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Allows each screen to run logic.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.ScreenManager.Draw(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Tells each screen to draw itself.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.ScreenManager.AddScreen(PloobsEngine.SceneControl.IScreen,PloobsEngine.SceneControl.IScreen,System.Boolean)">
      <summary>
            Adds a new screen to the screen manager.
            </summary>
      <param name="definitiveScreen">The definitive screen.</param>
      <param name="LoadingScreen">The loading screen.</param>
      <param name="loadAndInitScreen">if set to <c>true</c> [load and init definitiveScreen].</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.ScreenManager.RemoveScreen(PloobsEngine.SceneControl.IScreen,System.Boolean)">
      <summary>
            Removes a screen from the screen manager. 
            </summary>
      <param name="screen">The screen.</param>
      <param name="cleanUp">if set to <c>true</c> [clean up the screen].</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.ScreenManager.GetScreens">
      <summary>
            Expose an array holding all the screens. We return a copy rather
            than the real master list, because screens should only ever be added
            or removed using the AddScreen and RemoveScreen methods.
            </summary>
    </member>
    <member name="T:PloobsEngine.DataStructure.MergeSort">
      <summary>
            Implementation of stable merge sort.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.MergeSort.Sort``1(``0[])">
      <summary>
            Sorts the specified entities.
            </summary>
      <typeparam name="T">is an ICOMPARABLE</typeparam>
      <param name="entities">The entities.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.MergeSort.Sort``1(``0[],System.Comparison{``0})">
      <summary>
            Sorts the specified entities.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="entities">The entities.</param>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.MergeSort.Merge``1(``0[],``0[],``0[],System.Comparison{``0})">
      <summary>
            Merges the specified left and right.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <param name="entities">The entities.</param>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl.IForwardPass">
      <summary>
            Specification of the ForwardPass pass
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IForwardPass.Draw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IWorld,PloobsEngine.SceneControl.RenderHelper,System.Collections.Generic.List{PloobsEngine.SceneControl.IObject},System.Collections.Generic.List{PloobsEngine.SceneControl.IObject})">
      <summary>
            Draws all the forward Objects
            </summary>
      <param name="gt">The gt.</param>
      <param name="world">The world.</param>
      <param name="render">The render.</param>
      <param name="deferred">The deferred.</param>
      <param name="forward">The forward.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.Annotation.AddTrail(Bnoerj.AI.Steering.Trail)">
      <summary>
            Adds a Trail.
            </summary>
      <param name="trail">The trail to add.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.Annotation.RemoveTrail(Bnoerj.AI.Steering.Trail)">
      <summary>
            Removes the specified Trail.
            </summary>
      <param name="trail">The trail to remove.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.Annotation.DrawTrails(Bnoerj.AI.Steering.IDraw)">
      <summary>
            Draws all registered Trails.
            </summary>
    </member>
    <member name="P:Bnoerj.AI.Steering.Annotation.IsEnabled">
      <summary>
            Indicates whether annotation is enabled.
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.TerrainObject.SetMaterialDescription(PloobsEngine.Physics.MaterialDescription)">
      <summary>
            Sets the material description.
            </summary>
      <param name="materialDescription">The material description.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.TerrainObject.GetMaterialDescription">
      <summary>
            Gets the material description.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.TerrainObject.#ctor(PloobsEngine.Engine.GraphicFactory,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,PloobsEngine.Physics.MaterialDescription,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Physics.Bepu.TerrainObject" /> class.
            </summary>
      <param name="gfactory">The gfactory.</param>
      <param name="heightmapTexture">The heighmap texture.</param>
      <param name="translation">The translation.</param>
      <param name="rotation">The rotation.</param>
      <param name="materialDesc">The material desc.</param>
      <param name="XSpacing">The X spacing.</param>
      <param name="ZSpacing">The Z spacing.</param>
      <param name="heightMultipler">The height multipler.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.TerrainObject.#ctor(PloobsEngine.Engine.GraphicFactory,System.String,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,PloobsEngine.Physics.MaterialDescription,System.Single,System.Single,System.Single)">
      <summary>
            Create a Terrain Physic Object
            </summary>
      <param name="gfactory">The gfactory.</param>
      <param name="heighmapName">Name of the heighmap texture</param>
      <param name="translation">The translation.</param>
      <param name="rotation">The rotation.</param>
      <param name="materialDesc">The material desc.</param>
      <param name="XSpacing">The X spacing.</param>
      <param name="ZSpacing">The Z spacing.</param>
      <param name="heightMultipler">Default 10 - controla a altura, menor mais alto</param>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TerrainObject.MaxHeight">
      <summary>
            Gets the height of the max.
            </summary>
      <value>
            The height of the max.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TerrainObject.MinHeight">
      <summary>
            Gets the height of the min.
            </summary>
      <value>
            The height of the min.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TerrainObject.Terrain">
      <summary>
            Gets the terrain.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TerrainObject.HeightMap">
      <summary>
            Gets the height map.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.DisplayMobileMesh">
      <summary>
            Simple display object for triangles.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.DisplayMinkowskiSum">
      <summary>
            Helper class that can create shape mesh data.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.DisplayMinkowskiSum.NumSamples">
      <summary>
            Number of sides of spherical sampling to take when creating graphical representations.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.DisplayCylinder">
      <summary>
            Helper class that can create shape mesh data.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.DisplayCylinder.NumSides">
      <summary>
            Number of sides to build geometry with.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.DisplayConvexHull">
      <summary>
            Helper class that can create shape mesh data.
            </summary>
    </member>
    <member name="T:PloobsEngine.Modelo.TextureInformation">
      <summary>
            Handles the textures of a IModelo.
            Similar to BatchInformation, but for textures only
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo.TextureInformation.#ctor(System.Boolean,PloobsEngine.Engine.GraphicFactory,System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Modelo.TextureInformation" /> class.
            </summary>
      <param name="isinternal">if set to <c>true</c> [isinternal].</param>
      <param name="factory">The factory.</param>
      <param name="diffuseTextureName">Name of the diffuse texture.</param>
      <param name="bumpTextureName">Name of the bump texture.</param>
      <param name="specularTextureName">Name of the specular texture.</param>
      <param name="glowTextureName">Name of the glow texture.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.TextureInformation.CleanUp(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Disposes all.
            </summary>
      <param name="factory">The factory.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.TextureInformation.getCubeTexture(PloobsEngine.Modelo.TextureType)">
      <summary>
            Gets the cube texture.
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Modelo.TextureInformation.getTexture(PloobsEngine.Modelo.TextureType)">
      <summary>
            Gets one texture of the model.
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Modelo.TextureInformation.SetNullTexture(PloobsEngine.Modelo.TextureType)">
      <summary>
            Sets the passed texture type to null.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.TextureInformation.SetTexture(System.String,PloobsEngine.Modelo.TextureType)">
      <summary>
            Sets the texture.
            </summary>
      <param name="textureName">Name of the texture.</param>
      <param name="type">The type.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.TextureInformation.LoadTexture">
      <summary>
            Load the model
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo.TextureInformation.SetCubeTexture(Microsoft.Xna.Framework.Graphics.TextureCube,PloobsEngine.Modelo.TextureType)">
      <summary>
            Sets the cube texture.
            </summary>
      <param name="tex">The tex.</param>
      <param name="type">The type.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.TextureInformation.SetTexture(Microsoft.Xna.Framework.Graphics.Texture2D,PloobsEngine.Modelo.TextureType)">
      <summary>
            Sets the texture.
            </summary>
      <param name="tex">The tex.</param>
      <param name="type">The type.</param>
    </member>
    <member name="P:PloobsEngine.Modelo.TextureInformation.ParalaxName">
      <summary>
            Gets or sets the name of the paralax texture.
            </summary>
      <value>
            The name of the paralax.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo.TextureInformation.GlowName">
      <summary>
            Gets or sets the name of the glow texture.
            </summary>
      <value>
            The name of the glow.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo.TextureInformation.BumpMapName">
      <summary>
            Gets or sets the name of the bump map.
            </summary>
      <value>
            The name of the bump map.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo.TextureInformation.SpecularMapName">
      <summary>
            Gets or sets the name of the specular map.
            </summary>
      <value>
            The name of the specular map.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo.TextureInformation.DiffuseMapName">
      <summary>
            Gets or sets the name of the diffuse map.
            </summary>
      <value>
            The name of the diffuse map.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo.TextureInformation.MultiTexture1MapName">
      <summary>
            Gets or sets the name of the multi texture1 map.
            </summary>
      <value>
            The name of the multi texture1 map.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo.TextureInformation.MultiTexture2MapName">
      <summary>
            Gets or sets the name of the multi texture2 map.
            </summary>
      <value>
            The name of the multi texture2 map.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo.TextureInformation.MultiTexture3MapName">
      <summary>
            Gets or sets the name of the multi texture3 map.
            </summary>
      <value>
            The name of the multi texture3 map.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo.TextureInformation.MultiTexture4MapName">
      <summary>
            Gets or sets the name of the multi texture4 map.
            </summary>
      <value>
            The name of the multi texture4 map.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo.TextureInformation.HeightMapName">
      <summary>
            Gets or sets the name of the height map.
            </summary>
      <value>
            The name of the height map.
            </value>
    </member>
    <member name="E:PloobsEngine.Modelo.TextureInformation.OnTextureChange">
      <summary>
            Occurs when [on texture change].
            </summary>
    </member>
    <member name="T:PloobsEngine.Material.ForwardSimpleAnimationShader">
      <summary>
            Animation shader with simple effects
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.ForwardSimpleAnimationShader.#ctor">
      <summary>
            Serialization
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.ForwardSimpleAnimationShader.#ctor(PloobsEngine.Modelo.Animation.IAnimatedController)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Material.ForwardSimpleAnimationShader" /> class.
            </summary>
      <param name="ac">The ac.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardSimpleAnimationShader.#ctor(PloobsEngine.Modelo.Animation.IAnimatedController,PloobsEngine.SceneControl.IObject,PloobsEngine.Modelo.Animation.IAnimatedController,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Material.ForwardSimpleAnimationShader" /> class.
            THIS IS A SPECIAL CONSTRUCTOR, it is used to ATACH this shader to a external BONE
            Can be used for example to put a gun in the hand of a character
            </summary>
      <param name="ac">The ac.</param>
      <param name="obj">The obj.</param>
      <param name="Followed">The followed.</param>
      <param name="boneName">Name of the bone.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardSimpleAnimationShader.Update(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,System.Collections.Generic.IList{PloobsEngine.Light.ILight})">
      <summary>
            Updates this shader
            Called every frame once
            </summary>
      <param name="gt">
      </param>
      <param name="ent">The ent.</param>
      <param name="lights">The lights.</param>
    </member>
    <member name="P:PloobsEngine.Material.ForwardSimpleAnimationShader.SkinnedEffect">
      <summary>
            CAN BE ONLY CALLED AFTER Adding the IOBJECT TO THE WORLD
            </summary>
    </member>
    <member name="P:PloobsEngine.Material.ForwardSimpleAnimationShader.MaterialType">
      <summary>
            Gets the type of the material.
            </summary>
      <value>
            The type of the material.
            </value>
    </member>
    <member name="T:PloobsEngine.Material.ForwardDualTextureShader">
      <summary>
            USes the TextureType.MULTITEX1 and the TextureType.Difuse as textures
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.ForwardDualTextureShader.Initialize(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.IObject)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="ginfo">
      </param>
      <param name="factory">
      </param>
      <param name="obj">
      </param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardDualTextureShader.Draw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight})">
      <summary>
            Draw
            </summary>
      <param name="gt">gametime</param>
      <param name="obj">the obj</param>
      <param name="render">The render.</param>
      <param name="cam">The cam.</param>
      <param name="lights">
      </param>
    </member>
    <member name="P:PloobsEngine.Material.ForwardDualTextureShader.MaterialType">
      <summary>
            Gets the type of the material.
            </summary>
      <value>
            The type of the material.
            </value>
    </member>
    <member name="T:PloobsEngine.Light.SpotLightPE">
      <summary>
            Deferred Spot Light
            </summary>
    </member>
    <member name="M:PloobsEngine.Light.SpotLightPE.#ctor">
      <summary>
            Serialization 
            </summary>
    </member>
    <member name="M:PloobsEngine.Light.SpotLightPE.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Light.SpotLightPE" /> class.
            </summary>
      <param name="position">The position.</param>
      <param name="direction">The direction.</param>
      <param name="coneDecay">The cone decay.</param>
      <param name="lightRadius">The light radius.</param>
      <param name="Color">The color.</param>
      <param name="lightAngleCosine">The light angle cosine.</param>
      <param name="lightIntensity">The light intensity.</param>
    </member>
    <member name="P:PloobsEngine.Light.SpotLightPE.ProjMatrix">
      <summary>
            Gets or sets the proj matrix.
            </summary>
      <value>
            The proj matrix.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.SpotLightPE.ViewMatrix">
      <summary>
            Gets or sets the view matrix.
            </summary>
      <value>
            The view matrix.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.SpotLightPE.LightIntensity">
      <summary>
            Gets or sets the light intensity.
            </summary>
      <value>
            The light intensity.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.SpotLightPE.LightAngleCosine">
      <summary>
            Gets or sets the light angle cosine.
            </summary>
      <value>
            The light angle cosine.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.SpotLightPE.Position">
      <summary>
            Gets or sets the position.
            </summary>
      <value>
            The position.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.SpotLightPE.Direction">
      <summary>
            Gets or sets the direction.
            </summary>
      <value>
            The direction.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.SpotLightPE.LightRadius">
      <summary>
            Gets or sets the light radius.
            </summary>
      <value>
            The light radius.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.SpotLightPE.ConeDecay">
      <summary>
            Gets or sets the cone decay.
            </summary>
      <value>
            The cone decay.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.SpotLightPE.Target">
      <summary>
            Gets or sets the target.
            </summary>
      <value>
            The target.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.SpotLightPE.LightType">
      <summary>
            Gets the type of the light.
            </summary>
      <value>
            The type of the light.
            </value>
    </member>
    <member name="T:PloobsEngine.Features.ITask">
      <summary>
            Specification of a task
            Task is a class that operates in ANOTHER THREAD    
            </summary>
    </member>
    <member name="M:PloobsEngine.Features.ITask.Result(System.IAsyncResult)">
      <summary>
            Called when the task ends
            </summary>
      <param name="result">The result.</param>
    </member>
    <member name="M:PloobsEngine.Features.ITask.Process">
      <summary>
            Processes the task.
            </summary>
    </member>
    <member name="T:PloobsEngine.Features.TaskEndType">
      <summary>
            Quando a funcao result sera chamada, qd o process terminar
            </summary>
    </member>
    <member name="T:PloobsEngine.Features.FPSCounter">
      <summary>
            Component to count fps
            </summary>
    </member>
    <member name="T:PloobsEngine.DataStructure.BinaryTree`1">
      <summary>
      </summary>
      <typeparam name="UserType">Type of data stored in the nodes.</typeparam>
    </member>
    <member name="M:PloobsEngine.DataStructure.BinaryTree`1.#ctor(PloobsEngine.DataStructure.BinaryTree{`0})">
      <summary>
            Create a new binary tree.
            </summary>
      <param name="cloneSource">A binary tree to copy into this tree.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.BinaryTree`1.Traverse(PloobsEngine.DataStructure.BinaryTreeVisitDelegate{`0},PloobsEngine.DataStructure.BinaryTreeTraversal)">
      <summary>
            Traverses the binary tree calling a visit method on each node.
            </summary>
      <param name="visitMethod">A method to be called on each visited node.</param>
      <param name="traversalMode">Mode of traversal to perform.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.BinaryTree`1.Dispose">
      <summary>
            Dispose of this binary tree, it's nodes and their data.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.BinaryTree`1.Dispose(System.Boolean)">
      <summary>
            Called when this binary tree is being disposed of.
            </summary>
      <param name="disposing">Should managed resources be disposed of as well.</param>
    </member>
    <member name="P:PloobsEngine.DataStructure.BinaryTree`1.Height">
      <summary>
            Number of nodes traversed from the root to the deepest part of the tree.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.BinaryTree`1.NodeCount">
      <summary>
            Number of nodes in the tree.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.BinaryTree`1.LeafCount">
      <summary>
            Number of nodes without children in the tree.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.BinaryTree`1.IsEmpty">
      <summary>
            Does the tree even have any nodes?
            </summary>
    </member>
    <member name="T:PloobsEngine.DataStructure.BinarySearchTree`1">
      <summary>
            A binary tree which assist with inserting, removing, and finding whether data exist in
            the tree.
            </summary>
      <typeparam name="UserType">Type of data stored in the binary nodes.</typeparam>
    </member>
    <member name="M:PloobsEngine.DataStructure.BinarySearchTree`1.#ctor(System.Collections.Generic.IComparer{`0},PloobsEngine.DataStructure.BinaryTree{`0})">
      <summary>
            Create a new binary search tree.
            </summary>
      <param name="comparer">A comparer to use for determining which nodes are greater/less
            than other nodes.</param>
      <param name="cloneSource">A binary tree to copy into this tree.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.BinarySearchTree`1.Contains(`0)">
      <summary>
            Checks whether the specified item exist in this binary tree.
            </summary>
      <param name="searchItem">
      </param>
      <returns>True if the item exist in this tree; false if it does not.</returns>
    </member>
    <member name="M:PloobsEngine.DataStructure.BinarySearchTree`1.Insert(`0)">
      <summary>
            Inserts an item into this binary tree.
            </summary>
      <param name="insertItem">
      </param>
    </member>
    <member name="M:PloobsEngine.DataStructure.BinarySearchTree`1.Remove(`0)">
      <summary>
            Removes an itemf rom this binary tree.
            </summary>
      <param name="removeItem">
      </param>
    </member>
    <member name="T:PloobsEngine.IA.NeuralNetwork.Layer">
      <summary>
            A layer of neurone in a neuronal network
            </summary>
      <remarks>
        <code>
                        / N1 -----&gt;        OUTPUTS
            INPUTS ===&gt; - N2 -----&gt;  (1 output for each 
                        \ Ni -----&gt;  neuron of the layer)
            </code>       
            Each neuron of the layer has the same number of
            inputs, this is the number of inputs of the layer
            itself.
            </remarks>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Layer.nn">
      <summary>
            Number of neurons in the layer
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Layer.ni">
      <summary>
            Number of inputs of the layer
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Layer.neurons">
      <summary>
            Neurons of the layer
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.Layer.output">
      <summary>
            Last output of the layer
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Layer.#ctor(System.Int32,System.Int32,PloobsEngine.IA.NeuralNetwork.ActivationFunction)">
      <summary>
            Build a new Layer with neurons neurones. Every neuron 
            has "inputs" inputs and the activation function f.
            </summary>
      <param name="inputs">Number of inputs</param>
      <param name="neurons">Number of neurons</param>
      <param name="f">Activation function of each neuron</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Layer.#ctor(System.Int32,System.Int32)">
      <summary>
            Build a new Layer with neurons neurones. Every neuron 
            has "inputs" inputs and the sigmoid activation function.
            </summary>
      <param name="inputs">Number of inputs</param>
      <param name="neurons">Number of neurons</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Layer.setActivationFunction(PloobsEngine.IA.NeuralNetwork.ActivationFunction)">
      <summary>
            Set the activation function f to all neurons of the layer
            </summary>
      <param name="f">An activation function</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Layer.randomizeWeight">
      <summary>
            Randomize all neurons weights
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Layer.randomizeThreshold">
      <summary>
            Randomize all neurons thresholds
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Layer.randomizeAll">
      <summary>
            Randomize all neurons threshold and weights
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Layer.setRandomizationInterval(System.Single,System.Single)">
      <summary>
            Set the randomization interval for all neurons
            </summary>
      <param name="min">the minimum value</param>
      <param name="max">the maximum value</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.Layer.Output(System.Single[])">
      <summary>
            Compute output of the layer.
            The output vector contains the output of each 
            neuron of the layer.
            </summary>
      <param name="input">input of the layer (size must be N_inputs)</param>
      <returns>the output vector (size = N_neurons)</returns>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Layer.N_Neurons">
      <summary>
            Number of neurons in this layer
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Layer.N_Inputs">
      <summary>
            Number of inputs of this layer
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Layer.Item(System.Int32)">
      <summary>
            Indexer of layer's neurons
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.Layer.Last_Output">
      <summary>
            Return last output vector of the layer
            </summary>
    </member>
    <member name="T:PloobsEngine.Utils.TimePassed">
      <summary>
            Helper to wait for a period
            When off always return false in hasPassed Method
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.TimePassed.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Utils.TimePassed" /> class.
            Starts on by Default
            </summary>
      <param name="intervalInSeconds">
      </param>
    </member>
    <member name="M:PloobsEngine.Utils.TimePassed.#ctor(System.Single,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Utils.TimePassed" /> class.
            </summary>
      <param name="intervalInSeconds">The interval in seconds.</param>
      <param name="startOn">if set to <c>true</c> [start on].</param>
    </member>
    <member name="M:PloobsEngine.Utils.TimePassed.InitOrRestart(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Inits or restart.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.TimePassed.hasPassed(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Determines whether the interval has passed.        
            </summary>
      <returns>
        <c>true</c> if this instance has passed; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:PloobsEngine.Utils.TimePassed.State">
      <summary>
            On or Off
            </summary>
    </member>
    <member name="P:PloobsEngine.Utils.TimePassed.Interval">
      <summary>
            Gets or sets the interval in seconds
            </summary>
      <value>
            The interval.
            </value>
    </member>
    <member name="T:PloobsEngine.Utils.Curve3D">
      <summary>
            Represents a Curve3D
            using one XNA Curve for each axis
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Curve3D.curveX">
      <summary>
            Curve x
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Curve3D.curveY">
      <summary>
            curve y
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Curve3D.curveZ">
      <summary>
            curve z
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Curve3D.#ctor(Microsoft.Xna.Framework.CurveLoopType)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Utils.Curve3D" /> class.
            </summary>
      <param name="CurveLoopType">Type of the curve loop.</param>
    </member>
    <member name="M:PloobsEngine.Utils.Curve3D.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Utils.Curve3D" /> class.
            Linear Curve Loop Type
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Curve3D.SetTangents">
      <summary>
            Sets the tangents.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Curve3D.SetCurveKeyTangent(Microsoft.Xna.Framework.CurveKey@,Microsoft.Xna.Framework.CurveKey@,Microsoft.Xna.Framework.CurveKey@)">
      <summary>
            Sets the curve key tangent.
            </summary>
      <param name="prev">The prev.</param>
      <param name="cur">The cur.</param>
      <param name="next">The next.</param>
    </member>
    <member name="M:PloobsEngine.Utils.Curve3D.AddPoint(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Adds the point.
            </summary>
      <param name="point">The point.</param>
      <param name="time">The time.</param>
    </member>
    <member name="M:PloobsEngine.Utils.Curve3D.GetPointOnCurve(System.Single)">
      <summary>
            Gets the point on curve.
            </summary>
      <param name="time">The time.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Material.ForwardXNABasicShaderDescription">
      <summary>
            Description that helps building the XNABasicShader
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.ForwardXNABasicShaderDescription.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Material.ForwardXNABasicShaderDescription" /> struct.
            </summary>
      <param name="AmbientColor">Color of the ambient.</param>
      <param name="EmissiveColor">Color of the emissive.</param>
      <param name="SpecularColor">Color of the specular.</param>
      <param name="specularPower">The specular power.</param>
      <param name="alpha">The alpha.</param>
      <param name="EnableLightning">if set to <c>true</c> [enable lightning].</param>
      <param name="DefaultLightning">if set to <c>true</c> [default lightning].</param>
      <param name="EnableTexture">if set to <c>true</c> [enable texture].</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardXNABasicShaderDescription.Default">
      <summary>
            Defaults this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Material.ForwardXNABasicShader">
      <summary>
            XNA basic shader
            Wrapper to xna basic effect
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.ForwardXNABasicShader.#ctor(PloobsEngine.Material.ForwardXNABasicShaderDescription)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Material.ForwardXNABasicShader" /> class.
            </summary>
      <param name="desc">The desc.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardXNABasicShader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Material.ForwardXNABasicShader" /> class.
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.ForwardXNABasicShader.Initialize(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.IObject)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="ginfo">
      </param>
      <param name="factory">
      </param>
      <param name="obj">
      </param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardXNABasicShader.SetDescription(PloobsEngine.Material.ForwardXNABasicShaderDescription)">
      <summary>
            Sets the description.
            </summary>
      <param name="desc">The desc.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardXNABasicShader.Draw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight})">
      <summary>
            Draw
            </summary>
      <param name="gt">gametime</param>
      <param name="obj">the obj</param>
      <param name="render">The render.</param>
      <param name="cam">The cam.</param>
      <param name="lights">
      </param>
    </member>
    <member name="P:PloobsEngine.Material.ForwardXNABasicShader.MaterialType">
      <summary>
            Gets the type of the material.
            </summary>
      <value>
            The type of the material.
            </value>
    </member>
    <member name="T:PloobsEngine.DataStructure.IPriorityQueue`1">
      <summary>
            Priority queue specification
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:PloobsEngine.DataStructure.IPriorityQueue`1.Push(`0)">
      <summary>
            Pushes the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.DataStructure.IPriorityQueue`1.Pop">
      <summary>
            Pops an item.
            </summary>
      <returns>item popped</returns>
    </member>
    <member name="M:PloobsEngine.DataStructure.IPriorityQueue`1.Peek">
      <summary>
            Peeks the top
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.DataStructure.IPriorityQueue`1.Update(System.Int32)">
      <summary>
            Updates the specified item i.
            </summary>
      <param name="i">The i.</param>
    </member>
    <member name="T:PloobsEngine.DataStructure.PriorityQueueB`1">
      <summary>
            Priority queue implementation
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:PloobsEngine.DataStructure.PriorityQueueB`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.DataStructure.PriorityQueueB`1" /> class.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.PriorityQueueB`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.DataStructure.PriorityQueueB`1" /> class.
            </summary>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.PriorityQueueB`1.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.DataStructure.PriorityQueueB`1" /> class.
            </summary>
      <param name="comparer">The comparer.</param>
      <param name="capacity">The capacity.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.PriorityQueueB`1.SwitchElements(System.Int32,System.Int32)">
      <summary>
            Switches the elements.
            </summary>
      <param name="i">The i.</param>
      <param name="j">The j.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.PriorityQueueB`1.OnCompare(System.Int32,System.Int32)">
      <summary>
            Called when [compare].
            </summary>
      <param name="i">The i.</param>
      <param name="j">The j.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.DataStructure.PriorityQueueB`1.Push(`0)">
      <summary>
            Push an object onto the PQ
            </summary>
      <param name="item">The item.</param>
      <returns>
            The index in the list where the object is _now_. This will change when objects are taken from or put onto the PQ.
            </returns>
    </member>
    <member name="M:PloobsEngine.DataStructure.PriorityQueueB`1.Pop">
      <summary>
            Get the smallest object and remove it.
            </summary>
      <returns>The smallest object</returns>
    </member>
    <member name="M:PloobsEngine.DataStructure.PriorityQueueB`1.Update(System.Int32)">
      <summary>
            Notify the PQ that the object at position i has changed
            and the PQ needs to restore order.
            Since you dont have access to any indexes (except by using the
            explicit IList.this) you should not call this function without knowing exactly
            what you do.
            </summary>
      <param name="i">The index of the changed object.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.PriorityQueueB`1.Peek">
      <summary>
            Get the smallest object without removing it.
            </summary>
      <returns>The smallest object</returns>
    </member>
    <member name="M:PloobsEngine.DataStructure.PriorityQueueB`1.Clear">
      <summary>
            Clears this instance.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.PriorityQueueB`1.RemoveLocation(`0)">
      <summary>
            Removes the item 
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="P:PloobsEngine.DataStructure.PriorityQueueB`1.Count">
      <summary>
            Gets number of entities.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.PriorityQueueB`1.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="!:T" /> at the specified index.
            </summary>
    </member>
    <member name="T:PloobsEngine.DataStructure.CircularList`1">
      <summary>
            Circular List
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:PloobsEngine.DataStructure.CircularList`1.#ctor(System.Int32)">
      <summary>
            Constructor that initializes the list with the 
            required number of items.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.CircularList`1.Next">
      <summary>
            Advances to the next item or wraps to the first item.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.CircularList`1.Clear">
      <summary>
            Clears the list, resetting the current index to the 
            beginning of the list and flagging the collection as unloaded.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.CircularList`1.SetAll(`0)">
      <summary>
            Sets all items in the list to the specified value, resets
            the current index to the beginning of the list and flags the
            collection as loaded.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.CircularList`1.RangeCheck(System.Int32)">
      <summary>
            Internal indexer range check helper.  Throws
            ArgumentOutOfRange exception if the index is not valid.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.CircularList`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.CircularList`1.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
              </exception>
    </member>
    <member name="M:PloobsEngine.DataStructure.CircularList`1.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
              </exception>
    </member>
    <member name="P:PloobsEngine.DataStructure.CircularList`1.Value">
      <summary>
            Gets/sets the item value at the current index.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.CircularList`1.Count">
      <summary>
            Returns the count of the number of loaded items, up to
            and including the total number of items in the collection.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.CircularList`1.Length">
      <summary>
            Returns the length of the items array.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.CircularList`1.Item(System.Int32)">
      <summary>
            Gets/sets the value at the specified index.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.CircularList`1.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <returns>
            The element in the collection at the current position of the enumerator.
              </returns>
    </member>
    <member name="T:PloobsEngine.SceneControl.IDeferredLightMap">
      <summary>
            Deferred LightMap generation specification
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredLightMap.SetLightMap(PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Sets the light map.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredLightMap.ResolveLightMap(PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Resolves the light map.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredLightMap.DrawLights(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IWorld,PloobsEngine.SceneControl.IDeferredGBuffer,PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Draws the lights.
            Perform the light pass
            </summary>
      <param name="gameTime">The game time.</param>
      <param name="world">The world.</param>
      <param name="deferredGBuffer">The deferred G buffer.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.IDeferredLightMap.LoadContent(PloobsEngine.SceneControl.IContentManager,PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,System.Boolean,System.Boolean)">
      <summary>
            Loads the content.
            </summary>
      <param name="manager">The manager.</param>
      <param name="ginfo">The ginfo.</param>
      <param name="factory">The factory.</param>
      <param name="cullPointLight">if set to <c>true</c> [cull point light].</param>
      <param name="useFloatingBufferForLightning">if set to <c>true</c> [use floating buffer for lightning].</param>
    </member>
    <member name="P:PloobsEngine.SceneControl.IDeferredLightMap.Item(PloobsEngine.SceneControl.DeferredLightMapType)">
      <summary>
            Get the generated Images by this pass
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.DeferredLightMapType">
      <summary>
            Generated Buffers by the lightmap pass
            </summary>
    </member>
    <member name="F:PloobsEngine.SceneControl.DeferredLightMapType.LIGHTMAP">
      <summary>
            LightMap
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.Culler.Simple2DCuller">
      <summary>
            Dummy 2D culler system 
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.Bepu.TriangleMeshObject">
      <summary>
            Static Triangle Mesh Physic Object
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.TriangleMeshObject.#ctor(PloobsEngine.Modelo.IModelo,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3,PloobsEngine.Physics.MaterialDescription)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Physics.Bepu.TriangleMeshObject" /> class.
            </summary>
      <param name="model">The model.</param>
      <param name="pos">The pos.</param>
      <param name="rotation">The rotation.</param>
      <param name="scale">The scale.</param>
      <param name="materialDescription">The material description.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.TriangleMeshObject.#ctor(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3,PloobsEngine.Physics.MaterialDescription)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Physics.Bepu.TriangleMeshObject" /> class.
            </summary>
      <param name="model">The model.</param>
      <param name="pos">The pos.</param>
      <param name="rotation">The rotation.</param>
      <param name="scale">The scale.</param>
      <param name="materialDescription">The material description.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.TriangleMeshObject.ExtractData(Microsoft.Xna.Framework.Vector3[]@,System.Int32[]@,PloobsEngine.Modelo.IModelo)">
      <summary>
            Helper to get the vertex and index List from the model.
            </summary>
      <param name="vert">The vert.</param>
      <param name="ind">The ind.</param>
      <param name="model">The model.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.TriangleMeshObject.ApplyImpulse(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Cant Aply Impulse on Static Object
            </summary>
      <param name="position">
      </param>
      <param name="force">The force.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.TriangleMeshObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serialization
            </summary>
      <param name="info">The info.</param>
      <param name="context">The context.</param>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TriangleMeshObject.StaticMesh">
      <summary>
            Gets or sets the static mesh.
            </summary>
      <value>
            The static mesh.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TriangleMeshObject.PhysicObjectTypes">
      <summary>
            Gets the physic object type.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TriangleMeshObject.Position">
      <summary>
            Gets or sets the position.
            </summary>
      <value>
            The position.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TriangleMeshObject.Scale">
      <summary>
            Gets or sets the scale.
            </summary>
      <value>
            The scale.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TriangleMeshObject.Rotation">
      <summary>
            Gets or sets the rotation.
            </summary>
      <value>
            The rotation.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TriangleMeshObject.FaceVector">
      <summary>
            Vector pointing to the front
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TriangleMeshObject.WorldMatrix">
      <summary>
            Gets the world matrix.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TriangleMeshObject.AngularVelocity">
      <summary>
            Gets or sets the angular velocity.
            </summary>
      <value>
            The angular velocity.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TriangleMeshObject.Velocity">
      <summary>
            Gets velocity. Always Zero cause this object is static
            </summary>
      <value>
            The velocity.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TriangleMeshObject.isMotionLess">
      <summary>
            This object is always motion less
            </summary>
      <value>
        <c>true</c> if this instance is motion less; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TriangleMeshObject.ObjectOwner">
      <summary>
            Gets or sets the IObject owner.
            </summary>
      <value>
            The IObject owner.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.TriangleMeshObject.BoundingBox">
      <summary>
            Gets the bounding box IN WORLD COORDINATES
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.Bepu.MobileMeshObject">
      <summary>
            Dynamic Mesh Physic Object
            </summary>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.MobileMeshObject.#ctor(PloobsEngine.Modelo.IModelo,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3,PloobsEngine.Physics.MaterialDescription,BEPUphysics.CollisionShapes.MobileMeshSolidity,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Physics.Bepu.MobileMeshObject" /> class.
            </summary>
      <param name="model">The model.</param>
      <param name="pos">The pos.</param>
      <param name="rotation">The rotation.</param>
      <param name="scale">The scale.</param>
      <param name="materialDescription">The material description.</param>
      <param name="MobileMeshSolidity">The mobile mesh solidity.</param>
      <param name="mass">The mass.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.MobileMeshObject.#ctor(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3,PloobsEngine.Physics.MaterialDescription,BEPUphysics.CollisionShapes.MobileMeshSolidity,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Physics.Bepu.MobileMeshObject" /> class.
            </summary>
      <param name="model">The model.</param>
      <param name="pos">The pos.</param>
      <param name="rotation">The rotation.</param>
      <param name="scale">The scale.</param>
      <param name="materialDescription">The material description.</param>
      <param name="MobileMeshSolidity">The mobile mesh solidity.</param>
      <param name="mass">The mass.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.MobileMeshObject.ExtractData(Microsoft.Xna.Framework.Vector3[]@,System.Int32[]@,PloobsEngine.Modelo.IModelo)">
      <summary>
            Helper to get the vertex and index List from the model.
            </summary>
      <param name="vert">The vert.</param>
      <param name="ind">The ind.</param>
      <param name="model">The model.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.MobileMeshObject.ApplyImpulse(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Cant Aply Impulse on Static Object
            </summary>
      <param name="position">
      </param>
      <param name="force">The force.</param>
    </member>
    <member name="M:PloobsEngine.Physics.Bepu.MobileMeshObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serialization
            </summary>
      <param name="info">The info.</param>
      <param name="context">The context.</param>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.MobileMeshObject.MobileMesh">
      <summary>
            Gets or sets the Mobile mesh.
            </summary>
      <value>
            The MObile mesh.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.MobileMeshObject.PhysicObjectTypes">
      <summary>
            Gets the physic object type.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.MobileMeshObject.Position">
      <summary>
            Gets or sets the position.
            </summary>
      <value>
            The position.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.MobileMeshObject.Scale">
      <summary>
            Gets or sets the scale.
            </summary>
      <value>
            The scale.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.MobileMeshObject.Rotation">
      <summary>
            Gets or sets the rotation.
            </summary>
      <value>
            The rotation.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.MobileMeshObject.FaceVector">
      <summary>
            Vector pointing to the front
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.MobileMeshObject.WorldMatrix">
      <summary>
            Gets the world matrix.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.MobileMeshObject.AngularVelocity">
      <summary>
            Gets or sets the angular velocity.
            </summary>
      <value>
            The angular velocity.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.MobileMeshObject.Velocity">
      <summary>
            Gets velocity. Always Zero cause this object is static
            </summary>
      <value>
            The velocity.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.MobileMeshObject.isMotionLess">
      <summary>
            This object is always motion less
            </summary>
      <value>
        <c>true</c> if this instance is motion less; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.MobileMeshObject.ObjectOwner">
      <summary>
            Gets or sets the IObject owner.
            </summary>
      <value>
            The IObject owner.
            </value>
    </member>
    <member name="P:PloobsEngine.Physics.Bepu.MobileMeshObject.BoundingBox">
      <summary>
            Gets the bounding box IN WORLD COORDINATES
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.VerticalMotionConstraint">
      <summary>
            Keeps a character glued to the ground, if possible.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.VerticalMotionConstraint.#ctor(BEPUphysicsDemos.AlternateMovement.Character.CharacterController)">
      <summary>
            Constructs a new vertical motion constraint.
            </summary>
      <param name="characterController">Character governed by the constraint.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.VerticalMotionConstraint.UpdateSolverActivity">
      <summary>
            Updates the activity state of the constraint.
            Called automatically by the solver.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.VerticalMotionConstraint.Update(System.Single)">
      <summary>
            Performs any per-frame computation needed by the constraint.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.VerticalMotionConstraint.ExclusiveUpdate">
      <summary>
            Performs any per-frame computations needed by the constraint that require exclusive access to the involved entities.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.VerticalMotionConstraint.SolveIteration">
      <summary>
            Computes a solution to the constraint.
            </summary>
      <returns>Magnitude of the applied impulse.</returns>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.VerticalMotionConstraint.SupportData">
      <summary>
            Gets or sets the support data used by the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.VerticalMotionConstraint.MaximumGlueForce">
      <summary>
            Gets or sets the maximum force that the constraint will apply in attempting to keep the character stuck to the ground.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.VerticalMotionConstraint.SupportForceFactor">
      <summary>
            Gets or sets the scaling factor of forces applied to the supporting object if it is a dynamic entity.
            Low values (below 1) reduce the amount of motion imparted to the support object; it acts 'heavier' as far as horizontal motion is concerned.
            High values (above 1) increase the force applied to support objects, making them appear lighter.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.VerticalMotionConstraint.EffectiveMass">
      <summary>
            Gets the effective mass felt by the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.VerticalMotionConstraint.RelativeVelocity">
      <summary>
            Gets the relative velocity between the character and its support along the support normal.
            </summary>
    </member>
    <member name="T:PloobsEngine.Modelo2D.ModelType">
      <summary>
            Type of the model
            </summary>
    </member>
    <member name="T:PloobsEngine.Material.ForwardTransparenteShader">
      <summary>
            Forward Material
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.ForwardTransparenteShader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Material.ForwardTransparenteShader" /> class.
            Use Texture Alpha
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.ForwardTransparenteShader.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Material.ForwardTransparenteShader" /> class.
            Use custom alpha
            </summary>
      <param name="transparencyLevel">The transparency level.</param>
    </member>
    <member name="P:PloobsEngine.Material.ForwardTransparenteShader.CullModeToUse">
      <summary>
            Default None
            </summary>
    </member>
    <member name="P:PloobsEngine.Material.ForwardTransparenteShader.TransparencyLevel">
      <summary>
            Between 0 and 1 
            If not setted, the texture alpha will be used instead
            </summary>
    </member>
    <member name="T:PloobsEngine.Material2D.Basic2DTextureMaterial">
      <summary>
            Basic 2D Material
            </summary>
    </member>
    <member name="P:PloobsEngine.Material2D.Basic2DTextureMaterial.CastShadow">
      <summary>
            Gets or sets a value indicating whether [cast shadow].
            Default true
            </summary>
      <value>
        <c>true</c> if [cast shadow]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PloobsEngine.Material2D.IMaterialProcessor">
      <summary>
            Interface for material processor
            Each material must have a processor
            Processors coordinate how the materials should be draw
            </summary>
    </member>
    <member name="M:PloobsEngine.Material2D.IMaterialProcessor.ProcessLightDraw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.SceneControl._2DScene.ICamera2D,System.Collections.Generic.List{PloobsEngine.SceneControl._2DScene.I2DObject},Microsoft.Xna.Framework.Color,PloobsEngine.Light2D.Light2D)">
      <summary>
            Processes the light draw.
            </summary>
      <param name="gameTime">The game time.</param>
      <param name="render">The render.</param>
      <param name="camera">The camera.</param>
      <param name="objects">The objects.</param>
      <param name="color">The color.</param>
      <param name="light">The light.</param>
    </member>
    <member name="M:PloobsEngine.Material2D.IMaterialProcessor.ProcessDraw(System.Boolean,Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.SceneControl._2DScene.ICamera2D,System.Collections.Generic.List{PloobsEngine.SceneControl._2DScene.I2DObject})">
      <summary>
            Processes the draw.
            </summary>
      <param name="uselayer">if set to <c>true</c> [uselayer].</param>
      <param name="gameTime">The game time.</param>
      <param name="render">The render.</param>
      <param name="camera">The camera.</param>
      <param name="objects">The objects.</param>
    </member>
    <member name="M:PloobsEngine.Material2D.IMaterialProcessor.ProcessPreDraw(System.Boolean,Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.SceneControl._2DScene.ICamera2D,PloobsEngine.SceneControl._2DScene.I2DWorld,System.Collections.Generic.List{PloobsEngine.SceneControl._2DScene.I2DObject})">
      <summary>
            Processes the pre draw.
            </summary>
      <param name="uselayer">if set to <c>true</c> [uselayer].</param>
      <param name="gameTime">The game time.</param>
      <param name="render">The render.</param>
      <param name="camera">The camera.</param>
      <param name="world">The world.</param>
      <param name="objects">The objects.</param>
    </member>
    <member name="T:PloobsEngine.Material2D.Basic2DTextureMaterialProcessor">
      <summary>
            Basic Processor for the 2D basic Material
            </summary>
    </member>
    <member name="M:PloobsEngine.Material2D.Basic2DTextureMaterialProcessor.ProcessDraw(System.Boolean,Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.SceneControl._2DScene.ICamera2D,System.Collections.Generic.List{PloobsEngine.SceneControl._2DScene.I2DObject})">
      <summary>
            Processes the draw.
            </summary>
      <param name="uselayer">if set to <c>true</c> [uselayer].</param>
      <param name="gameTime">The game time.</param>
      <param name="render">The render.</param>
      <param name="camera">The camera.</param>
      <param name="objects">The objects.</param>
    </member>
    <member name="M:PloobsEngine.Material2D.Basic2DTextureMaterialProcessor.ProcessPreDraw(System.Boolean,Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.SceneControl._2DScene.ICamera2D,PloobsEngine.SceneControl._2DScene.I2DWorld,System.Collections.Generic.List{PloobsEngine.SceneControl._2DScene.I2DObject})">
      <summary>
            Processes the pre draw.
            </summary>
      <param name="uselayer">if set to <c>true</c> [uselayer].</param>
      <param name="gameTime">The game time.</param>
      <param name="render">The render.</param>
      <param name="camera">The camera.</param>
      <param name="world">The world.</param>
      <param name="objects">The objects.</param>
    </member>
    <member name="M:PloobsEngine.Material2D.Basic2DTextureMaterialProcessor.ProcessLightDraw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.SceneControl._2DScene.ICamera2D,System.Collections.Generic.List{PloobsEngine.SceneControl._2DScene.I2DObject},Microsoft.Xna.Framework.Color,PloobsEngine.Light2D.Light2D)">
      <summary>
            Processes the light draw.
            </summary>
      <param name="gameTime">The game time.</param>
      <param name="render">The render.</param>
      <param name="camera">The camera.</param>
      <param name="objects">The objects.</param>
      <param name="color">The color.</param>
      <param name="light">The light.</param>
    </member>
    <member name="T:PloobsEngine.Loader.WorldLoader">
      <summary>
            Used to build the world from a loaded source (like our 3ds exporter script )
            </summary>
    </member>
    <member name="F:PloobsEngine.Loader.WorldLoader.objects">
      <summary>
            Used to retrieve objects
            </summary>
    </member>
    <member name="T:PloobsEngine.Features.TaskCommand">
      <summary>
            Command that encapsulates a task
            </summary>
    </member>
    <member name="M:PloobsEngine.Features.TaskCommand.#ctor(PloobsEngine.Features.ITask)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Features.TaskCommand" /> class.
            </summary>
      <param name="task">The task.</param>
    </member>
    <member name="M:PloobsEngine.Features.TaskCommand.execute">
      <summary>
            Executes the command Call.
            </summary>
    </member>
    <member name="M:PloobsEngine.Features.TaskCommand.setTarget(System.Object)">
      <summary>
            Sets the command target.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="P:PloobsEngine.Features.TaskCommand.TargetName">
      <summary>
            Gets the name of the command target.
            </summary>
      <value>
            The name of the target.
            </value>
    </member>
    <member name="T:PloobsEngine.Features.DebugDraw.DebugLine">
      <summary>
            Debig Line
            </summary>
    </member>
    <member name="F:PloobsEngine.Features.DebugDraw.DebugLine.effect">
      <summary>
            The basic effect used to draw boxes.
            </summary>
    </member>
    <member name="F:PloobsEngine.Features.DebugDraw.DebugLine.StartPoint">
      <summary>
            Startpoint
            </summary>
    </member>
    <member name="F:PloobsEngine.Features.DebugDraw.DebugLine.EndPoint">
      <summary>
            Endpoint
            </summary>
    </member>
    <member name="F:PloobsEngine.Features.DebugDraw.DebugLine.Color">
      <summary>
            Color
            </summary>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugLine.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
      <summary>
            Creates a new box.
            Visible by default
            </summary>
      <param name="StartPoint">The start point.</param>
      <param name="EndPoint">The end point.</param>
      <param name="color">The box's color.</param>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugLine.Initialize(PloobsEngine.Engine.GraphicFactory,PloobsEngine.Engine.GraphicInfo)">
      <summary>
            Initializes
            </summary>
      <param name="factory">The factory.</param>
      <param name="ginfo">The ginfo.</param>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugLine.Draw(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>
            Draws the box.
            </summary>
      <param name="render">The render.</param>
      <param name="view">The viewing matrix.</param>
      <param name="projection">The projection matrix.</param>
    </member>
    <member name="T:PloobsEngine.Audio.LocalMediaAudioPlayer">
      <summary>
            MusicPlayer
            IMPORTANT
            On Windows, MediaLibrary can find songs only if the Windows Media Player previously found songs on the system.
            This means that Windows Media Player first must search the system for music before any songs can be accessed through MediaLibrary.
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.LocalMediaAudioPlayer.StartQueue">
      <summary>
            Starts the queue of songs
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.LocalMediaAudioPlayer.PlayAlbum(Microsoft.Xna.Framework.Media.Album)">
      <summary>
            Plays the album.
            </summary>
      <param name="album">The album.</param>
    </member>
    <member name="M:PloobsEngine.Audio.LocalMediaAudioPlayer.PlaySpecificMusic(System.String)">
      <summary>
            Plays the specific music.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:PloobsEngine.Audio.LocalMediaAudioPlayer.AdvanceOneMusicInQueue">
      <summary>
            Advances one music in queue.
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.LocalMediaAudioPlayer.BackOneMusicInQueue">
      <summary>
            Backs one music in queue.
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.LocalMediaAudioPlayer.CurrentMusicState">
      <summary>
            Current state of the current music.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Audio.LocalMediaAudioPlayer.PauseCurrentMusic">
      <summary>
            Pauses the current music.
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.LocalMediaAudioPlayer.ResumeCurrentMusic">
      <summary>
            Resumes the current music.
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.LocalMediaAudioPlayer.StopCurrentMusic">
      <summary>
            Stops the current music.
            </summary>
    </member>
    <member name="P:PloobsEngine.Audio.LocalMediaAudioPlayer.Loop">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:PloobsEngine.Audio.LocalMediaAudioPlayer" /> is loop.
            </summary>
      <value>
        <c>true</c> if loop; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.Audio.LocalMediaAudioPlayer.SongCollection">
      <summary>
            Gets the song collection.
            </summary>
    </member>
    <member name="T:PloobsEngine.Audio.Static2DSound">
      <summary>
            Static 2D sound
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.NeuralNetwork.NeuralNetwork">
      <summary>
            Implementation of artificial neural network
            </summary>
      <remarks>
        <code>
            
            
                                   o
                                   o  o  o  
               INPUT VECTOR =====&gt; o  o  o =====&gt; OUTPUT VECTOR
                                   o  o  o  
                                   o
                                 NERON LAYERS
            
            </code> 
            Each neuron of the layer N-1 is conected to 
            every neuron of the layer N.
            At the begining the neural network needs to
            learn using couples (INPUT, EXPECTED OUTPUT)
            and a learnig algorithm.
            </remarks>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.layers">
      <summary>
            Layers of neuron in the network
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.ni">
      <summary>
            Number of inputs of the network
            (number of inputs of the first layer)
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.la">
      <summary>
            Learning algorithm used by the network
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.#ctor(System.Int32,System.Int32[],PloobsEngine.IA.NeuralNetwork.ActivationFunction,PloobsEngine.IA.NeuralNetwork.LearningAlgorithm)">
      <summary>
            Create a new neural network
            with "inputs" inputs and size of "layers"
            layers of neurones.
            The layer i is made with layers_desc[i] neurones.
            The activation function of each neuron is set to n_act.
            The lerning algorithm is set to learn.
            </summary>
      <param name="inputs">Number of inputs of the network</param>
      <param name="layers_desc">Number of neurons for each layer of the network</param>
      <param name="n_act">Activation function for each neuron in the network</param>
      <param name="learn">Learning algorithm to be used by the neural network</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.#ctor(System.Int32,System.Int32[],PloobsEngine.IA.NeuralNetwork.ActivationFunction)">
      <summary>
            Create a new neural network
            with "inputs" inputs and size of "layers"
            layers of neurones.
            The layer i is made with layers_desc[i] neurones.
            The activation function of each neuron is set to n_act.
            The lerning algorithm is set to default (Back Propagation).
            </summary>
      <param name="inputs">Number of inputs of the network</param>
      <param name="layers_desc">Number of neurons for each layer of the network</param>
      <param name="n_act">Activation function for each neuron in the network</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.#ctor(System.Int32,System.Int32[])">
      <summary>
            Create a new neural network
            with "inputs" inputs and size of "layers"
            layers of neurones.
            The layer i is made with layers_desc[i] neurones.
            The activation function of each neuron is set to default (Sigmoid with beta = 1).
            The lerning algorithm is set to default (Back Propagation).
            </summary>
      <param name="inputs">Number of inputs of the network</param>
      <param name="layers_desc">Number of neurons for each layer of the network</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.randomizeWeight">
      <summary>
            Randomize all neurones weights between -0.5 and 0.5
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.randomizeThreshold">
      <summary>
            Randomize all neurones threholds between 0 and 1
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.randomizeAll">
      <summary>
            Randomize all neurones threholds between 0 and 1
            and weights between -0.5 and 0.5
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.setActivationFunction(PloobsEngine.IA.NeuralNetwork.ActivationFunction)">
      <summary>
            Set an activation function to all neurons of the network
            </summary>
      <param name="f">An activation function</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.setRandomizationInterval(System.Single,System.Single)">
      <summary>
            Set the interval in which weights and threshold will be randomized
            </summary>
      <param name="min">
      </param>
      <param name="max">
      </param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.Output(System.Single[])">
      <summary>
            Compute the value for the specified input
            </summary>
      <param name="input">the input vector</param>
      <returns>the output vector of the neuronal network</returns>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.save(System.String)">
      <summary>
            Save the Neural Network in a binary formated file
            </summary>
      <param name="file">the target file path</param>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.load(System.String)">
      <summary>
            Load a neural network from a binary formated file
            </summary>
      <param name="file">the neural network file file</param>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.N_Inputs">
      <summary>
            Get number of inputs of the network
            (network input vector size)
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.N_Outputs">
      <summary>
            Get number of output of the network
            (network output vector size)
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.N_Layers">
      <summary>
            Get number of inputs of the network
            (network input vector size)
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.LearningAlg">
      <summary>
            Get or set network learning algorithm
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.NeuralNetwork.Item(System.Int32)">
      <summary>
            Get the n th Layer of the network 
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.NeuralNetwork.ActivationFunction">
      <summary>
            Interface of the activation function of a neuron.
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.ActivationFunction.Output(System.Single)">
      <summary>
            Compute function value
            </summary>
      <param name="x">x</param>
      <returns>f(x)</returns>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.ActivationFunction.OutputPrime(System.Single)">
      <summary>
            Compute the diff of the function
            </summary>
      <param name="x">x</param>
      <returns>f'(x)</returns>
    </member>
    <member name="T:PloobsEngine.IA.NeuralNetwork.SigmoidActivationFunction">
      <summary>
            The sigmoid activation function
            </summary>
      <remarks>
            Here is the definition of the sigmoid activation function
            <code>
                           1
            f(x) = -----------------   beta &gt; 0
                    1 + e^(-beta*x)
            
            f'(x) = beta * f(x) * ( 1 - f(x) )   
            </code></remarks>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.SigmoidActivationFunction.beta">
      <summary>
            The beta parameter of the sigmoid
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.SigmoidActivationFunction.Output(System.Single)">
      <summary>
        <code>
                            1
            f(x) = -----------------   beta &gt; 0
                    1 + e^(-beta*x)
            </code>
      </summary>
      <param name="x">x</param>
      <returns>f(x)</returns>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.SigmoidActivationFunction.OutputPrime(System.Single)">
      <summary>
        <code>
            f'(x) = beta * f(x) * ( 1 - f(x) )
            </code>
      </summary>
      <param name="x">x</param>
      <returns>f'(x)</returns>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.SigmoidActivationFunction.Beta">
      <summary>
            Get or set the beta parameter of the function
            ( beta must be positive )
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.SigmoidActivationFunction.Name">
      <summary>
            Get the name of the activation function
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.NeuralNetwork.LinearActivationFunction">
      <summary>
            The linear activation function
            </summary>
      <remarks>
        <code>
                   |1            if x &gt; 0.5/A
            f(x) = |A * x + 0.5  if 0.5/A &gt; x &gt; -0.5/A
                   |0            if -0.5/A &gt; x
            
                        A &gt; 0      
            </code>
      </remarks>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.LinearActivationFunction.a">
      <summary>
            The A parameter of the linear function
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.LinearActivationFunction.threshold">
      <summary>
            Usefull to compute function value
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.LinearActivationFunction.Output(System.Single)">
      <summary>
             Get the activation function value
            </summary>
      <param name="x">x</param>
      <returns>f(x)</returns>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.LinearActivationFunction.OutputPrime(System.Single)">
      <summary>
            Get the diff function value
            </summary>
      <param name="x">x</param>
      <returns>f'(x)</returns>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.LinearActivationFunction.A">
      <summary>
            Get or set the A parameter of the function
            ( A must be positive )
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.LinearActivationFunction.Name">
      <summary>
            Get the name of the activation function
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.NeuralNetwork.HeavisideActivationFunction">
      <summary>
            The heaviside activation function
            </summary>
      <remarks>
        <code>
            f(x) = 0 if 0&gt;x
            f(x) = 1 if x&gt;0
            </code>
      </remarks>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.HeavisideActivationFunction.Output(System.Single)">
      <summary>
             Get the heaviside function value
            </summary>
      <param name="x">x</param>
      <returns>f(x)</returns>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.HeavisideActivationFunction.OutputPrime(System.Single)">
      <summary>
            Get the derivative function value
            Simulate an impulse at origin...
            </summary>
      <param name="x">x</param>
      <returns>f'(x)</returns>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.HeavisideActivationFunction.Name">
      <summary>
            Get the name of the activation function
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.NeuralNetwork.GaussianActivationFunction">
      <summary>
            The gaussian activation function
            </summary>
      <remarks>
        <code>
            
                             1                -(x-mu)^2 / (2 * sigma^2)
            f(x)  =  -------------------- *  e
                     sqrt(2 * pi * sigma)
            
            f'(x)  =  y(x) * -2*K*(x - mu) 
            </code>
            To implement a more efficient computation :
            <code>
            C = 1/sqrt(2 * pi * sigma)
            K = 1/(2 * sigma^2)
            </code></remarks>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.GaussianActivationFunction.sigma">
      <summary>
            The sigma parameter of the gaussian
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.GaussianActivationFunction.mu">
      <summary>
            The mu parameter of the gaussian
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.GaussianActivationFunction.C">
      <summary>
            C parameter (usfull for computing function value)
            </summary>
    </member>
    <member name="F:PloobsEngine.IA.NeuralNetwork.GaussianActivationFunction.K">
      <summary>
            C parameter (usfull for computing function value)
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GaussianActivationFunction.computeCK">
      <summary>
            Compute C and K parameters from sigma
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GaussianActivationFunction.#ctor">
      <summary>
            GaussianActivationFunction constructor
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GaussianActivationFunction.Output(System.Single)">
      <summary>
            Compute the value of the gaussian function
            <param name="x">x</param><returns>f(x)</returns></summary>
    </member>
    <member name="M:PloobsEngine.IA.NeuralNetwork.GaussianActivationFunction.OutputPrime(System.Single)">
      <summary>
            compute the derivative value of function
            </summary>
      <param name="x">x</param>
      <returns>f'(x)</returns>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GaussianActivationFunction.Sigma">
      <summary>
            Get or set the sigma parameter of the function
            (sigma must be positive)
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GaussianActivationFunction.Mu">
      <summary>
            Get or set the mu parameter of the function
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.NeuralNetwork.GaussianActivationFunction.Name">
      <summary>
            Get the name of the activation function
            </summary>
    </member>
    <member name="T:BehaviorTrees.Watch`1">
      <summary>
            Watch decorator is a node which executes its subnode unless some condition is met.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.Watch`1.#ctor(BehaviorTrees.ConditionDelegate{`0},BehaviorTrees.Node{`0})">
      <summary>
            Instantiates watch decorator with a given condition
            </summary>
      <param name="condition">
      </param>
    </member>
    <member name="M:BehaviorTrees.Watch`1.Evaluate(`0)">
      <summary>
            Checks the condition, and if it doesn't met then executes subnode, otherwise
            force success.
            </summary>
      <param name="entity">
      </param>
      <param name="gameTime">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BehaviorTrees.WatchTask`1">
      <summary>
            Task responsible for running Watch node.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.WatchTask`1.Execute(`0,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Checks the condition, and if it doesn't met then executes subnode's task, otherwise
            force success.
            </summary>
      <param name="entity">
      </param>
      <param name="gameTime">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.SerializerHelper">
      <summary>
            Helper functions to serialize and deserialize XML
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.ChangeDecimalSymbolToPoint">
      <summary>
            Sets the number format.
            MUST BE CALLED ONCE IF YOUR SYSTEM USES "," for decimal separator
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.ChangeDecimalSymbolToSystemDefault">
      <summary>
            Changes the decimal symbol to system default.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.SerializeVector3(Microsoft.Xna.Framework.Vector3,System.String,System.Xml.XmlTextWriter)">
      <summary>
            Serializa a vector
            </summary>
      <param name="vector">vetor</param>
      <param name="fieldName">Field name</param>
      <param name="textWriter">textwriter</param>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.SerializeVector3(System.Nullable{Microsoft.Xna.Framework.Vector3},System.String,System.Xml.XmlTextWriter)">
      <summary>
            Serializes the vector3.
            </summary>
      <param name="vector">The vector.</param>
      <param name="fieldName">Name of the field.</param>
      <param name="textWriter">The text writer.</param>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.SerializeQuaternion(System.Nullable{Microsoft.Xna.Framework.Quaternion},System.String,System.Xml.XmlTextWriter)">
      <summary>
            Serializes the quaternion.
            </summary>
      <param name="quaternion">The quaternion.</param>
      <param name="fieldName">Name of the field.</param>
      <param name="textWriter">The text writer.</param>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.SerializeVector2(Microsoft.Xna.Framework.Vector2,System.String,System.Xml.XmlTextWriter)">
      <summary>
            Serializes the vector2.
            </summary>
      <param name="vector">The vector.</param>
      <param name="fieldName">Name of the field.</param>
      <param name="textWriter">The text writer.</param>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.SerializeNewElement(System.String,System.Xml.XmlTextWriter)">
      <summary>
            Serializes the new element.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="textWriter">The text writer.</param>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.SerializeEndElement(System.Xml.XmlTextWriter)">
      <summary>
            Serializes the end element.
            </summary>
      <param name="textWriter">The text writer.</param>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.SerializeBaseType``1(``0,System.String,System.Xml.XmlTextWriter)">
      <summary>
            Serializes the type of the base.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="param">The param.</param>
      <param name="fieldName">Name of the field.</param>
      <param name="textWriter">The text writer.</param>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.SerializeAttributeBaseType``1(``0,System.String,System.Xml.XmlTextWriter)">
      <summary>
            Serializes the type of the attribute base.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="param">The param.</param>
      <param name="fieldName">Name of the field.</param>
      <param name="textWriter">The text writer.</param>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.SerializeListbaseType``1(System.Collections.Generic.IList{``0},System.String,System.Xml.XmlTextWriter)">
      <summary>
            Serializes the type of the listbase.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="list">The list.</param>
      <param name="fieldName">Name of the field.</param>
      <param name="textWriter">The text writer.</param>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.SerializeDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.String,System.Xml.XmlTextWriter)">
      <summary>
            Serializes the dictionary.
            </summary>
      <typeparam name="X">
      </typeparam>
      <typeparam name="Y">
      </typeparam>
      <param name="dic">The dic.</param>
      <param name="fieldName">Name of the field.</param>
      <param name="textWriter">The text writer.</param>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.DeSerializeDictionary``2(System.String,System.Xml.XmlNode)">
      <summary>
            Des the serialize dictionary.
            </summary>
      <typeparam name="X">
      </typeparam>
      <typeparam name="Y">
      </typeparam>
      <param name="fieldName">Name of the field.</param>
      <param name="node">The node.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.DeserializeSerializeListbaseType``1(System.String,System.Xml.XmlNode)">
      <summary>
            Deserializes the type of the serialize listbase.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="fieldName">Name of the field.</param>
      <param name="node">The node.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.SerializeMatrix(Microsoft.Xna.Framework.Matrix,System.String,System.Xml.XmlTextWriter)">
      <summary>
            Serializes the matrix.
            </summary>
      <param name="matrix">The matrix.</param>
      <param name="fieldName">Name of the field.</param>
      <param name="textWriter">The text writer.</param>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.DeserializeVector3Nullable(System.String,System.Xml.XmlNode)">
      <summary>
            Deserializes the vector3 nullable.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="node">The node.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.DeserializeVector3(System.String,System.Xml.XmlNode)">
      <summary>
            Deserializes the vector3.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="node">The node.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.DeserializeVector2(System.String,System.Xml.XmlNode)">
      <summary>
            Deserializes the vector2.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="node">The node.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.DeserializeBaseType``1(System.String,System.Xml.XmlNode)">
      <summary>
            Parses a basic Type
            Very Deep Dark Magic
            </summary>
      <typeparam name="T">basic type</typeparam>
      <param name="fieldName">Name of the field.</param>
      <param name="node">The node.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.DeserializeAttributeBaseType``1(System.String,System.Xml.XmlNode)">
      <summary>
            Deserializes attributes .
            </summary>
      <typeparam name="T">base type</typeparam>
      <param name="fieldName">Name of the field.</param>
      <param name="node">The node.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.SerializerHelper.DeSerializeMatrix(System.String,System.Xml.XmlNode)">
      <summary>
            Desserialize matrix.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="node">The node.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Modelo.OnTextureChange">
      <summary>
            Called when the texture change
            </summary>
      <param name="type">The type.</param>
      <param name="tex">The tex.</param>
    </member>
    <member name="T:PloobsEngine.Modelo.TextureType">
      <summary>
            Textures Types avaliable
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.TextureType.ENVIRONMENT">
      <summary>
            EnvironmentMap
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.TextureType.DIFFUSE">
      <summary>
            Diffuse
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.TextureType.SPECULAR">
      <summary>
            Specular
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.TextureType.BUMP">
      <summary>
            Bump
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.TextureType.GLOW">
      <summary>
            GLow
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.TextureType.PARALAX">
      <summary>
            Paralax
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.TextureType.RELIEF">
      <summary>
            Reliefe Mapping (Not used yet)
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.TextureType.MULTITEX1">
      <summary>
            Multitex used in Terrain
            can be used anywhere
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.TextureType.MULTITEX2">
      <summary>
            Multitex used in terrain
            can be used anywhere
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.TextureType.MULTITEX3">
      <summary>
            Multitex used in terrain
            can be used anywhere
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.TextureType.MULTITEX4">
      <summary>
            Multitex used in terrain
            can be used anywhere
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.TextureType.HEIGHTMAP">
      <summary>
            HEIGHTMAP, can used anywhere
            </summary>
    </member>
    <member name="T:PloobsEngine.Input.SimpleConcreteMousePositionInputPlayable">
      <summary>
            InputPlaybleMousePosition Implementation for mouse position
            </summary>
    </member>
    <member name="M:PloobsEngine.Input.SimpleConcreteMousePositionInputPlayable.#ctor(PloobsEngine.Input.MouseStateChangeComplete,PloobsEngine.Input.InputMask,PloobsEngine.Input.EntityType)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Input.SimpleConcreteMousePositionInputPlayable" /> class.
            </summary>
      <param name="mst">The MST.</param>
      <param name="mask">The mask.</param>
      <param name="et">The et.</param>
    </member>
    <member name="T:PloobsEngine.Engine.Logger.ILogger">
      <summary>
            Interface to define a Ploobs Logger
            </summary>
    </member>
    <member name="M:PloobsEngine.Engine.Logger.ILogger.Log(System.String,PloobsEngine.Engine.Logger.LogLevel)">
      <summary>
            Logs the specified message.
            </summary>
      <param name="Message">The message.</param>
      <param name="logLevel">The log level.</param>
    </member>
    <member name="T:PloobsEngine.Engine.Logger.LogLevel">
      <summary>
            Log Levels
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.Logger.LogLevel.FatalError">
      <summary>
            WHen a Fatal error occurrs, Normally the application also throw an exception when this happen
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.Logger.LogLevel.RecoverableError">
      <summary>
            Errors that the engine can handle, but the user should correct
            </summary>
    </member>
    <member name="F:PloobsEngine.Engine.Logger.LogLevel.Warning">
      <summary>
            When something happens that can be an error
            </summary>
    </member>
    <member name="T:PloobsEngine.Engine.Logger.ActiveLogger">
      <summary>
            Static Class responsible for Ploobs logging 
            </summary>
    </member>
    <member name="M:PloobsEngine.Engine.Logger.ActiveLogger.LogMessage(System.String,PloobsEngine.Engine.Logger.LogLevel)">
      <summary>
            Logs a message.
            In Release, warning messages are not logged
            </summary>
      <param name="message">The message.</param>
      <param name="level">The level.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.I2DScene">
      <summary>
            Screen for 2D scenes
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DScene.AfterLoadContent(PloobsEngine.SceneControl.IContentManager,PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Function called After all the stuffs LoadContent is called
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DScene.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Update the Screen
            </summary>
      <param name="gameTime">
      </param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DScene.Draw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            This is called when the screen should draw itself.
            </summary>
      <param name="gameTime">
      </param>
      <param name="render">
      </param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DScene.LoadContent(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.IContentManager)">
      <summary>
            Load content for the screen.        
            </summary>
      <param name="GraphicInfo">
      </param>
      <param name="factory">
      </param>
      <param name="contentManager">
      </param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DScene.InitScreen(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.EngineStuff)">
      <summary>
            Init Screen
            </summary>
      <param name="GraphicInfo">The graphic info.</param>
      <param name="engine">
      </param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DScene.SetWorldAndRenderTechnich(PloobsEngine.SceneControl._2DScene.RenderTechnich2D@,PloobsEngine.SceneControl._2DScene.I2DWorld@)">
      <summary>
            Sets the world and render technich.
            </summary>
      <param name="renderTech">The render tech.</param>
      <param name="world">The world.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DScene.CleanUp(PloobsEngine.Engine.EngineStuff)">
      <summary>
            Cleans up resources that are not exclusive to this screen
            </summary>
      <param name="engine">
      </param>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DScene.RenderTechnic">
      <summary>
            Gets the render technics.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DScene.World">
      <summary>
            Gets or sets the world instance.
            </summary>
      <value>
            The world.
            </value>
    </member>
    <member name="F:Bnoerj.AI.Steering.SteerLibrary.hisPositionAtNearestApproach">
            XXX globals only for the sake of graphical annotation
        </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.SphereCharacter.VerticalMotionConstraint">
      <summary>
            Keeps a character glued to the ground, if possible.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.VerticalMotionConstraint.#ctor(BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController)">
      <summary>
            Constructs a new vertical motion constraint.
            </summary>
      <param name="characterController">Character governed by the constraint.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.VerticalMotionConstraint.UpdateSolverActivity">
      <summary>
            Updates the activity state of the constraint.
            Called automatically by the solver.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.VerticalMotionConstraint.Update(System.Single)">
      <summary>
            Performs any per-frame computation needed by the constraint.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.VerticalMotionConstraint.ExclusiveUpdate">
      <summary>
            Performs any per-frame computations needed by the constraint that require exclusive access to the involved entities.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.VerticalMotionConstraint.SolveIteration">
      <summary>
            Computes a solution to the constraint.
            </summary>
      <returns>Magnitude of the applied impulse.</returns>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.VerticalMotionConstraint.SupportData">
      <summary>
            Gets or sets the support data used by the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.VerticalMotionConstraint.MaximumGlueForce">
      <summary>
            Gets or sets the maximum force that the constraint will apply in attempting to keep the character stuck to the ground.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.VerticalMotionConstraint.SupportForceFactor">
      <summary>
            Gets or sets the scaling factor of forces applied to the supporting object if it is a dynamic entity.
            Low values (below 1) reduce the amount of motion imparted to the support object; it acts 'heavier' as far as horizontal motion is concerned.
            High values (above 1) increase the force applied to support objects, making them appear lighter.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.VerticalMotionConstraint.EffectiveMass">
      <summary>
            Gets the effective mass felt by the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.VerticalMotionConstraint.RelativeVelocity">
      <summary>
            Gets the relative velocity between the character and its support along the support normal.
            </summary>
    </member>
    <member name="M:PloobsEngine.Physic.PhysicObjects.BepuObject.GravitationalFieldObject.#ctor(BEPUphysics.UpdateableSystems.ForceFields.ForceFieldShape,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,PloobsEngine.Physics.BepuPhysicWorld)">
      <summary>
            Creates a gravitational field.
            </summary>
      <param name="shape">Shape representing the volume of the force field.</param>
      <param name="origin">Location that entities will be pushed toward.</param>
      <param name="multiplier">Represents the gravitational constant of the field times the effective mass at the center of the field.</param>
      <param name="maxForce">Maximum force the field can apply.</param>
      <param name="physicWorld">The physic world.</param>
    </member>
    <member name="M:PloobsEngine.Physic.PhysicObjects.BepuObject.GravitationalFieldObject.CalculateImpulse(BEPUphysics.Entities.Entity,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Calculates the gravitational force to apply to the entity.
            </summary>
      <param name="e">Target of the impulse.</param>
      <param name="dt">Time since the last frame in simulation seconds.</param>
      <param name="impulse">Force to apply at the given position.</param>
    </member>
    <member name="P:PloobsEngine.Physic.PhysicObjects.BepuObject.GravitationalFieldObject.Multiplier">
      <summary>
            Gets or sets the gravitational constant of the field times the effective mass at the center of the field.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physic.PhysicObjects.BepuObject.GravitationalFieldObject.MaxForce">
      <summary>
            Gets or sets the maximum force that can be applied by the field.
            </summary>
    </member>
    <member name="P:PloobsEngine.Physic.PhysicObjects.BepuObject.GravitationalFieldObject.Origin">
      <summary>
            Gets or sets the center of the field that entities will be pushed toward.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.DisplaySphere">
      <summary>
            Helper class that can create shape mesh data.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.DisplaySphere.NumSides">
      <summary>
            Number of sides to build geometry with.
            </summary>
    </member>
    <member name="T:PloobsEngine.Material.ForwardGenericBuildInShader`1">
      <summary>    
            Wrapper to xna effects
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.ForwardGenericBuildInShader`1.Initialize(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.IObject)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="ginfo">
      </param>
      <param name="factory">
      </param>
      <param name="obj">
      </param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardGenericBuildInShader`1.Draw(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.SceneControl.RenderHelper,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight})">
      <summary>
            Draw
            </summary>
      <param name="gt">gametime</param>
      <param name="obj">the obj</param>
      <param name="render">The render.</param>
      <param name="cam">The cam.</param>
      <param name="lights">
      </param>
    </member>
    <member name="P:PloobsEngine.Material.ForwardGenericBuildInShader`1.MaterialType">
      <summary>
            Gets the type of the material.
            </summary>
      <value>
            The type of the material.
            </value>
    </member>
    <member name="T:PloobsEngine.Light.PointLightPE">
      <summary>
            Deferred Point Light
            </summary>
    </member>
    <member name="M:PloobsEngine.Light.PointLightPE.#ctor">
      <summary>
            Serialization 
            </summary>
    </member>
    <member name="M:PloobsEngine.Light.PointLightPE.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,System.Single,System.Single)">
      <summary>
            Point Light
            </summary>
      <param name="lightPosition">Position in World</param>
      <param name="color">Color</param>
      <param name="lightRadius">Radius</param>
      <param name="lightIntensity">Intensity</param>
    </member>
    <member name="P:PloobsEngine.Light.PointLightPE.LightPosition">
      <summary>
            Gets or sets the light position.
            </summary>
      <value>
            The light position.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.PointLightPE.LightRadius">
      <summary>
            Gets or sets the light radius.
            </summary>
      <value>
            The light radius.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.PointLightPE.LightIntensity">
      <summary>
            Gets or sets the light intensity.
            </summary>
      <value>
            The light intensity.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.PointLightPE.UsePointLightQuadraticAttenuation">
      <summary>
            Gets or sets a value indicating whether [use point light quadratic attenuation].
            </summary>
      <value>
        <c>true</c> if [use point light quadratic attenuation]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.Light.PointLightPE.LightType">
      <summary>
            Gets the type of the light.
            </summary>
      <value>
            The type of the light.
            </value>
    </member>
    <member name="M:PloobsEngine.Engine.LoadingScreenTask.#ctor(PloobsEngine.SceneControl.IScreen,PloobsEngine.SceneControl.IContentManager,PloobsEngine.Engine.EngineStuff,PloobsEngine.SceneControl.IScreen)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Engine.LoadingScreenTask" /> class.
            </summary>
      <param name="ToLoadScreen">To load screen.</param>
      <param name="contentManager">The content manager.</param>
      <param name="engine">The engine.</param>
      <param name="LoadingScreen">The loading screen.</param>
    </member>
    <member name="M:PloobsEngine.Engine.LoadingScreenTask.Process">
      <summary>
            Processes the task.
            </summary>
    </member>
    <member name="P:PloobsEngine.Engine.LoadingScreenTask.TaskEndType">
      <summary>
            Gets the end type of the task.
            </summary>
      <value>
            The end type of the task.
            </value>
    </member>
    <member name="T:PloobsEngine.Utils.InitConfiguration">
      <summary>
            Global Configurations of the app
            Not used yet
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.InitConfiguration.getConf(System.String)">
      <summary>
            Pega uma configuracao do arquivo de configuracao.
            confs sao do tipo confname = value
            </summary>
      <param name="confName">confname</param>
      <returns>value</returns>
    </member>
    <member name="T:PloobsEngine.Trigger.TriggerEvent">
      <summary>
            Special Event used by triggers
            </summary>
    </member>
    <member name="M:PloobsEngine.Trigger.TriggerEvent.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Trigger.TriggerEvent" /> class.
            </summary>
      <param name="groupName">Name of the group.</param>
      <param name="TriggerName">Name of the trigger.</param>
    </member>
    <member name="M:PloobsEngine.Trigger.TriggerEvent.FireEvent(PloobsEngine.Trigger.ITrigger)">
      <summary>
            Fires the event.
            </summary>
      <param name="trigger">The trigger.</param>
    </member>
    <member name="P:PloobsEngine.Trigger.TriggerEvent.TriggerName">
      <summary>
            Gets or sets the name of the trigger.
            </summary>
      <value>
            The name of the trigger.
            </value>
    </member>
    <member name="P:PloobsEngine.Trigger.TriggerEvent.Code">
      <summary>
            Gets or sets the code.
            </summary>
      <value>
            The code.
            </value>
    </member>
    <member name="T:PloobsEngine.Utils.TextureCreator">
      <summary>
            Create Procedural textures
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.TextureCreator.#ctor(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Utils.TextureCreator" /> class.
            </summary>
      <param name="info">The info.</param>
      <param name="factory">The factory.</param>
    </member>
    <member name="M:PloobsEngine.Utils.TextureCreator.CreateColorTexture(System.Int32,Microsoft.Xna.Framework.Color)">
      <summary>
            Creates the color texture. (one color all texture)
            squared texture
            </summary>
      <param name="size">The size.</param>
      <param name="texCor">The tex cor.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.TextureCreator.CreateColorTexture(System.Int32,System.Int32,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Creates the color texture. (one color all texture)
            rectangular texture
            </summary>
      <param name="sizex">The sizex.</param>
      <param name="sizey">The sizey.</param>
      <param name="texCor">The tex cor.</param>
      <param name="mipmap">if set to <c>true</c> [mipmap].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.TextureCreator.CreateCompleteRandomColorTexture(System.Int32)">
      <summary>
            Creates the complete random color texture.
            squared size
            </summary>
      <param name="size">The size.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.TextureCreator.CreateCompleteRandomColorTexture(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Creates the complete random color texture.
            </summary>
      <param name="sizex">The sizex.</param>
      <param name="sizey">The sizey.</param>
      <param name="mipmap">if set to <c>true</c> [mipmap].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.TextureCreator.CreateBlackAndWhiteRandomTexture(System.Int32)">
      <summary>
            Creates the black and white random texture. like random, but with the
            same color on all rgb channels
            square
            </summary>
      <param name="size">The size.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.TextureCreator.CreateBlackAndWhiteRandomTexture(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Creates the black and white random texture. like random, but with the
            same color on all rgb channels
            </summary>
      <param name="sizex">The sizex.</param>
      <param name="sizey">The sizey.</param>
      <param name="mipmap">if set to <c>true</c> [mipmap].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.TextureCreator.CreatePerlinNoiseTexture(System.Int32,System.Single,System.Single,System.Single,System.Int32)">
      <summary>
            Creates the perlin noise texture.
            squared
            </summary>
      <param name="size">The size.</param>
      <param name="frequencia">The frequencia.</param>
      <param name="amplitude">The amplitude.</param>
      <param name="persistence">The persistence.</param>
      <param name="octave">The octave.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.TextureCreator.CreatePerlinNoiseTexture(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
      <summary>
            Creates the perlin noise texture.
            </summary>
      <param name="sizex">The sizex.</param>
      <param name="sizey">The sizey.</param>
      <param name="frequencia">The frequencia.</param>
      <param name="amplitude">The amplitude.</param>
      <param name="persistence">The persistence.</param>
      <param name="octave">The octave.</param>
      <param name="mipmap">if set to <c>true</c> [mipmap].</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.Calculator">
      <summary>
            Calculator
            (Can use Infix and RPN notation)
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Calculator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Utils.Calculator" /> class.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Calculator.EvaluateInfix(System.String,System.Single@)">
      <summary>
            Evaluate Infix expression
            </summary>
      <param name="s">
      </param>
      <param name="result">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Utils.Calculator.EvaluateRPN(System.String,System.Single@)">
      <summary>
            Evaluate RPN expression
            </summary>
      <param name="s">
      </param>
      <param name="result">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Material.ForwardMaterial">
      <summary>
            Forward Material
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.ForwardMaterial.#ctor(PloobsEngine.Material.IShader)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Material.ForwardMaterial" /> class.
            </summary>
      <param name="shader">The shader.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardMaterial.Initialization(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.IObject)">
      <summary>
            Initializations the specified Material.
            </summary>
      <param name="ginfo">The ginfo.</param>
      <param name="factory">The factory.</param>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardMaterial.PreDrawnPhase(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IWorld,PloobsEngine.SceneControl.IObject,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight},PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Pre drawn Function.
            Called before all the objects are draw
            </summary>
      <param name="gt">The gt.</param>
      <param name="mundo">The mundo.</param>
      <param name="obj">The obj.</param>
      <param name="cam">The cam.</param>
      <param name="lights">The lights.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardMaterial.PosDrawnPhase(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight},PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Pos drawn Function.
            Called after all objects are Draw
            </summary>
      <param name="gt">The gt.</param>
      <param name="obj">The obj.</param>
      <param name="cam">The cam.</param>
      <param name="lights">The lights.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardMaterial.Drawn(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight},PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Normal Drawn Function.
            </summary>
      <param name="gt">The gt.</param>
      <param name="obj">The obj.</param>
      <param name="cam">The cam.</param>
      <param name="lights">The lights.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardMaterial.Update(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.SceneControl.IWorld)">
      <summary>
            Update.
            </summary>
      <param name="gametime">The gametime.</param>
      <param name="obj">The obj.</param>
      <param name="lights">The lights.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardMaterial.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:PloobsEngine.Material.ForwardMaterial.CleanUp(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Cleans up.
            </summary>
      <param name="factory">
      </param>
    </member>
    <member name="P:PloobsEngine.Material.ForwardMaterial.Shader">
      <summary>
            Gets or sets the shadder.
            </summary>
      <value>
            The shadder.
            </value>
    </member>
    <member name="P:PloobsEngine.Material.ForwardMaterial.MaterialType">
      <summary>
            Gets the type of the material.
            </summary>
      <value>
            The type of the material.
            </value>
    </member>
    <member name="P:PloobsEngine.Material.ForwardMaterial.CanCreateShadow">
      <summary>
            Gets or sets a value indicating whether this material is [affected by shadow].
            </summary>
      <value>
        <c>true</c> if [affected by shadow]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PloobsEngine.Engine.GraphicFactory">
      <summary>
            Creates everything related to Graphics.
            FunctionNameConvention:
            Use Get... To load something and Create... to create something
            </summary>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetBasicEffect">
      <summary>
            Gets the basic effect.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetAlphaTestEffect">
      <summary>
            Gets the alpha test effect.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetSkinnedEffect">
      <summary>
            Gets the skinned effect.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetEnvironmentMapEffect">
      <summary>
            Gets the environment map effect.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetDualTextureEffect">
      <summary>
            Gets the dual texture effect.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetEffect(System.String,System.Boolean,System.Boolean)">
      <summary>
            Gets a user created effect.
            </summary>
      <param name="name">The name.</param>
      <param name="clone">if set to <c>true</c> [clone].</param>
      <param name="isInternal">if set to <c>true</c> [is internal].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetSpriteBatch(System.Boolean)">
      <summary>
            Gets the shared sprite batch instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetModel(System.String,System.Boolean)">
      <summary>
            Gets a model
            </summary>
      <param name="name">The name.</param>
      <param name="isinternal">if set to <c>true</c> [isinternal].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetAnimatedModel(System.String,System.Boolean)">
      <summary>
            Gets an animated model.
            </summary>
      <param name="name">The name.</param>
      <param name="isinternal">if set to <c>true</c> [isinternal].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.CreateRenderTarget(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Boolean,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
      <summary>
            Creates the render target.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="SurfaceFormat">The surface format.</param>
      <param name="mipmap">if set to <c>true</c> [mipmap].</param>
      <param name="DepthFormat">The depth format.</param>
      <param name="preferedMultisampleCount">The prefered multisample count.</param>
      <param name="RenderTargetUsage">The render target usage.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetRenderTargetFromPool(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Boolean,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
      <summary>
            Gets the render target from pool.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="SurfaceFormat">The surface format.</param>
      <param name="mipmap">if set to <c>true</c> [mipmap].</param>
      <param name="DepthFormat">The depth format.</param>
      <param name="preferedMultisampleCount">The prefered multisample count.</param>
      <param name="RenderTargetUsage">The render target usage.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetSpriteFont(System.String,System.Boolean)">
      <summary>
            Gets the sprite font.
            </summary>
      <param name="fontName">Name of the font.</param>
      <param name="isInternal">if set to <c>true</c> [is internal].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetTexture2D(System.String,System.Boolean)">
      <summary>
            Gets the texture2D from file
            </summary>
      <param name="textureName">Name of the texture.</param>
      <param name="isInternal">if set to <c>true</c> [is internal].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetTextureCube(System.String,System.Boolean)">
      <summary>
            Gets the texture cube from file
            </summary>
      <param name="textureName">Name of the texture.</param>
      <param name="isInternal">if set to <c>true</c> [is internal].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.CreateTexture2D(System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>
            Creates the texture2D.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="mipmap">if set to <c>true</c> [mipmap].</param>
      <param name="format">The format.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.CreateTexture2DColor(System.Int32,System.Int32,Microsoft.Xna.Framework.Color,System.Boolean)">
      <summary>
            Creates the color of the texture2D.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
      <param name="mipmap">if set to <c>true</c> [mipmap].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.CreateTexture2DRandom(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Creates the texture2D random color
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="mipmap">if set to <c>true</c> [mipmap].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.CreateTexture2DBlackAndWhite(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Creates the texture2D black and white.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="mipmap">if set to <c>true</c> [mipmap].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.CreateTexture2DPerlinNoise(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
      <summary>
            Creates the texture2D with perlin noise.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="frequencia">The frequencia.</param>
      <param name="amplitude">The amplitude.</param>
      <param name="persistence">The persistence.</param>
      <param name="octave">The octave.</param>
      <param name="mipmap">if set to <c>true</c> [mipmap].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.CreateIndexBuffer(Microsoft.Xna.Framework.Graphics.IndexElementSize,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>
            Creates the index buffer.
            </summary>
      <param name="elementSize">Size of the element.</param>
      <param name="indexCount">The index count.</param>
      <param name="usage">The usage.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.CreateDynamicIndexBuffer(Microsoft.Xna.Framework.Graphics.IndexElementSize,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>
            Creates the dynamic index buffer.
            </summary>
      <param name="elementSize">Size of the element.</param>
      <param name="indexCount">The index count.</param>
      <param name="usage">The usage.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.CreateVertexBuffer(Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>
            Creates the vertex buffer.
            </summary>
      <param name="vertexDeclaration">The vertex declaration.</param>
      <param name="vertexCount">The vertex count.</param>
      <param name="usage">The usage.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.CreateDynamicVertexBuffer(Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.BufferUsage)">
      <summary>
            Creates the dynamic vertex buffer.
            </summary>
      <param name="vertexDeclaration">The vertex declaration.</param>
      <param name="vertexCount">The vertex count.</param>
      <param name="usage">The usage.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetAsset``1(System.String,System.Boolean)">
      <summary>
            Gets an arbitrary asset.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="assetName">Name of the asset.</param>
      <param name="isInternal">if set to <c>true</c> [is internal].</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetScaledTexture(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2)">
      <summary>
            Gets the scaled texture.
            </summary>
      <param name="texture">The texture.</param>
      <param name="Scale">The scale.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetScaledTexture(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32)">
      <summary>
            Gets the scaled texture.
            </summary>
      <param name="texture">The texture.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.MipMapTexture(Microsoft.Xna.Framework.Graphics.Texture2D@)">
      <summary>
            Generate mipmap for the given texture
            </summary>
      <param name="texture">
      </param>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.MipMapTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>
            Mipmaps texture passed.
            </summary>
      <param name="texture">The texture.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.GetTexturePart(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
      <summary>
            Gets a texture part from a bigger texture.
            </summary>
      <param name="texture">The texture.</param>
      <param name="rectangle">The rectangle.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Engine.GraphicFactory.ReleaseAsset(System.String)">
      <summary>
            Releases the asset.
            </summary>
      <param name="assetName">Name of the asset.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.I2DWorld">
      <summary>
            2D World
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DWorld.#ctor(PloobsEngine.Physic2D.I2DPhysicWorld,PloobsEngine.Particles.IParticleManager,PloobsEngine.SceneControl._2DScene.Culler.I2DCuller)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.IWorld" /> class.
            </summary>
      <param name="PhysicWorld">The physic world.</param>
      <param name="particleManager">The particle manager.</param>
      <param name="culler">The culler.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DWorld.InitWorld">
      <summary>
            Inits the world.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DWorld.AddObject(PloobsEngine.SceneControl._2DScene.I2DObject)">
      <summary>
            Adds an object to the world.
            </summary>
      <param name="obj">The obj.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DWorld.ContainsObject(PloobsEngine.SceneControl._2DScene.I2DObject)">
      <summary>
            Contains the specified obj.
            </summary>
      <param name="obj">The obj.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DWorld.RemoveObject(PloobsEngine.SceneControl._2DScene.I2DObject)">
      <summary>
            Removes an object from the world.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DWorld.UpdateWorld(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates the world.
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DWorld.AddDummy(PloobsEngine.SceneControl.IDummy)">
      <summary>
            Add a Dummy to the world
            Its like a position, 
            usefull to serializable position from a world editor
            </summary>
      <param name="dummy">The dummy.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DWorld.RemoveDummy(PloobsEngine.SceneControl.IDummy)">
      <summary>
            Removes the dummy.
            </summary>
      <param name="dummy">The dummy.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DWorld.AddSoundEmitter(PloobsEngine.Audio.ISoundEmitter2D,System.Boolean)">
      <summary>
            Adds the sound emitter.
            </summary>
      <param name="em">The em.</param>
      <param name="play">if set to <c>true</c> [play].</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DWorld.RemoveSoundEmitter(PloobsEngine.Audio.ISoundEmitter2D)">
      <summary>
            Removes the sound emitter.
            </summary>
      <param name="em">The em.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.I2DWorld.CleanUp">
      <summary>
            Cleans up.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DWorld.Camera2D">
      <summary>
            Gets or sets the camera2D.
            </summary>
      <value>
            The camera2D.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DWorld.ParticleManager">
      <summary>
            Gets the particle manager.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DWorld.ContentManager">
      <summary>
            Gets the content manager.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DWorld.GraphicsInfo">
      <summary>
            Gets or sets the graphics info.
            </summary>
      <value>
            The graphics info.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DWorld.GraphicsFactory">
      <summary>
            Gets or sets the graphics factory.
            </summary>
      <value>
            The graphics factory.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DWorld.PhysicWorld">
      <summary>
            Gets or sets the physic world.
            </summary>
      <value>
            The physic world.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DWorld.Dummies">
      <summary>
            Gets all the dummyes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DWorld.CleanUpObjectsOnDispose">
      <summary>
            Gets or sets a value indicating whether [clean up objects on dispose].
            </summary>
      <value>
        <c>true</c> if [clean up objects on dispose]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DWorld.Culler">
      <summary>
            Gets the culler.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DWorld.Objects">
      <summary>
            Gets the objects.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.I2DWorld.SoundEmiters2D">
      <summary>
            Gets the objects.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physic2D.Physic2DType">
      <summary>
            Physic object type
            </summary>
    </member>
    <member name="F:PloobsEngine.Physic2D.Physic2DType.Ghost">
      <summary>
            Do not exists in physic world (no collision detection, no ray intersections ......)
            </summary>
    </member>
    <member name="F:PloobsEngine.Physic2D.Physic2DType.Physic">
      <summary>
            Real physic object
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.SimpleMotionBlurPostEffect">
      <summary>
            Simple Motion Blur post effect using alpha blending
            Can be used in all Plataforms
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.SimpleMotionBlurPostEffect.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.SimpleMotionBlurPostEffect" /> class.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.SimpleMotionBlurPostEffect.Init(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Initiates the specified Post Effect.
            Called by the engine
            </summary>
      <param name="ginfo">The ginfo.</param>
      <param name="factory">The factory.</param>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint">
      <summary>
            Manages the horizontal movement of a character.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.#ctor(BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController)">
      <summary>
            Constructs a new horizontal motion constraint.
            </summary>
      <param name="characterController">Character to be governed by this constraint.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.Update(System.Single)">
      <summary>
            Computes per-frame information necessary for the constraint.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.ExclusiveUpdate">
      <summary>
            Performs any per-frame initialization needed by the constraint that must be done with exclusive access
            to the connected objects.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.SolveIteration">
      <summary>
            Computes a solution to the constraint.
            </summary>
      <returns>Impulse magnitude computed by the iteration.</returns>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.SupportData">
      <summary>
            Gets or sets the support data used by the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.MovementDirection">
      <summary>
            Gets or sets the goal movement direction.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.Speed">
      <summary>
            Gets or sets the maximum speed at which the character can move while standing with a support that provides traction.
            Relative velocities with a greater magnitude will be decelerated.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.SlidingSpeed">
      <summary>
            Gets or sets the maximum speed at which the character can move while on a support that does not provide traction.
            Relative velocities with a greater magnitude will be decelerated.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.AirSpeed">
      <summary>
            Gets or sets the maximum speed at which the character can move with no support.
            The character will not be decelerated while airborne.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.MaximumForce">
      <summary>
            Gets or sets the maximum force that the character can apply while on a support which provides traction.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.MaximumSlidingForce">
      <summary>
            Gets or sets the maximum force that the character can apply while on a support which does not provide traction.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.MaximumAirForce">
      <summary>
            Gets or sets the maximum force that the character can apply with no support.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.SupportForceFactor">
      <summary>
            Gets or sets the scaling factor of forces applied to the supporting object if it is a dynamic entity.
            Low values (below 1) reduce the amount of motion imparted to the support object; it acts 'heavier' as far as horizontal motion is concerned.
            High values (above 1) increase the force applied to support objects, making them appear lighter.
            Be careful when changing this- it can create impossible situations! Imagine the character standing on a compound object.  If the support force
            factor is less than 1, then the character can push the compound around while standing on it!
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.MovementMode">
      <summary>
            Gets the movement mode that the character is currently in.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.RelativeVelocity">
      <summary>
            Gets the current velocity between the character and its support in constraint space.
            The X component corresponds to velocity along the movement direction.
            The Y component corresponds to velocity perpendicular to the movement direction and support normal.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.HorizontalMotionConstraint.RelativeWorldVelocity">
      <summary>
            Gets the current velocity between the character and its support.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.QueryManager">
      <summary>
            Helps a character identify supports by finding contacts and ray cast intersections with its immediate surroundings.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.QueryManager.#ctor(BEPUphysicsDemos.AlternateMovement.Character.CharacterController)">
      <summary>
            Constructs the query manager for a character.
            </summary>
      <param name="character">Character to manage queries for.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.QueryManager.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Computes the intersection, if any, between a ray and the objects in the character's bounding box.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="length">Length of the ray to use in units of the ray's length.</param>
      <param name="earliestHit">Earliest intersection location and information.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.QueryManager.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@,BEPUphysics.Collidables.Collidable@)">
      <summary>
            Computes the intersection, if any, between a ray and the objects in the character's bounding box.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="length">Length of the ray to use in units of the ray's length.</param>
      <param name="earliestHit">Earliest intersection location and information.</param>
      <param name="hitObject">Collidable intersected by the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.QueryManager.RayCastHitAnything(Microsoft.Xna.Framework.Ray,System.Single)">
      <summary>
            Determines if a ray intersects any object in the character's bounding box.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="length">Length of the ray to use in units of the ray's length.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.QueryManager.QueryContacts(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Tests a collision object with the same shape as the current character at the given position for contacts.
            Output data is stored in the query manager's supporting lists.
            </summary>
      <param name="position">Position to use for the query.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.QueryManager.QueryContacts(Microsoft.Xna.Framework.Vector3,BEPUphysicsDemos.AlternateMovement.Character.Stance)">
      <summary>
            Tests a collision object with the dimensions matching the desired stance shape at the given position for contacts.
            Output data is stored in the query manager's supporting lists.
            </summary>
      <param name="stance">Character stance to use in the query.</param>
      <param name="position">Position to use for the query.</param>
    </member>
    <member name="F:PloobsEngine.NetWorking.NetWorkClientObject.CreateRemoteObjectOrder">
      <summary>
            Create a Remote Create Object Message
            </summary>
    </member>
    <member name="F:PloobsEngine.NetWorking.NetWorkClientObject.HandleRemoteObjectOrder">
      <summary>
            Handle Incomming Create Object message 
            </summary>
    </member>
    <member name="T:PloobsEngine.Modelo.Animation.AnimatedModel">
      <summary>
            Concrete Animated Model
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.AnimatedModel.#ctor(PloobsEngine.Engine.GraphicFactory,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Modelo.Animation.AnimatedModel" /> class.
            </summary>
      <param name="factory">The factory.</param>
      <param name="modelName">Name of the model.</param>
      <param name="diffuseTextureName">Name of the diffuse texture.</param>
      <param name="bumpTextureName">Name of the bump texture.</param>
      <param name="specularTextureName">Name of the specular texture.</param>
      <param name="glowTextureName">Name of the glow texture.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.AnimatedModel.GetAnimation">
      <summary>
            Gets the animation Information from Model
            It can be for example the Bone hierarchy of the model
            The result need to be casted (vary toooo much between animation APIs, better to keep as Object)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.AnimatedModel.getModelTag">
      <summary>
            Gets the model tag.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.Modelo.Animation.AnimatedModel.MeshNumber">
      <summary>
            Gets the mesh number.
            </summary>
    </member>
    <member name="M:PloobsEngine.Light2D.ShadowmapResolver.#ctor(PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.QuadRender,PloobsEngine.Light2D.ShadowmapSize,PloobsEngine.Light2D.ShadowmapSize)">
      <summary>
            Creates a new shadowmap resolver
            </summary>
      <param name="factory">The factory.</param>
      <param name="quadRender">The quad render.</param>
      <param name="maxShadowmapSize">Size of the max shadowmap.</param>
      <param name="maxDepthBufferSize">Size of the max depth buffer.</param>
    </member>
    <member name="F:PloobsEngine.Features.DebugDraw.DebugSphere.effect">
      <summary>
            The basic effect used to draw boxes.
            </summary>
    </member>
    <member name="F:PloobsEngine.Features.DebugDraw.DebugSphere.Position">
      <summary>
            Position
            </summary>
    </member>
    <member name="F:PloobsEngine.Features.DebugDraw.DebugSphere.Radius">
      <summary>
            Radius
            </summary>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugSphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Color)">
      <summary>
            Creates a new box.
            Visible by default
            </summary>
      <param name="position">The position.</param>
      <param name="radius">The radius.</param>
      <param name="color">The box's color.</param>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugSphere.Initialize(PloobsEngine.Engine.GraphicFactory,PloobsEngine.Engine.GraphicInfo)">
      <summary>
            Initializes
            </summary>
      <param name="factory">The factory.</param>
      <param name="ginfo">The ginfo.</param>
    </member>
    <member name="M:PloobsEngine.Features.DebugDraw.DebugSphere.Draw(PloobsEngine.SceneControl.RenderHelper,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>
            Draws the box.
            </summary>
      <param name="render">The render.</param>
      <param name="view">The viewing matrix.</param>
      <param name="projection">The projection matrix.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.BinaryNode`1.#ctor(`0)">
      <summary>
            Create a new binary node.
            </summary>
      <param name="userData">Optional data to store in the node.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.BinaryNode`1.Dispose">
      <summary>
            Disposes of this node and it's user data.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.BinaryNode`1.Dispose(System.Boolean)">
      <summary>
            Called when this node is being disposed of.
            </summary>
      <param name="disposing">Should managed resources be disposed of as well.</param>
    </member>
    <member name="P:PloobsEngine.DataStructure.BinaryNode`1.UserData">
      <summary>
            User data stored in this node, this could be anything from a number, to a spatial node.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.BinaryNode`1.Left">
      <summary>
            Gets the left child of this node.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.BinaryNode`1.Right">
      <summary>
            Gets the right child of this node.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.BinaryNode`1.IsLeaf">
      <summary>
            Gets a value indicating whether this node has child nodes.
            </summary>
    </member>
    <member name="T:PloobsEngine.Components.ComponentType">
      <summary>
            The component Type
            Its very important, The type decides what methods of the component will be called
            </summary>
    </member>
    <member name="F:PloobsEngine.Components.ComponentType.PRE_DRAWABLE">
      <summary>
            Only the Pre Draw method will be call
            </summary>
    </member>
    <member name="F:PloobsEngine.Components.ComponentType.POS_DRAWABLE">
      <summary>
            Only the Pos draw method will be called
            </summary>
    </member>
    <member name="F:PloobsEngine.Components.ComponentType.UPDATEABLE">
      <summary>
            Only the Update method will be called
            </summary>
    </member>
    <member name="F:PloobsEngine.Components.ComponentType.PRE_DRAWABLE_AND_UPDATEABLE">
      <summary>
            Only the Pre Draw and Update will be called
            </summary>
    </member>
    <member name="F:PloobsEngine.Components.ComponentType.POS_DRAWABLE_AND_UPDATEABLE">
      <summary>
            Only the Pos Draw and Update will be called
            </summary>
    </member>
    <member name="F:PloobsEngine.Components.ComponentType.POS_WITHDEPTH_DRAWABLE_AND_UPDATEABLE">
      <summary>
            Only the Pos With Depth Draw and Update will be called
            </summary>
    </member>
    <member name="F:PloobsEngine.Components.ComponentType.POS_WITHDEPTH_DRAWABLE">
      <summary>
            Only the Pos With Depth Draw will be called
            </summary>
    </member>
    <member name="F:PloobsEngine.Components.ComponentType.NONE">
      <summary>
            None of the methods will be called
            </summary>
    </member>
    <member name="T:PloobsEngine.Cameras.InterpolationType">
      <summary>
            How to interpolate cameras
            </summary>
    </member>
    <member name="F:PloobsEngine.Cameras.InterpolationType.BYTIME">
      <summary>
            Using fixed time (speed)
            </summary>
    </member>
    <member name="F:PloobsEngine.Cameras.InterpolationType.BYSTEP">
      <summary>
            By fixed distance
            </summary>
    </member>
    <member name="T:PloobsEngine.Cameras.TransitionMode">
      <summary>
            If should or not interpolate between camera transitions
            </summary>
    </member>
    <member name="T:PloobsEngine.Cameras.State">
      <summary>
            State of the Camera
            </summary>
    </member>
    <member name="T:PloobsEngine.Cameras.CameraDescription">
      <summary>
            Camera holding interface
            </summary>
    </member>
    <member name="F:PloobsEngine.Cameras.CameraDescription.name">
      <summary>
            Name of the camera
            </summary>
    </member>
    <member name="F:PloobsEngine.Cameras.CameraDescription.cam">
      <summary>
            Camera
            </summary>
    </member>
    <member name="T:PloobsEngine.Cameras.CameraManager">
      <summary>
            Handle 3D cameras transitions and storage
            </summary>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraManager.AddCamera(PloobsEngine.Cameras.ICamera,System.String)">
      <summary>
            Add a camera
            if camera name is DEFAULTCAMERA it becomes the active one
            </summary>
      <param name="cam">
      </param>
      <param name="name">
      </param>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraManager.AddCamera(PloobsEngine.Cameras.ICamera)">
      <summary>
            Add a camera and set it active if not yet was setted
            </summary>
      <param name="cam">
      </param>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraManager.RemoveCamera(System.String)">
      <summary>
            Remove a camera
            WARNING, IF IT IS ACTIVE AN EXCEPTION WILL BE RAISED
            </summary>
      <param name="name">nome da camera</param>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraManager.HasCamera(System.String)">
      <summary>
            Determines whether the specified camera name was added.
            </summary>
      <param name="name">The name.</param>
      <returns>
        <c>true</c> if the specified name exist; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraManager.SetActiveCamera(System.String)">
      <summary>
            Set Active camera
            Imediate transition
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraManager.SetActiveCamera(System.String,PloobsEngine.Cameras.InterpolationType,System.Single)">
      <summary>
            Set active camera
            </summary>
      <param name="name">The name.</param>
      <param name="type">The type.</param>
      <param name="timeOrStep">The time or step.</param>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraManager.GetActiveCameraName">
      <summary>
            Retorna o nome da camera ativa
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraManager.GetCamerasDescription">
      <summary>
            Cameras added
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraManager.GetCamera(System.String)">
      <summary>
            Gets the camera by name.
            </summary>
      <param name="name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.Cameras.CameraManager.ActiveCamera">
      <summary>
            Active Camera
            </summary>
    </member>
    <member name="P:PloobsEngine.Cameras.CameraManager.ActiveCameraType">
      <summary>
            Gets the type of the active camera.
            </summary>
      <value>
            The type of the active camera.
            </value>
    </member>
    <member name="T:BehaviorTrees.Sequence`1">
      <summary>
            Composite node executing its subnodes one after another.
            </summary>
      <typeparam name="E">Type of the entity.</typeparam>
    </member>
    <member name="M:BehaviorTrees.Sequence`1.Evaluate(`0)">
      <summary>
            Creates task that will run the sequence.
            </summary>
    </member>
    <member name="T:BehaviorTrees.SequenceTask`1">
      <summary>
            Task responsible for running sequence.
            </summary>
      <typeparam name="E">Type of entity.</typeparam>
    </member>
    <member name="M:BehaviorTrees.SequenceTask`1.Execute(`0,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Evaluates current node and executes its task, after success
            moves to the next node in sequence, evaluates, executes until failure or end of sequence.
            </summary>
      <param name="entity">
      </param>
      <param name="gameTime">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BehaviorTrees.ProbabilitySelector`1">
      <summary>
            Node which selects the children to be run randomly,
            basing on assigned weights.
            </summary>
      <typeparam name="E">Entity type.</typeparam>
    </member>
    <member name="M:BehaviorTrees.ProbabilitySelector`1.Add(System.Single,BehaviorTrees.Node{`0})">
      <summary>
            Adds subnode with assigned weight.
            </summary>
    </member>
    <member name="M:BehaviorTrees.ProbabilitySelector`1.Add(BehaviorTrees.Node{`0})">
      <summary>
            Adds subnode with default weight.
            </summary>
    </member>
    <member name="M:BehaviorTrees.ProbabilitySelector`1.Evaluate(`0)">
      <summary>
            Execute one of the child nodes, randomly selected.
            </summary>
      <param name="entity">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.EnumerableExtensions">
      <summary>
            Some extensions to IEnumerable
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.EnumerableExtensions.CopyTo``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32)">
      <summary>
            Copies to
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">The source.</param>
      <param name="array">The array.</param>
      <param name="startIndex">The start index.</param>
    </member>
    <member name="M:PloobsEngine.Utils.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Index of
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="source">The source.</param>
      <param name="item">The item.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.Triangulator2D">
      <summary>
            A static class exposing methods for triangulating 2D polygons.
            </summary>
    </member>
    <member name="T:PloobsEngine.Utils.Triangulator2D.Triangle">
      <summary>
            A basic triangle structure that holds the three indices that make up a given triangle.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Triangulator2D.Triangulate(Microsoft.Xna.Framework.Vector2[])">
      <summary>
            Triangulates a 2D polygon produced the indexes required to render the points as a triangle list.
            </summary>
      <param name="vertices">The polygon vertices.</param>
      <returns>
            The indexes used to render the points as a triangle list.
            </returns>
    </member>
    <member name="M:PloobsEngine.Utils.Triangulator2D.GetPoints(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
            Given the list of point indices and the index, returns the three vertex indices.
            </summary>
      <param name="points">The list of points</param>
      <param name="i">The current point</param>
      <param name="pim1">The index of the previous vertex</param>
      <param name="pi">The index of the current vertex</param>
      <param name="pip1">The index of the next vertex</param>
    </member>
    <member name="M:PloobsEngine.Utils.Triangulator2D.IsPointInShape(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2[])">
      <summary>
            Determines if a given point is located inside of a shape.
            </summary>
      <param name="point">The point to test.</param>
      <param name="verts">The vertices of the shape.</param>
      <returns>True if the point is in the shape; false otherwise.</returns>
    </member>
    <member name="T:PloobsEngine.MessageSystem.MessageDeliver">
      <summary>
            Responsible to Deliver the messages to the Recievers
            o interessante eh q eu uso uma interface combinada com um delegate (fico muito loco , vo patentia ...)
            funciona assim , voce extende um interface q tem um metodo do tipo CanIhandleThisMessage q recebe um
            tipo de mensagem , se ele consegue dar handler ele devolve um delegate pra o tratador de mensagem q ele implementou
            .... veja o exemplo do Sampleagente q ficara mais facil de entender
            o que importa eh q a pessoa implementa apenas 2 funcoezinhas e ja ta OK para enviar
            e receber mensagens e o sistema ja sabe como trata-las...
            o sistema faz o "roteamento" das mensagens pra encontrar o destinatario
            eh possivel fazer broadcast e enviar apenas para um grupo usando as tags 
            USEI components (nessa arquitetura) pra ficar mais facil de "plugar"    
            </summary>
    </member>
    <member name="M:PloobsEngine.MessageSystem.MessageDeliver.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Deliver the messages
            </summary>
      <param name="gtt">The GTT.</param>
    </member>
    <member name="M:PloobsEngine.MessageSystem.MessageDeliver.SendMessageWithChecking(PloobsEngine.MessageSystem.Message)">
      <summary>
            Check is performed NOW,if the message is send later problems may occur
            </summary>
      <param name="mem">The mem.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.MessageSystem.MessageDeliver.SendMessage(PloobsEngine.MessageSystem.Message)">
      <summary>
            Put the message in the Sender Queue
            </summary>
      <param name="mem">The mem.</param>
    </member>
    <member name="M:PloobsEngine.MessageSystem.MessageDeliver.getMyName">
      <summary>
            Gets The component Name.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.MessageSystem.MessageDeliver.NumMessagerdeliveredByFrame">
      <summary>
            Gets or sets the messagerdelivered by frame.
            </summary>
      <value>
            The num messagerdelivered by frame.
            </value>
    </member>
    <member name="P:PloobsEngine.MessageSystem.MessageDeliver.ComponentType">
      <summary>
            Gets the type of the component.
            </summary>
      <value>
            The type of the component.
            </value>
    </member>
    <member name="T:PloobsEngine.MessageSystem.MessageComparer">
      <summary>
            Message Comparer
            </summary>
    </member>
    <member name="M:PloobsEngine.MessageSystem.MessageComparer.Compare(PloobsEngine.MessageSystem.Message,PloobsEngine.MessageSystem.Message)">
      <summary>
            Compares the messages
            </summary>
      <param name="nodeA">The node A.</param>
      <param name="nodeb">The nodeb.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.MessageSystem.DelayComparer">
      <summary>
            Delay Comparer
            </summary>
    </member>
    <member name="M:PloobsEngine.MessageSystem.DelayComparer.Compare(PloobsEngine.MessageSystem.Message,PloobsEngine.MessageSystem.Message)">
      <summary>
            Compare the delays of the messages
            </summary>
      <param name="nodeA">The node A.</param>
      <param name="nodeb">The nodeb.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Light.LightType">
      <summary>
            Light Types
            </summary>
    </member>
    <member name="F:PloobsEngine.Light.LightType.Deferred_Directional">
      <summary>
            Deferred Directional Light
            </summary>
    </member>
    <member name="F:PloobsEngine.Light.LightType.Deferred_Point">
      <summary>
            Deferred Point Light 
            </summary>
    </member>
    <member name="F:PloobsEngine.Light.LightType.Deferred_Spot">
      <summary>
            Deferred Spot Light
            </summary>
    </member>
    <member name="F:PloobsEngine.Light.LightType.OTHER">
      <summary>
            None of these
            </summary>
    </member>
    <member name="T:PloobsEngine.Input.TurnOffInputMaskCommand">
      <summary>
            Turn a Input Mask OFF
            </summary>
    </member>
    <member name="M:PloobsEngine.Input.TurnOffInputMaskCommand.#ctor(PloobsEngine.Input.InputMask)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Input.TurnOffInputMaskCommand" /> class.
            </summary>
      <param name="mask">The mask.</param>
    </member>
    <member name="M:PloobsEngine.Input.TurnOffInputMaskCommand.execute">
      <summary>
            Executes the command Call.
            </summary>
    </member>
    <member name="M:PloobsEngine.Input.TurnOffInputMaskCommand.setTarget(System.Object)">
      <summary>
            Sets the command target.
            </summary>
      <param name="obj">The obj.</param>
    </member>
    <member name="P:PloobsEngine.Input.TurnOffInputMaskCommand.TargetName">
      <summary>
            Gets the name of the command target.
            </summary>
      <value>
            The name of the target.
            </value>
    </member>
    <member name="T:PloobsEngine.DataStructure.TreeNode`1">
      <summary>
            Tree Node Implementatio
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="F:PloobsEngine.DataStructure.TreeNode`1.value">
      <summary>
            The value of this particular Tree Node.
            </summary>
    </member>
    <member name="F:PloobsEngine.DataStructure.TreeNode`1.listOfSubNodes">
      <summary>
            The array of subnodes.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.TreeNode`1.#ctor">
      <summary>
            Default Constructor.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.TreeNode`1.#ctor(`0,`0[])">
      <summary>
            Constructs a new Tree Node.
            </summary>
      <param name="value">Value for this Node.</param>
      <param name="subNodes">Array of SubNode values.</param>
    </member>
    <member name="M:PloobsEngine.DataStructure.TreeNode`1.Get(System.Int32)">
      <summary>
            Returns one TreeNode at a specific index in this TreeNode's Sub Nodes.
            </summary>
      <param name="index">Index of TreeNode to return.</param>
      <returns>TreeNode at index specified.</returns>
    </member>
    <member name="M:PloobsEngine.DataStructure.TreeNode`1.ToString">
      <summary>
            Returns a String representation of this TreeNode and all the Sub Nodes.
            </summary>
    </member>
    <member name="M:PloobsEngine.DataStructure.TreeNode`1.GetString(PloobsEngine.DataStructure.TreeNode{`0})">
      <summary>
            Helper method for ToString().
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.TreeNode`1.Value">
      <summary>
            Gets and sets the value of this Tree Node.
            </summary>
    </member>
    <member name="P:PloobsEngine.DataStructure.TreeNode`1.SubNodes">
      <summary>
            Gets and sets SubNodes.
            </summary>
    </member>
    <member name="T:Bnoerj.AI.Steering.LocalityQueryProximityDatabase`1">
      <summary>
            A AbstractProximityDatabase-style wrapper for the LQ bin lattice system
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController">
      <summary>
            Gives a physical object simple and cheap FPS-like control.
            This character has less features than the full CharacterController but offers
            an alternative to the SimpleCharacterController.
            </summary>
    </member>
    <member name="F:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController.ConstraintAccessLocker">
      <summary>
            This is used to control the access to simulation islands when there are multiple character controllers updating in parallel.
            If other parts of the program are modifying simulation islands during the IBeforeSolverUpdateable.Update stage, the synchronization
            umbrella will need to be widened.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>
            Constructs a new character controller with the default configuration.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController.ApplyJumpVelocity(BEPUphysicsDemos.AlternateMovement.SphereCharacter.SupportData@,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Changes the relative velocity between the character and its support.
            </summary>
      <param name="supportData">Support data to use to jump.</param>
      <param name="velocityChange">Change to apply to the character and support relative velocity.</param>
      <param name="relativeVelocity">Relative velocity to update.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController.ChangeVelocityUnilaterally(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            In some cases, an applied velocity should only modify the character.
            This allows partially non-physical behaviors, like gluing the character to the ground.
            </summary>
      <param name="velocityChange">Change to apply to the character.</param>
      <param name="relativeVelocity">Relative velocity to update.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController.Jump">
      <summary>
            Jumps the character off of whatever it's currently standing on.  If it has traction, it will go straight up.
            If it doesn't have traction, but is still supported by something, it will jump in the direction of the surface normal.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController.Body">
      <summary>
            Gets the physical body of the character.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController.QueryManager">
      <summary>
            Gets the support system which other systems use to perform local ray casts and contact queries.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController.HorizontalMotionConstraint">
      <summary>
            Gets the constraint used by the character to handle horizontal motion.  This includes acceleration due to player input and deceleration when the relative velocity
            between the support and the character exceeds specified maximums.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController.VerticalMotionConstraint">
      <summary>
            Gets the constraint used by the character to stay glued to surfaces it stands on.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController.JumpForceFactor">
      <summary>
            Gets or sets the amount of force to apply to supporting dynamic entities as a fraction of the force used to reach the jump speed.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController.SupportFinder">
      <summary>
            Gets the support finder used by the character.
            The support finder analyzes the character's contacts to see if any of them provide support and/or traction.
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.SphereCharacter.QueryManager">
      <summary>
            Helps a character identify supports by finding contacts and ray cast intersections with its immediate surroundings.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.QueryManager.#ctor(BEPUphysicsDemos.AlternateMovement.SphereCharacter.SphereCharacterController)">
      <summary>
            Constructs the query manager for a character.
            </summary>
      <param name="character">Character to manage queries for.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.QueryManager.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Computes the intersection, if any, between a ray and the objects in the character's bounding box.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="length">Length of the ray to use in units of the ray's length.</param>
      <param name="earliestHit">Earliest intersection location and information.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.QueryManager.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@,BEPUphysics.Collidables.Collidable@)">
      <summary>
            Computes the intersection, if any, between a ray and the objects in the character's bounding box.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="length">Length of the ray to use in units of the ray's length.</param>
      <param name="earliestHit">Earliest intersection location and information.</param>
      <param name="hitObject">Collidable intersected by the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.QueryManager.RayCastHitAnything(Microsoft.Xna.Framework.Ray,System.Single)">
      <summary>
            Determines if a ray intersects any object in the character's bounding box.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="length">Length of the ray to use in units of the ray's length.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.SphereCharacter.QueryManager.QueryContacts(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Tests a collision object with the same shape as the current character at the given position for contacts.
            Output data is stored in the query manager's supporting lists.
            </summary>
      <param name="position">Position to use for the query.</param>
    </member>
    <member name="T:PloobsEngine.Physics.DisplayTransformable">
      <summary>
            Helper class that can create shape mesh data.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.DisplayTransformable.NumSamples">
      <summary>
            Number of sides of spherical sampling to take when creating graphical representations.
            </summary>
    </member>
    <member name="T:PloobsEngine.Audio.SoundAudioPlayer">
      <summary>
            SoundPlayer
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.SoundAudioPlayer.#ctor(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Audio.SoundAudioPlayer" /> class.
            </summary>
      <param name="factory">The factory.</param>
    </member>
    <member name="M:PloobsEngine.Audio.SoundAudioPlayer.PlaySoundEffect(System.String)">
      <summary>
            Plays the effect song.
            </summary>
      <param name="songName">Name of the song.</param>
    </member>
    <member name="M:PloobsEngine.Audio.SoundAudioPlayer.PauseSoundEffect(System.String)">
      <summary>
            Pauses the effect song.
            </summary>
      <param name="songName">Name of the song.</param>
    </member>
    <member name="M:PloobsEngine.Audio.SoundAudioPlayer.ResumeSoundEffect(System.String)">
      <summary>
            Resumes the specified song name.
            </summary>
      <param name="songName">Name of the song.</param>
    </member>
    <member name="M:PloobsEngine.Audio.SoundAudioPlayer.StopSoundEffect(System.String)">
      <summary>
            Stops the effect song.
            </summary>
      <param name="songName">Name of the song.</param>
    </member>
    <member name="M:PloobsEngine.Audio.SoundAudioPlayer.SoundState(System.String)">
      <summary>
            State of the parameter songName
            </summary>
      <param name="songName">Name of the song.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Audio.SoundAudioPlayer.AddSoundToRepository(System.String,System.String,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
            Add A Sound Effect to the Repo
            Sounds are shared here
            </summary>
      <param name="musicNamePath">filepath</param>
      <param name="musicName">Name used to refer to this effect latter</param>
      <param name="volume">between 0 - 1</param>
      <param name="pitch">between -1 to 1 (octaves)</param>
      <param name="pan">between -1 to 1 (left - right)</param>
      <param name="isLooped">if set to <c>true</c> [is looped].</param>
    </member>
    <member name="M:PloobsEngine.Audio.SoundAudioPlayer.RemoveSoundFromRepository(System.String)">
      <summary>
            Removes the effect from repository.
            </summary>
      <param name="soundEffectName">Name of the sound effect.</param>
    </member>
    <member name="M:PloobsEngine.Audio.SoundAudioPlayer.HasSoundEffect(System.String)">
      <summary>
            Determines whether [This Audio Player has] [the specified sound effect name].
            </summary>
      <param name="soundEffectName">Name of the sound effect.</param>
      <returns>
        <c>true</c> if [has the specified sound effect] otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:PloobsEngine.Audio.SoundAudioPlayer.GetSoundEffectInstance(System.String)">
      <summary>
            Gets the sound effect instance.
            The SimpleSoundEffect MUST BE ALREADY IN THE REPO !!!
            TO CREATE A Non SHARED SIMPLESOUNDEFFECT, USE THE SIMPLESOUNDEFFECT CONSTRUTOR.
            </summary>
      <param name="soundEffectName">Name of the sound effect.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Audio.SoundAudioPlayer.RemoveAllSounds">
      <summary>
            Removes all sounds.
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.SoundAudioPlayer.CleanUp">
      <summary>
            Cleans up.
            Not called by the engine
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.Genetic.GA">
      <summary>
            Genetic Algorithm class
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.Genetic.GA.#ctor">
      <summary>
            Default constructor sets mutation rate to 5%, crossover to 80%, population to 100,
            and generations to 2000.
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.Genetic.GA.Go">
      <summary>
            PlayMusic which starts the GA executing.
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.Genetic.GA.RouletteSelection">
      <summary>
            After ranking all the genomes by fitness, use a 'roulette wheel' selection
            method.  This allocates a large probability of selection to those with the 
            highest fitness.
            </summary>
      <returns>Random individual biased towards highest fitness</returns>
    </member>
    <member name="M:PloobsEngine.IA.Genetic.GA.RankPopulation">
      <summary>
            Rank population and sort in order of fitness.
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.Genetic.GA.CreateGenomes">
      <summary>
            Create the *initial* genomes by repeated calling the supplied fitness function
            </summary>
    </member>
    <member name="P:PloobsEngine.IA.Genetic.GA.Elitism">
      <summary>
            Keep previous generation's fittest individual in place of worst in current
            </summary>
    </member>
    <member name="T:PloobsEngine.Trigger.GenericEventHandler">
      <summary>
            Generic Event Handler
            </summary>
    </member>
    <member name="M:PloobsEngine.Trigger.GenericEventHandler.GetId">
      <summary>
            return the entity id
            </summary>
      <returns>
            the id
            </returns>
    </member>
    <member name="M:PloobsEngine.Trigger.GenericEventHandler.SetId(System.Int64)">
      <summary>
            sets the id
            </summary>
      <param name="id">
      </param>
    </member>
    <member name="M:PloobsEngine.Trigger.GenericEventHandler.Process(PloobsEngine.MessageSystem.Message)">
      <summary>
            Processes the specified mes.
            </summary>
      <param name="mes">The mes.</param>
    </member>
    <member name="M:PloobsEngine.Trigger.GenericEventHandler.HandleEvent(PloobsEngine.Events.IEvent{System.Object})">
      <summary>
            Handles the event.
            </summary>
      <param name="evt">The evt.</param>
    </member>
    <member name="T:PloobsEngine.Utils.InfixTransformer">
      <summary>
            Transform Infix to RPN
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.InfixTransformer.Transform(System.String)">
      <summary>
            Transforms the specified current expression.
            </summary>
      <param name="currentExpression">The current expression.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.SceneControl.QuadRender">
      <summary>
            Helper class to render full screen quads
            VertexPositionTexture
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.QuadRender.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
            Loads the quad.
            </summary>
      <param name="device">The device.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.QuadRender.DrawQuad(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>
            Draws the quad.
            </summary>
      <param name="effect">The effect.</param>
    </member>
    <member name="T:PloobsEngine.Modelo.Animation.IAnimatedController">
      <summary>
            Animation Controler Interface
            User interact with animated model by this controller
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.IAnimatedController.ChangeAnimation(System.String,PloobsEngine.Modelo.Animation.AnimationChangeMode)">
      <summary>
            Changes the animation.
            </summary>
      <param name="animationName">Name of the animation.</param>
      <param name="mode">The interpolation mode.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.IAnimatedController.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates the controller.
            CAlled by the API
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.IAnimatedController.ChangeInterpolationMode(PloobsEngine.Modelo.Animation.AnimationInterpolationMode)">
      <summary>
            Changes the interpolation mode.
            </summary>
      <param name="im">The im.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.IAnimatedController.GetBoneTransformations">
      <summary>
            Gets the bone transformations.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.IAnimatedController.TransformBone(System.String,Microsoft.Xna.Framework.Quaternion)">
      <summary>
            Transforms the bone.
            </summary>
      <param name="boneName">Name of the bone.</param>
      <param name="rot">The rot.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.IAnimatedController.GetBoneAbsoluteTransform(System.String)">
      <summary>
            Gets the bone absolute transform.
            </summary>
      <param name="boneName">Name of the bone.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Modelo.Animation.AnimationChangeMode">
      <summary>
            AnimationChangeMode
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.Animation.AnimationChangeMode.Blend">
      <summary>
            Use Blending
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.Animation.AnimationChangeMode.Normal">
      <summary>
            Dont use blending
            </summary>
    </member>
    <member name="T:PloobsEngine.Modelo.Animation.AnimationInterpolationMode">
      <summary>
            interpolations Modes
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.Animation.AnimationInterpolationMode.No_Interpolation">
      <summary>
            No interpolation, Dont use this !!!
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.Animation.AnimationInterpolationMode.Linear_Interpolation">
      <summary>
            Linear
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.Animation.AnimationInterpolationMode.Cubic_Interpolation">
      <summary>
            Cubic
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.Animation.AnimationInterpolationMode.Spherical_Interpolation">
      <summary>
            Spherical
            </summary>
    </member>
    <member name="T:PloobsEngine.PrincipalConstants">
      <summary>
            Here we have all the importants Engine Constants
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.DefaultInitConfFileName">
      <summary>
            Where to search for the init conf file
            This funcionality is not on yet
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.EventSenderId">
      <summary>
            Id used when an event send a message
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.InvalidId">
      <summary>
            Invalid id constant
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.MessageDeliverId">
      <summary>
            The messegeDeliver component id
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.RecieverNotFound">
      <summary>
            Message recieved when the reciever is not found
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.CombinedImage">
      <summary>
            the combined image alias (Post processing)
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.CurrentImage">
      <summary>
            The current image alias (Post Processing)
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.extra1RT">
      <summary>
            extra render target name
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.colorRT">
      <summary>
            Color (diffuse) render target name
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.normalRt">
      <summary>
            Normal render target name
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.lightRt">
      <summary>
            Light Render target name
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.DephRT">
      <summary>
            Depth Render target name
            </summary>
    </member>
    <member name="F:PloobsEngine.PrincipalConstants.SEPARATOR_CHARACTER">
      <summary>
            Separator character used when parsing files
            </summary>
    </member>
    <member name="T:PloobsEngine.IScreenUpdateable">
      <summary>
            Updateable component
            Can be atached to a screen, and everytime the screens's update is called
            this class update is also called
            has an id
            </summary>
    </member>
    <member name="M:PloobsEngine.IScreenUpdateable.#ctor(PloobsEngine.SceneControl.IScreen)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.IScreenUpdateable" /> class.
            </summary>
      <param name="owner">The screen owner.</param>
    </member>
    <member name="M:PloobsEngine.IScreenUpdateable.Start">
      <summary>
            Starts this instance.
            The update will be called after this call
            </summary>
    </member>
    <member name="M:PloobsEngine.IScreenUpdateable.Stop">
      <summary>
            Stops the updating method being called
            </summary>
    </member>
    <member name="M:PloobsEngine.IScreenUpdateable.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates this called
            Should be overloaded
            </summary>
      <param name="gameTime">The game time.</param>
    </member>
    <member name="M:PloobsEngine.IScreenUpdateable.GetId">
      <summary>
            return the entity id
            </summary>
      <returns>
            the id
            </returns>
    </member>
    <member name="M:PloobsEngine.IScreenUpdateable.CleanUp">
      <summary>
            Cleans up.
            </summary>
    </member>
    <member name="M:PloobsEngine.IScreenUpdateable.SetId(System.Int64)">
      <summary>
            sets the id
            </summary>
      <param name="id">
      </param>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.Culler.Physic2DCuller">
      <summary>
            2D physic based Culler
            Very effective
            </summary>
    </member>
    <member name="T:BEPUphysicsDemos.AlternateMovement.Character.StepManager">
      <summary>
            Checks to see if a character is capable of stepping up or down onto a new support object.
            </summary>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.StepManager.#ctor(BEPUphysicsDemos.AlternateMovement.Character.CharacterController)">
      <summary>
            Constructs a new step manager for a character.
            </summary>
      <param name="character">Character governed by the manager.</param>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.StepManager.TryToStepDown(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines if a down step is possible, and if so, computes the location to which the character should teleport.
            </summary>
      <param name="newPosition">New position the character should teleport to if the down step is accepted.</param>
      <returns>Whether or not the character should attempt to step down.</returns>
    </member>
    <member name="M:BEPUphysicsDemos.AlternateMovement.Character.StepManager.TryToStepUp(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines if an up step is possible, and if so, computes the location to which the character should teleport.
            </summary>
      <param name="newPosition">New position the character should teleport to if the up step is accepted.</param>
      <returns>Whether or not the character should attempt to step up.</returns>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.StepManager.MaximumStepHeight">
      <summary>
            Gets or sets the maximum height which the character is capable of stepping up or down onto.
            </summary>
    </member>
    <member name="P:BEPUphysicsDemos.AlternateMovement.Character.StepManager.MinimumDownStepHeight">
      <summary>
            Gets or sets the minimum down step height.  Down steps which are smaller than this are simply ignored by the step system; instead, the character falls.
            If the new step location has traction, the intermediate falling will not remove traction from the character.  The only difference is that the character isn't
            teleported down when the step is too small.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.DisplayCone">
      <summary>
            Helper class that can create shape mesh data.
            </summary>
    </member>
    <member name="F:PloobsEngine.Physics.DisplayCone.NumSides">
      <summary>
            Number of sides to build geometry with.
            </summary>
    </member>
    <member name="T:PloobsEngine.Modelo.Animation.AnimatedController">
      <summary>
            Animated Controller concrete
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.AnimatedController.#ctor(PloobsEngine.Modelo.Animation.IAnimatedModel,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Modelo.Animation.AnimatedController" /> class.
            </summary>
      <param name="model">The model.</param>
      <param name="StartAnimationName">Start name of the animation.</param>
      <param name="changeOnlyWhenDifferentAnimation">if set to <c>true</c> [change the current animationonly only when different animation is set].</param>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.AnimatedController.MappActionAnimation(System.String,System.String)">
      <summary>
            Mapps one action to animation.
            When using behaviors for example
            </summary>
      <param name="actionName">Name of the action.</param>
      <param name="animation">The animation.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.AnimatedController.TransformBone(System.String,Microsoft.Xna.Framework.Quaternion)">
      <summary>
            Transforms the bone.
            </summary>
      <param name="boneName">Name of the bone.</param>
      <param name="rot">The rot.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.AnimatedController.GetBoneAbsoluteTransform(System.String)">
      <summary>
            Gets the bone absolute transform.
            </summary>
      <param name="boneName">Name of the bone.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.AnimatedController.ChangeAnimation(System.String,PloobsEngine.Modelo.Animation.AnimationChangeMode)">
      <summary>
            Changes the animation.
            </summary>
      <param name="animationName">Name of the animation.</param>
      <param name="mode">The interpolation mode.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.AnimatedController.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates the controller.
            CAlled by the API
            </summary>
      <param name="gt">The gt.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.AnimatedController.ChangeInterpolationMode(PloobsEngine.Modelo.Animation.AnimationInterpolationMode)">
      <summary>
            Changes the interpolation mode.
            </summary>
      <param name="im">The im.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.Animation.AnimatedController.GetBoneTransformations">
      <summary>
            Gets the bone transformations.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.Modelo.Animation.AnimatedController.TransitionBetweenAnimationTimeInSeconds">
      <summary>
            Gets or sets the transition between animation time in seconds.
            </summary>
      <value>
            The transition between animation time in seconds.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo.Animation.AnimatedController.Speed">
      <summary>
            Gets or sets the animation speed.
            </summary>
      <value>
            The speed.
            </value>
    </member>
    <member name="P:PloobsEngine.Modelo.Animation.AnimatedController.isLoop">
      <summary>
            Gets or sets a value indicating whether this instance is in loop.
            </summary>
      <value>
        <c>true</c> if this instance is loop; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PloobsEngine.Modelo2D.AnimationClass">
      <summary>
            Sprite keyframe animation information
            </summary>
    </member>
    <member name="P:PloobsEngine.Modelo2D.AnimationClass.IsLooping">
      <summary>
            Default = true
            </summary>
    </member>
    <member name="P:PloobsEngine.Modelo2D.AnimationClass.Frames">
      <summary>
            Total Frames
            </summary>
    </member>
    <member name="P:PloobsEngine.Modelo2D.AnimationClass.Rotation">
      <summary>
            Animation Rotation
            </summary>
    </member>
    <member name="T:PloobsEngine.DataStructure.BinaryTreeTraversal">
      <summary>
            Determines the pattern used to visit nodes in a binary tree.
            </summary>
    </member>
    <member name="F:PloobsEngine.DataStructure.BinaryTreeTraversal.Inorder">
      <summary>
            Move into the left sub-tree.
            Visit the node.
            Move into the right sub-tree.
            </summary>
    </member>
    <member name="F:PloobsEngine.DataStructure.BinaryTreeTraversal.Preorder">
      <summary>
            Visit the node.
            Move into the left sub-tree.
            Move into the right sub-tree.
            </summary>
    </member>
    <member name="F:PloobsEngine.DataStructure.BinaryTreeTraversal.Postorder">
      <summary>
            Move into the left sub-tree.
            Move into the right sub-tree.
            Visit the node.
            </summary>
    </member>
    <member name="T:PloobsEngine.DataStructure.BinaryTreeVisitDelegate`1">
      <summary>
            Delegate used when visiting a node in the binary tree.
            </summary>
      <typeparam name="UserType">Type of data stored in the nodes.</typeparam>
      <param name="node">The node being visited.</param>
      <param name="cancel">True if the traversal should stop.</param>
    </member>
    <member name="T:PloobsEngine.Commands.CommandProcessor">
      <summary>
            Reponsible for sending Commands
            </summary>
    </member>
    <member name="M:PloobsEngine.Commands.CommandProcessor.getCommandProcessor">
      <summary>
            Gets the command processor.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.Commands.CommandProcessor.SendCommandSyncronous(PloobsEngine.Commands.ICommand,System.String)">
      <summary>
            Send a command NOW
            </summary>
      <param name="command">The command.</param>
      <param name="recieverId">The reciever id.</param>
    </member>
    <member name="M:PloobsEngine.Commands.CommandProcessor.SendCommandSyncronous(PloobsEngine.Commands.ICommand)">
      <summary>
            Sends a command Now
            </summary>
      <param name="command">The command.</param>
    </member>
    <member name="M:PloobsEngine.Commands.CommandProcessor.SendCommandAssyncronous(PloobsEngine.Commands.ICommand,System.String)">
      <summary>
            Schedules a Command to be send when possible
            </summary>
      <param name="command">The command.</param>
      <param name="recieverId">The reciever id.</param>
    </member>
    <member name="M:PloobsEngine.Commands.CommandProcessor.SendCommandAssyncronous(PloobsEngine.Commands.ICommand)">
      <summary>
            Schedules a Command to be send when possible
            </summary>
      <param name="command">The command.</param>
    </member>
    <member name="M:PloobsEngine.Commands.CommandProcessor.ProcessCommands">
      <summary>
            Process the Assyncronous Commands        
            </summary>
    </member>
    <member name="M:PloobsEngine.Commands.CommandProcessor.Register(PloobsEngine.Commands.IReciever)">
      <summary>
            Registers the specified reciever.
            </summary>
      <param name="rec">The rec.</param>
    </member>
    <member name="M:PloobsEngine.Commands.CommandProcessor.UnRegister(PloobsEngine.Commands.IReciever)">
      <summary>
            Unregister a specified reciever
            </summary>
      <param name="rec">The rec.</param>
    </member>
    <member name="T:BehaviorTrees.ForceSuccess`1">
      <summary>
            Executing this node will always succeed no matter what will be the
            results of the decorated node execution.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.ForceSuccess`1.Evaluate(`0)">
      <summary>
            Creates task that will execute decorated node, but force returning success.
            </summary>
    </member>
    <member name="T:BehaviorTrees.ForceSuccessTask`1">
      <summary>
            Task responsible for executing ForceSuccess node.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.ForceSuccessTask`1.Execute(`0,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Executes decorated node's task, but forces returning success.
            </summary>
      <returns>TaskResult.Failure</returns>
    </member>
    <member name="T:BehaviorTrees.Entity">
      <summary>
            Base class for all entities, should be defined elsewhere if the code will be integrated.
            </summary>
    </member>
    <member name="T:BehaviorTrees.ConditionDelegate`1">
      <summary>
            Delegate for condition, i.e. a method that should not have side effects
            but the result is important cause it checks whether condition is met or not.
            </summary>
      <typeparam name="E">Type of the entity.</typeparam>
      <param name="entity">Entity object whhose method is refered..</param>
      <returns>
      </returns>
    </member>
    <member name="T:BehaviorTrees.Condition`1">
      <summary>
            Node that can check some condition.
            </summary>
      <typeparam name="E">Entity type.</typeparam>
    </member>
    <member name="T:BehaviorTrees.ConditionTask`1">
      <summary>
            Task responsible for executing a condition node.
            </summary>
      <typeparam name="E">Entity type.</typeparam>
    </member>
    <member name="M:BehaviorTrees.ConditionTask`1.#ctor(BehaviorTrees.ConditionDelegate{`0})">
      <summary>
            Instantiates condition task with a given condition delegate method.
            </summary>
      <param name="entity">Entity used in execution.</param>
      <param name="condition">Condition method.</param>
    </member>
    <member name="M:BehaviorTrees.ConditionTask`1.Execute(`0,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Calls method bound via action delegate.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.Spline.CubicSpline">
      <summary>
            N-dimensional cubic spline interpolator.
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Spline.CubicSpline.data">
      <summary>
            Sorted list of data points (x, y[]).
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Spline.CubicSpline.dimensions">
      <summary>
            Number of dimensions for y values.
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Spline.CubicSpline.xData">
      <summary>
            Current x values of data as a sorted array.
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Spline.CubicSpline.yData">
      <summary>
            Current y values of data as sorted array. First index is the dimension.
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Spline.CubicSpline.xIntervals">
      <summary>
            Current intervals between x values.
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Spline.CubicSpline.bCoeff">
      <summary>
            B Coefficients. First index is the dimension.
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Spline.CubicSpline.cCoeff">
      <summary>
            C Coefficients. First index is the dimension.
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Spline.CubicSpline.dCoeff">
      <summary>
            D Coefficients. First index is the dimension.
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.Spline.CubicSpline.needUpdate">
      <summary>
            Flag indicating that spline coefficients need to be updated.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.CubicSpline.#ctor">
      <summary>
            Creates an instance of the cubic spline class with one dimension.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.CubicSpline.#ctor(System.Int32)">
      <summary>
            Creates an instance of the cubic spline class with 
            the specified number of dimensions.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.CubicSpline.Clear">
      <summary>
            Clears the data array of the spline.
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.CubicSpline.AddDataPoint(System.Double,System.Double[])">
      <summary>
            Adds a data point to the spline. 
            If the data point is added, the coefficients are recalculated the next time
            Interpolate() is called.
            </summary>
      <param name="x">X coordinate of the spline. Must be unique (i.e. not added before).</param>
      <param name="y">
            Y coordinates of the spline. 
            The number of values in the array must match the number of dimensions if the spline.
            </param>
      <returns>True if the point was added, false otherwise.</returns>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.CubicSpline.Interpolate(System.Double)">
      <summary>
            Interpolate spline at position X.
            May recalculate coefficients if they need to be updated (i.e. after AddDataPoint).
            </summary>
      <param name="x">Position X.</param>
      <returns>Interpolated Y.</returns>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.CubicSpline.BinaryIndexSearch(System.Double[],System.Double)">
      <summary>
            Binary search for the lowest index where values[i] lte x.
            If x lt MIN(values), zero is returned and if x gt MAX(values), N-1 is returned.
            </summary>
      <param name="values">Sorted array of N values.</param>
      <param name="value">Value to find in array</param>
      <returns>The found lowest index in the range from 0 to N-1.</returns>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.CubicSpline.CalculateIntervals(System.Double[])">
      <summary>
            Calculate intervals between values.
            </summary>
      <param name="values">Array of N values, where N&gt;1.</param>
      <returns>Array of N-1 intervals. </returns>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.CubicSpline.CalculateC(System.Double[],System.Double[],System.Double[])">
      <summary>
            Calculates C coefficients from A, X and intervals.
            </summary>
      <param name="a">A coefficients</param>
      <param name="xdata">Array of X data</param>
      <param name="intervals">Intervals</param>
      <returns>C coefficients</returns>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.CubicSpline.CalculateB(System.Double[],System.Double[],System.Double[])">
      <summary>
            Calculates B coefficients from A, C and intervals.
            </summary>
      <param name="a">A coefficients</param>
      <param name="c">C coefficients</param>
      <param name="interval">Intervals</param>
      <returns>B coefficients</returns>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.CubicSpline.CalculateD(System.Double[],System.Double[])">
      <summary>
            Calculates D coefficients from C and interval.
            </summary>
      <param name="c">C coefficients.</param>
      <param name="interval">Intervals.</param>
      <returns>D coefficients.</returns>
    </member>
    <member name="M:PloobsEngine.Utils.Spline.CubicSpline.CalculateCoefficients">
      <summary>
            Calculate coefficients for the spline and the current data array.
            </summary>
    </member>
    <member name="P:PloobsEngine.Utils.Spline.CubicSpline.Dimensions">
      <summary>
            Gets the number of dimensions of the spline.
            </summary>
    </member>
    <member name="P:PloobsEngine.Utils.Spline.CubicSpline.Count">
      <summary>
            Gets the number of points in the spline.
            </summary>
    </member>
    <member name="P:PloobsEngine.Utils.Spline.CubicSpline.CanInterpolate">
      <summary>
            Gets a flag indicating wether sufficient points have been added
            so that interpolation can occur.
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.IDummy">
      <summary>
            Specification of a Dummy
            Dummy is everything that can be put in a world and recovered later
            Its NOT USED by the engine for nothing (the engine just keep it there)
            Usefull to pass information from an editor to the game, cause dummies
            are serializable
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl.IDummy.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>
            The name.
            </value>
    </member>
    <member name="T:PloobsEngine.Modelo.BatchType">
      <summary>
            Batch Type
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchType.INDEXED">
      <summary>
            Draw Indexed
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchType.NORMAL">
      <summary>
            Draw without index
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchType.INSTANCED">
      <summary>
            Draw Instanced Geometry
            </summary>
    </member>
    <member name="T:PloobsEngine.Modelo.BatchInformation">
      <summary>
            Batch Information
            Contains Draw data from a model (vertices, indexes) and info about how to draw them
            The use should just use the Constructor to change Data, dont use the accessor public methods
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.InstanceCount">
      <summary>
            For Instancing, the number of objects
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.PrimitiveType">
      <summary>
            Primitive Type
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.BatchType">
      <summary>
            Batch Type
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.BaseVertex">
      <summary>
            Base Verter
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.NumVertices">
      <summary>
            Num Vertices
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.PrimitiveCount">
      <summary>
            Primitive COunt
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.StartIndex">
      <summary>
            Start Index
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.StartVertex">
      <summary>
            Start Vertex
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.StreamOffset">
      <summary>
            Stream Offset
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.VertexDeclaration">
      <summary>
            Vertex Declaration
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.VertexStride">
      <summary>
            VertexStride
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.VertexBuffer">
      <summary>
            VertexBuffer
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.InstancedVertexBuffer">
      <summary>
            Instanced VertexBuffer
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.IndexBuffer">
      <summary>
            IndexBuffer
            </summary>
    </member>
    <member name="F:PloobsEngine.Modelo.BatchInformation.ModelLocalTransformation">
      <summary>
            Local Transformation
            </summary>
    </member>
    <member name="M:PloobsEngine.Modelo.BatchInformation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,PloobsEngine.Modelo.BatchType,Microsoft.Xna.Framework.Graphics.PrimitiveType)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Modelo.BatchInformation" /> class.
            Indexed or Normal
            Use OTHER constructor to created INSTANCED
            </summary>
      <param name="BaseVertex">The base vertex.</param>
      <param name="NumVertices">The num vertices.</param>
      <param name="PrimitiveCount">The primitive count.</param>
      <param name="StartIndexOrVertex">The start index or vertex.</param>
      <param name="StreamOffset">The stream offset.</param>
      <param name="VertexDeclaration">The vertex declaration.</param>
      <param name="VertexStride">The vertex stride.</param>
      <param name="BatchType">Type of the batch.</param>
      <param name="PrimitiveType">Type of the primitive.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.BatchInformation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,Microsoft.Xna.Framework.Graphics.PrimitiveType)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Modelo.BatchInformation" /> class.
            Indexed
            </summary>
      <param name="BaseVertex">The base vertex.</param>
      <param name="NumVertices">The num vertices.</param>
      <param name="PrimitiveCount">The primitive count.</param>
      <param name="StartIndex">The start index.</param>
      <param name="StreamOffset">The stream offset.</param>
      <param name="VertexDeclaration">The vertex declaration.</param>
      <param name="VertexStride">The vertex stride.</param>
      <param name="PrimitiveType">Type of the primitive.</param>
    </member>
    <member name="M:PloobsEngine.Modelo.BatchInformation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexDeclaration,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.PrimitiveType)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Modelo.BatchInformation" /> class.
            INSTACED CONSTRUCTOR
            </summary>
      <param name="BaseVertex">The base vertex.</param>
      <param name="NumVertices">The num vertices.</param>
      <param name="PrimitiveCount">The primitive count.</param>
      <param name="StartIndex">The start index.</param>
      <param name="StreamOffset">The stream offset.</param>
      <param name="VertexDeclaration">The vertex declaration.</param>
      <param name="VertexStride">The vertex stride.</param>
      <param name="instanceCount">The instance count.</param>
      <param name="PrimitiveType">Type of the primitive.</param>
    </member>
    <member name="T:PloobsEngine.MessageSystem.SystemRecieverMessage">
      <summary>    
            Helper to Handle some message
            </summary>
    </member>
    <member name="M:PloobsEngine.MessageSystem.SystemRecieverMessage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.MessageSystem.SystemRecieverMessage" /> class.
            </summary>
    </member>
    <member name="M:PloobsEngine.MessageSystem.SystemRecieverMessage.HandleThisMessageType(PloobsEngine.MessageSystem.SenderType)">
      <summary>
            Handles a message from determined sender type.
            </summary>
      <param name="type">Sender type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:PloobsEngine.MessageSystem.SystemRecieverMessage.HandleMessage(PloobsEngine.MessageSystem.Message)">
      <summary>
            Handles the message.
            </summary>
      <param name="mes">The mes.</param>
    </member>
    <member name="M:PloobsEngine.MessageSystem.SystemRecieverMessage.GetId">
      <summary>
            return the entity id
            </summary>
      <returns>
            the id
            </returns>
    </member>
    <member name="M:PloobsEngine.MessageSystem.SystemRecieverMessage.SetId(System.Int64)">
      <summary>
            sets the id
            </summary>
      <param name="id">
      </param>
    </member>
    <member name="M:PloobsEngine.MessageSystem.SystemRecieverMessage.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.IObject2DAtachtment">
      <summary>
            2D object attachement
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.IObject2DAtachtment.Update(PloobsEngine.SceneControl._2DScene.I2DObject,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates the atachment.
            </summary>
      <param name="obj">The obj.</param>
      <param name="gt">The gt.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl._2DScene.Camera2D">
      <summary>
            2D camera System
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.Camera2D.#ctor(PloobsEngine.Engine.GraphicInfo)">
      <summary>
            The constructor for the Camera2D class.
            </summary>
      <param name="graphics">
      </param>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.Camera2D.ResetCamera">
      <summary>
            Resets the camera to default values.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.Camera2D.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Moves the camera forward one timestep.
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl._2DScene.Camera2D.CleanUp">
      <summary>
            Called when the attached screen is removed
            If this camera is not attached to a screen, this method is not called =P
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.DistanceToReach">
      <summary>
            Gets or sets the distance to reach the target.
            default 2
            </summary>
      <value>
            The distance to reach.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.SpeedUpDistance">
      <summary>
            Gets or sets the speed up distance.
            default 10
            </summary>
      <value>
            The speed up distance.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.IntertiaController">
      <summary>
            Gets or sets the intertia controller value
            default 1
            </summary>
      <value>
            The intertia controller.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.IntertiaControllerDivider">
      <summary>
            Gets or sets the intertia controller divider value.
            deafault 10
            </summary>
      <value>
            The intertia controller divider.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.IntertiaControllerExp">
      <summary>
            Gets or sets the intertia controller exp value.
            default 2
            </summary>
      <value>
            The intertia controller exp.
            </value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.Position">
      <summary>
            The current position of the camera.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.MinPosition">
      <summary>
            The furthest up, and the furthest left the camera can go.
            if this value equals maxPosition, then no clamping will be 
            applied (unless you override that function).
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.MaxPosition">
      <summary>
            the furthest down, and the furthest right the camera will go.
            if this value equals minPosition, then no clamping will be 
            applied (unless you override that function).
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.Rotation">
      <summary>
            The current rotation of the camera in radians.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.MinRotation">
      <summary>
            Gets or sets the minimum rotation in radians.
            </summary>
      <value>The min rotation.</value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.MaxRotation">
      <summary>
            Gets or sets the maximum rotation in radians.
            </summary>
      <value>The max rotation.</value>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.Zoom">
      <summary>
            The current rotation of the camera in radians.
            </summary>
    </member>
    <member name="P:PloobsEngine.SceneControl._2DScene.Camera2D.TrackingBody">
      <summary>
            the body that this camera is currently tracking. 
            Null if not tracking any.
            </summary>
    </member>
    <member name="E:PloobsEngine.SceneControl._2DScene.Camera2D.ReachedTheTrackingPosition">
      <summary>
            Occurs when [reached the tracking position].
            </summary>
    </member>
    <member name="T:Bnoerj.AI.Steering.LocalityQueryDB">
      <summary>
            This structure represents the spatial database.  Typically one of
            these would be created, by a call to lqCreateDatabase, for a given
            application.
            </summary>
    </member>
    <member name="T:Bnoerj.AI.Steering.LocalityQueryDB.ClientProxy">
      <summary>
            This structure is a proxy for (and contains a pointer to) a client
            (application) obj in the spatial database.  One of these exists
            for each client obj.  This might be included within the
            structure of a client obj, or could be allocated separately.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physics.Bepu.ObjectMover">
      <summary>
            Specialized Object Proper to Movimentation
            </summary>
    </member>
    <member name="T:PloobsEngine.Physic.Constraints.BepuConstraint.PointPointConstraint">
      <summary>
            Point to Point Constraint
            </summary>
    </member>
    <member name="P:PloobsEngine.Physic.Constraints.BepuConstraint.MultipleSubConstraints.Constraint">
      <summary>
            Gets or sets the joint.
            </summary>
      <value>
            The joint.
            </value>
    </member>
    <member name="P:PloobsEngine.Physic.Constraints.BepuConstraint.MultipleSubConstraints.BodyA">
      <summary>
            Gets or sets the body A.
            </summary>
      <value>
            The body A.
            </value>
    </member>
    <member name="P:PloobsEngine.Physic.Constraints.BepuConstraint.MultipleSubConstraints.BodyB">
      <summary>
            Gets or sets the body B.
            </summary>
      <value>
            The body B.
            </value>
    </member>
    <member name="T:PloobsEngine.Material.ForwardAnimatedMaterial">
      <summary>
            Forward Phone7 Animated Material
            </summary>
    </member>
    <member name="M:PloobsEngine.Material.ForwardAnimatedMaterial.#ctor(PloobsEngine.Modelo.Animation.IAnimatedController,PloobsEngine.Material.ForwardSimpleAnimationShader)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Material.ForwardMaterial" /> class.
            </summary>
      <param name="controller">The controller.</param>
      <param name="shader">The shader.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardAnimatedMaterial.Initialization(PloobsEngine.Engine.GraphicInfo,PloobsEngine.Engine.GraphicFactory,PloobsEngine.SceneControl.IObject)">
      <summary>
            Initializations the specified Material.
            </summary>
      <param name="ginfo">The ginfo.</param>
      <param name="factory">The factory.</param>
      <param name="obj">The obj.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardAnimatedMaterial.PreDrawnPhase(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IWorld,PloobsEngine.SceneControl.IObject,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight},PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Pre drawn Function.
            Called before all the objects are draw
            </summary>
      <param name="gt">The gt.</param>
      <param name="mundo">The mundo.</param>
      <param name="obj">The obj.</param>
      <param name="cam">The cam.</param>
      <param name="lights">The lights.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardAnimatedMaterial.PosDrawnPhase(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight},PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Pos drawn Function.
            Called after all objects are Draw
            </summary>
      <param name="gt">The gt.</param>
      <param name="obj">The obj.</param>
      <param name="cam">The cam.</param>
      <param name="lights">The lights.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardAnimatedMaterial.Drawn(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.Cameras.ICamera,System.Collections.Generic.IList{PloobsEngine.Light.ILight},PloobsEngine.SceneControl.RenderHelper)">
      <summary>
            Normal Drawn Function.
            </summary>
      <param name="gt">The gt.</param>
      <param name="obj">The obj.</param>
      <param name="cam">The cam.</param>
      <param name="lights">The lights.</param>
      <param name="render">The render.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardAnimatedMaterial.Update(Microsoft.Xna.Framework.GameTime,PloobsEngine.SceneControl.IObject,PloobsEngine.SceneControl.IWorld)">
      <summary>
            Update.
            </summary>
      <param name="gametime">The gametime.</param>
      <param name="obj">The obj.</param>
      <param name="lights">The lights.</param>
    </member>
    <member name="M:PloobsEngine.Material.ForwardAnimatedMaterial.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:PloobsEngine.Material.ForwardAnimatedMaterial.CleanUp(PloobsEngine.Engine.GraphicFactory)">
      <summary>
            Cleans up.
            </summary>
      <param name="factory">
      </param>
    </member>
    <member name="P:PloobsEngine.Material.ForwardAnimatedMaterial.Shader">
      <summary>
            Gets or sets the shadder.
            </summary>
      <value>
            The shadder.
            </value>
    </member>
    <member name="P:PloobsEngine.Material.ForwardAnimatedMaterial.MaterialType">
      <summary>
            Gets the type of the material.
            </summary>
      <value>
            The type of the material.
            </value>
    </member>
    <member name="P:PloobsEngine.Material.ForwardAnimatedMaterial.CanCreateShadow">
      <summary>
            Gets or sets a value indicating whether this material is [affected by shadow].
            </summary>
      <value>
        <c>true</c> if [affected by shadow]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:PloobsEngine.Features.DebugDraw.DebugDraw">
      <summary>
            Component responsible for drawing 3D primitives on the top of the screen (with depth testing enabled)
            </summary>
    </member>
    <member name="T:PloobsEngine.Audio.Static3DSound">
      <summary>
            Static 3D sound
            </summary>
    </member>
    <member name="M:PloobsEngine.Audio.Static3DSound.#ctor(PloobsEngine.Engine.GraphicFactory,System.String,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Audio.Static3DSound" /> class.
            </summary>
      <param name="factory">The factory.</param>
      <param name="audioname">The audioname.</param>
      <param name="Position">The position.</param>
    </member>
    <member name="M:PloobsEngine.Audio.Static3DSound.Update(Microsoft.Xna.Framework.GameTime,PloobsEngine.Cameras.ICamera)">
      <summary>
            Updates .
            </summary>
      <param name="gt">The gt.</param>
      <param name="camera">The camera.</param>
    </member>
    <member name="P:PloobsEngine.Audio.Static3DSound.EmiterPosition">
      <summary>
            Gets or sets the emiter position.
            </summary>
      <value>
            The emiter position.
            </value>
    </member>
    <member name="T:PloobsEngine.IA.WaypointHandler">
      <summary>
            Interface to user handling waypoints
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.WaypointHandler.Clear">
      <summary>
            Restart the handler
             </summary>
    </member>
    <member name="M:PloobsEngine.IA.WaypointHandler.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.IA.WaypointHandler" /> class.
            </summary>
      <param name="mapName">Name of the map.</param>
    </member>
    <member name="M:PloobsEngine.IA.WaypointHandler.AddDefaultWaypointUnconnected(Microsoft.Xna.Framework.Vector3,PloobsEngine.IA.WAYPOINTTYPE)">
      <summary>
            Adds the an unconnected waypoint to the map .
            </summary>
      <param name="worldPos">The world pos.</param>
      <param name="type">The type.</param>
    </member>
    <member name="M:PloobsEngine.IA.WaypointHandler.AddWaypointUnconnected(PloobsEngine.IA.Waypoint)">
      <summary>
            Adds the an unconnected waypoint to the map .
            </summary>
      <param name="waypoint">The waypoint.</param>
    </member>
    <member name="M:PloobsEngine.IA.WaypointHandler.RemoveWaypoint(System.Int32)">
      <summary>
            Removes the waypoint.
            </summary>
      <param name="id">The id.</param>
    </member>
    <member name="M:PloobsEngine.IA.WaypointHandler.SaveConnectedWaypoints(System.String)">
      <summary>
            Saves the connected waypoints to a file.
            </summary>
      <param name="fileName">Name of the file.</param>
    </member>
    <member name="M:PloobsEngine.IA.WaypointHandler.SaveUnconnectedWaypoints(System.String)">
      <summary>
            Saves the unconnected waypoints to a file
            </summary>
      <param name="fileName">Name of the file.</param>
    </member>
    <member name="M:PloobsEngine.IA.WaypointHandler.LoadConnectedWaypoints(System.String)">
      <summary>
            Loads the connected waypoints  from a file
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:PloobsEngine.IA.WaypointHandler.LoadUnconnectedWaypoints(System.String)">
      <summary>
            Loads the unconnected waypoints.
            If it is connected, it will be unconnected
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:PloobsEngine.IA.WaypointHandler.LoadConnectedWaypointsIslands(System.String[],PloobsEngine.IA.IWaypointConnector)">
      <summary>
            Loads the connected waypoints islands.
            </summary>
      <param name="waypoints">The waypoints.</param>
      <param name="connector">The connector.</param>
    </member>
    <member name="M:PloobsEngine.IA.WaypointHandler.Unconnect">
      <summary>
            Unconnects teh waypoints in this handler.
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.WaypointHandler.ConnectWaypoints(PloobsEngine.IA.IWaypointConnector)">
      <summary>
            Connects the waypoints in this handler
            </summary>
      <param name="connector">The connector.</param>
    </member>
    <member name="P:PloobsEngine.IA.WaypointHandler.CurrentWaypointsCollection">
      <summary>
            Gets the current waypoints collection.
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.WaypointsState">
      <summary>
            Handler Waypoints state
            </summary>
    </member>
    <member name="T:PloobsEngine.IA.SimpleMap">
      <summary>
            SImple implementation of a map
            Brutal force one. Do not scale for HUGE number of waypoints
            </summary>
    </member>
    <member name="M:PloobsEngine.IA.SimpleMap.GetClosestWaypoint(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Gets the closest waypoint to a position
            </summary>
      <param name="Position">The position.</param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.Utils.MovingAverage">
      <summary>
            Moving Average class
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.MovingAverage.m_Data">
      <summary>
            Array of elements
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.MovingAverage.m_Total">
      <summary>
            Total amount
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.MovingAverage.m_Size">
      <summary>
            Fixed size of the array
            </summary>
    </member>
    <member name="F:PloobsEngine.Utils.MovingAverage.m_Count">
      <summary>
            How many elements we've got so far
            </summary>
    </member>
    <member name="M:PloobsEngine.Utils.MovingAverage.#ctor(System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="size">Set the fixed size of the array here</param>
    </member>
    <member name="M:PloobsEngine.Utils.MovingAverage.Add(System.Double)">
      <summary>
            Add an element
            </summary>
    </member>
    <member name="P:PloobsEngine.Utils.MovingAverage.Data">
      <summary>
            Get data
            </summary>
    </member>
    <member name="P:PloobsEngine.Utils.MovingAverage.Count">
      <summary>
            Get count
            </summary>
    </member>
    <member name="P:PloobsEngine.Utils.MovingAverage.Value">
      <summary>
            Get value
            </summary>
    </member>
    <member name="T:PloobsEngine.Input.MouseButtons">
      <summary>
            Mouse Buttoms
            </summary>
    </member>
    <member name="T:PloobsEngine.Input.InputAdvanced">
      <summary>
            Component responsible for processing Keyboard and Mouse 
            </summary>
    </member>
    <member name="F:PloobsEngine.Input.InputAdvanced.MyName">
      <summary>
            Name of the Component
            </summary>
    </member>
    <member name="M:PloobsEngine.Input.InputAdvanced.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Input.InputAdvanced" /> class.
            </summary>
    </member>
    <member name="M:PloobsEngine.Input.InputAdvanced.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Updates the specified game time.
            </summary>
      <param name="gameTime">The game time.</param>
    </member>
    <member name="M:PloobsEngine.Input.InputAdvanced.getMyName">
      <summary>
            The name of the reciever
            MUST BE UNIQUE
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:PloobsEngine.Input.InputAdvanced.ComponentType">
      <summary>
            Gets the type of the component type.
            </summary>
      <value>
            The type of the component.
            </value>
    </member>
    <member name="T:PloobsEngine.Input.BindAction">
      <summary>
            Possibles Binding Options
            </summary>
    </member>
    <member name="F:PloobsEngine.Input.BindAction.ADD">
      <summary>
            add a bind
            </summary>
    </member>
    <member name="F:PloobsEngine.Input.BindAction.REMOVE">
      <summary>
            Remove a bind
            </summary>
    </member>
    <member name="T:PloobsEngine.Input.InputMask">
      <summary>
            Input Chanels that can be used
            When you register a Command, it will be bind to a mask, you can turn the mask of and all the binds of this mask are 
            turned off, you can turn a mask on and ....
            Usefull When you have Menus and Screens, and you need to change between then, just set the corresponding inputs
            to diferent masks and turn one on and the other off when necessary
            </summary>
    </member>
    <member name="F:PloobsEngine.Input.InputMask.GALL">
      <summary>
            All Binds ON
            </summary>
    </member>
    <member name="F:PloobsEngine.Input.InputMask.GNONE">
      <summary>
            NONE BINDS ON
            </summary>
    </member>
    <member name="F:PloobsEngine.Input.InputMask.GSYSTEM">
      <summary>
            ALWAYS ON, no matter what the mask forced
            </summary>
    </member>
    <member name="T:PloobsEngine.SceneControl.OnPicked">
      <summary>
            Fired when Picking something
            </summary>
      <param name="SegmentInterceptInfo">The segment intercept info.</param>
    </member>
    <member name="T:PloobsEngine.SceneControl.Picking">
      <summary>
            Picking Helper
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.Picking.#ctor(PloobsEngine.SceneControl.IScene,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.Picking" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="pickingRayDistance">The picking ray distance.</param>
    </member>
    <member name="M:PloobsEngine.SceneControl.Picking.Pick(PloobsEngine.SceneControl.IWorld,PloobsEngine.Engine.GraphicInfo,System.Single,System.Single,System.Single,System.Func{PloobsEngine.Physics.IPhysicObject,System.Boolean})">
      <summary>
            Picking in x/y screen coordinates
            </summary>
      <param name="world">
      </param>
      <param name="info">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="pickingDistance">
      </param>
      <param name="intercept">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:PloobsEngine.SceneControl.GUI.NeoforceGui">
      <summary>
            Neoforce tomshade Gui implementation
            </summary>
    </member>
    <member name="M:PloobsEngine.SceneControl.GUI.NeoforceGui.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.SceneControl.GUI.NeoforceGui" /> class.
            </summary>
      <param name="skin">The skin. Null for default</param>
    </member>
    <member name="P:PloobsEngine.SceneControl.GUI.NeoforceGui.Manager">
      <summary>
            Gets the Neoforce manager.
            </summary>
    </member>
    <member name="T:Bnoerj.AI.Steering.Trail">
      <summary>
            Provides support to visualize the recent path of a vehicle.
            </summary>
    </member>
    <member name="M:Bnoerj.AI.Steering.Trail.#ctor">
      <summary>
            Initializes a new instance of Trail.
            </summary>
    </member>
    <member name="M:Bnoerj.AI.Steering.Trail.#ctor(System.Single,System.Int32)">
      <summary>
            Initializes a new instance of Trail.
            </summary>
      <param name="duration">The amount of time the trail represents.</param>
      <param name="vertexCount">The number of smaples along the trails length.</param>
    </member>
    <member name="M:Bnoerj.AI.Steering.Trail.Record(System.Single,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Records a position for the current time, called once per update.
            </summary>
      <param name="currentTime">
      </param>
      <param name="position">
      </param>
    </member>
    <member name="M:Bnoerj.AI.Steering.Trail.Draw(Bnoerj.AI.Steering.IDraw)">
      <summary>
            Draws the trail as a dotted line, fading away with age.
            </summary>
    </member>
    <member name="M:Bnoerj.AI.Steering.Trail.Clear">
      <summary>
            Clear trail history. Used to prevent long streaks due to teleportation.
            </summary>
    </member>
    <member name="P:Bnoerj.AI.Steering.Trail.TrailColor">
      <summary>
            Gets or sets the color of the trail.
            </summary>
    </member>
    <member name="P:Bnoerj.AI.Steering.Trail.TickColor">
      <summary>
            Gets or sets the color of the ticks.
            </summary>
    </member>
    <member name="T:PloobsEngine.Physic2D.Farseer.GhostObject">
      <summary>
            Ghost Object implementation (works on Farseer)
            </summary>
    </member>
    <member name="M:PloobsEngine.Physic2D.Farseer.GhostObject.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:PloobsEngine.Physic2D.Farseer.GhostObject" /> class.
            </summary>
      <param name="Position">The position.</param>
      <param name="rotation">The rotation.</param>
    </member>
    <member name="T:PloobsEngine.Loader.ObjectInformation">
      <summary>
            Struct that represents a Model    
            </summary>
    </member>
    <member name="M:PloobsEngine.Loader.ObjectInformation.HasTexture(PloobsEngine.Modelo.TextureType)">
      <summary>
            Determines whether this model has the specified texture type.
            </summary>
      <param name="type">The type.</param>
      <returns>
        <c>true</c> if the specified type has texture; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:PloobsEngine.Loader.CameraInfo">
      <summary>
            Camera Info
            </summary>
    </member>
    <member name="T:PloobsEngine.Loader.DummyInfo">
      <summary>
            Dummy Info
            </summary>
    </member>
    <member name="T:PloobsEngine.Loader.ConstraintInfo">
      <summary>
            Constraint info
            </summary>
    </member>
    <member name="T:PloobsEngine.Loader.ModelLoaderData">
      <summary>
            Data that represents a Model Loaded
            </summary>
    </member>
    <member name="P:PloobsEngine.Loader.ModelLoaderData.DummyInfo">
      <summary>
            Gets or sets the dummyinfo list.
            </summary>
      <value>
            The dummy info.
            </value>
    </member>
    <member name="P:PloobsEngine.Loader.ModelLoaderData.ParticleInfo">
      <summary>
            Gets or sets the particle info.
            </summary>
      <value>
            The particle info.
            </value>
    </member>
    <member name="P:PloobsEngine.Loader.ModelLoaderData.ConstraintInfo">
      <summary>
            Gets or sets the constraint info.
            </summary>
      <value>
            The constraint info.
            </value>
    </member>
    <member name="P:PloobsEngine.Loader.ModelLoaderData.CameraInfo">
      <summary>
            Gets or sets the camera info list.
            </summary>
      <value>
            The camera info.
            </value>
    </member>
    <member name="P:PloobsEngine.Loader.ModelLoaderData.LightsInfo">
      <summary>
            Gets or sets the lights info list.
            </summary>
      <value>
            The lights info.
            </value>
    </member>
    <member name="P:PloobsEngine.Loader.ModelLoaderData.ModelMeshesInfo">
      <summary>
            Gets or sets the model meshes info list.
            </summary>
      <value>
            The model meshes info.
            </value>
    </member>
    <member name="M:PloobsEngine.Cameras.CameraRecordPath.#ctor(PloobsEngine.SceneControl.IScreen,PloobsEngine.Cameras.ICamera,Microsoft.Xna.Framework.CurveLoopType)">
      <summary>
            CameraRecordPath
            </summary>
      <param name="screen">The screen.</param>
      <param name="cam">The cam.</param>
      <param name="CurveLoopType">Attenuation in the path curves</param>
    </member>
    <member name="T:PloobsEngine.IA.Genetic.GenomeComparer">
      <summary>
            Compares genomes by fitness
            </summary>
    </member>
    <member name="T:BehaviorTrees.Wait`1">
      <summary>
            Decorator node which waits certain amount of time and then executes
            decorated node.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.Wait`1.#ctor(System.Double,BehaviorTrees.Node{`0})">
      <summary>
            Instantiates wait decorator node with a given amount of
            seconds to wait
            </summary>
    </member>
    <member name="M:BehaviorTrees.Wait`1.Evaluate(`0)">
      <summary>
            Creates task that will return TaskResult.Running until the specified amount of seconds
            doesn't pass.
            </summary>
      <param name="gameTime">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BehaviorTrees.WaitTask`1">
      <summary>
            Task responsible for running Wait node.
            </summary>
      <typeparam name="E">
      </typeparam>
    </member>
    <member name="M:BehaviorTrees.WaitTask`1.Execute(`0,Microsoft.Xna.Framework.GameTime)">
      <summary>
            Return TaskResult.Running until the specified amount of seconds
            doesn't pass.
            </summary>
      <param name="gameTime">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:BehaviorTrees.TaskResult">
      <summary>
            The result of executing the node.
            </summary>
    </member>
    <member name="T:BEPUphysics.ISpaceObject">
      <summary>
             Defines an object which can be managed by an ISpace.
            </summary>
    </member>
    <member name="M:BEPUphysics.ISpaceObject.OnAdditionToSpace(BEPUphysics.ISpace)">
      <summary>
            Called after the object is added to a space.
            </summary>
      <param name="newSpace">
      </param>
    </member>
    <member name="M:BEPUphysics.ISpaceObject.OnRemovalFromSpace(BEPUphysics.ISpace)">
      <summary>
            Called before an object is removed from its space.
            </summary>
    </member>
    <member name="P:BEPUphysics.ISpaceObject.Space">
      <summary>
            Gets the Space to which the object belongs.
            </summary>
    </member>
    <member name="P:BEPUphysics.ISpaceObject.Tag">
      <summary>
            Gets or sets the user data associated with this object.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.ISpaceUpdateable">
      <summary>
             Defines an object which is updated by the space.
             These refer to the special Updateable types which
             allow for easier integration into the update flow of the space.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.ISpaceUpdateable.IsUpdatedSequentially">
      <summary>
            Gets and sets whether or not the updateable should be updated sequentially even in a multithreaded space.
            If this is true, the updateable can make use of the space's ThreadManager for internal multithreading.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.ISpaceUpdateable.IsUpdating">
      <summary>
            Gets and sets whether or not the updateable should be updated by the space.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.ISpaceUpdateable.Managers">
      <summary>
             List of managers owning the updateable.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.Updateable">
      <summary>
             Convenience superclass of Updateables.
             Updateables are updated by the Space at various
             points during the execution of the engine
             to support easy extensions.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.Updateable.OnAdditionToSpace(BEPUphysics.ISpace)">
      <summary>
            Called after the object is added to a space.
            </summary>
      <param name="newSpace">
      </param>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.Updateable.OnRemovalFromSpace(BEPUphysics.ISpace)">
      <summary>
            Called before an object is removed from its space.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.Updateable.IsUpdatedSequentially">
      <summary>
            Gets and sets whether or not the updateable should be updated sequentially even in a multithreaded space.
            If this is true, the updateable can make use of the space's ThreadManager for internal multithreading.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.Updateable.IsUpdating">
      <summary>
            Gets and sets whether or not the updateable should be updated by its manager.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.Updateable.Space">
      <summary>
             Space that owns the updateable.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.Updateable.Tag">
      <summary>
            Gets or sets the user data associated with this object.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.IDuringForcesUpdateable">
      <summary>
             Defines an object which is updated by a space during force application.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.IDuringForcesUpdateable.Update(System.Single)">
      <summary>
             Updates the object during force application.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="T:BEPUphysics.Paths.PathFollowing.EntityRotator">
      <summary>
            Pushes an entity around according to goal positions and orientations.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.#ctor(BEPUphysics.Entities.Entity)">
      <summary>
            Constructs a new EntityRotator.
            </summary>
      <param name="e">Entity to move.</param>
    </member>
    <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor)">
      <summary>
            Constructs a new EntityRotator.
            </summary>
      <param name="e">Entity to move.</param>
      <param name="angularMotor">Motor to use for angular motion if the entity is dynamic.</param>
    </member>
    <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.GetAngularVelocity(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>
            Gets the angular velocity necessary to change an entity's orientation from
            the starting quaternion to the ending quaternion over time dt.
            </summary>
      <param name="start">Initial orientation.</param>
      <param name="end">Final orientation.</param>
      <param name="dt">Time over which the angular velocity is to be applied.</param>
      <returns>Angular velocity to reach the goal in time.</returns>
    </member>
    <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.OnAdditionToSpace(BEPUphysics.ISpace)">
      <summary>
            Adds the motors to the solver.  Called automatically.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.PathFollowing.EntityRotator.OnRemovalFromSpace(BEPUphysics.ISpace)">
      <summary>
            Removes the motors from the solver.  Called automatically.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.PathFollowing.EntityRotator.AngularMotor">
      <summary>
            Gets the angular motor used by the entity rotator.
            When the affected entity is dynamic, it is pushed by motors.
            This ensures that its interactions and collisions with
            other entities remain stable.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.PathFollowing.EntityRotator.Entity">
      <summary>
            Gets or sets the entity being pushed by the entity rotator.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.PathFollowing.EntityRotator.TargetOrientation">
      <summary>
            Gets or sets the target orientation of the entity rotator.
            </summary>
    </member>
    <member name="T:BEPUphysics.MathExtensions.Matrix3X2">
      <summary>
            3 row, 2 column matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M11">
      <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M12">
      <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M21">
      <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M22">
      <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M31">
      <summary>
            Value at row 3, column 1 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X2.M32">
      <summary>
            Value at row 3, column 2 of the matrix.
            </summary>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a new 3 row, 2 column matrix.
            </summary>
      <param name="m11">Value at row 1, column 1 of the matrix.</param>
      <param name="m12">Value at row 1, column 2 of the matrix.</param>
      <param name="m21">Value at row 2, column 1 of the matrix.</param>
      <param name="m22">Value at row 2, column 2 of the matrix.</param>
      <param name="m31">Value at row 2, column 1 of the matrix.</param>
      <param name="m32">Value at row 2, column 2 of the matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Add(BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
      <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
      <param name="a">First matrix to add.</param>
      <param name="b">Second matrix to add.</param>
      <param name="result">Sum of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Multiply(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
      <summary>
            Multiplies the two matrices.
            </summary>
      <param name="a">First matrix to multiply.</param>
      <param name="b">Second matrix to multiply.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Multiply(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
      <summary>
            Multiplies the two matrices.
            </summary>
      <param name="a">First matrix to multiply.</param>
      <param name="b">Second matrix to multiply.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Negate(BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
      <summary>
            Negates every element in the matrix.
            </summary>
      <param name="matrix">Matrix to negate.</param>
      <param name="result">Negated matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Subtract(BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix3X2@)">
      <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
      <param name="a">First matrix to subtract.</param>
      <param name="b">Second matrix to subtract.</param>
      <param name="result">Difference of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Transform(Microsoft.Xna.Framework.Vector2@,BEPUphysics.MathExtensions.Matrix3X2@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Transforms the vector by the matrix.
            </summary>
      <param name="v">Vector2 to transform.  Considered to be a column vector for purposes of multiplication.</param>
      <param name="matrix">Matrix to use as the transformation.</param>
      <param name="result">Column vector product of the transformation.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Transform(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix3X2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Transforms the vector by the matrix.
            </summary>
      <param name="v">Vector2 to transform.  Considered to be a row vector for purposes of multiplication.</param>
      <param name="matrix">Matrix to use as the transformation.</param>
      <param name="result">Row vector product of the transformation.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X2.Transpose(BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix2X3@)">
      <summary>
            Computes the transposed matrix of a matrix.
            </summary>
      <param name="matrix">Matrix to transpose.</param>
      <param name="result">Transposed matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X2.ToString">
      <summary>
            Creates a string representation of the matrix.
            </summary>
      <returns>A string representation of the matrix.</returns>
    </member>
    <member name="T:BEPUphysics.MathExtensions.Matrix2X3">
      <summary>
            2 row, 3 column matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M11">
      <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M12">
      <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M13">
      <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M21">
      <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M22">
      <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix2X3.M23">
      <summary>
            Value at row 2, column 3 of the matrix.
            </summary>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a new 2 row, 2 column matrix.
            </summary>
      <param name="m11">Value at row 1, column 1 of the matrix.</param>
      <param name="m12">Value at row 1, column 2 of the matrix.</param>
      <param name="m13">Value at row 1, column 3 of the matrix.</param>
      <param name="m21">Value at row 2, column 1 of the matrix.</param>
      <param name="m22">Value at row 2, column 2 of the matrix.</param>
      <param name="m23">Value at row 2, column 3 of the matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Add(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@)">
      <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
      <param name="a">First matrix to add.</param>
      <param name="b">Second matrix to add.</param>
      <param name="result">Sum of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Multiply(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix2X3@)">
      <summary>
            Multiplies the two matrices.
            </summary>
      <param name="a">First matrix to multiply.</param>
      <param name="b">Second matrix to multiply.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Multiply(BEPUphysics.MathExtensions.Matrix2X3@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix2X3@)">
      <summary>
            Multiplies the two matrices.
            </summary>
      <param name="a">First matrix to multiply.</param>
      <param name="b">Second matrix to multiply.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Negate(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@)">
      <summary>
            Negates every element in the matrix.
            </summary>
      <param name="matrix">Matrix to negate.</param>
      <param name="result">Negated matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Subtract(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix2X3@)">
      <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
      <param name="a">First matrix to subtract.</param>
      <param name="b">Second matrix to subtract.</param>
      <param name="result">Difference of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Transform(Microsoft.Xna.Framework.Vector2@,BEPUphysics.MathExtensions.Matrix2X3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Transforms the vector by the matrix.
            </summary>
      <param name="v">Vector2 to transform.  Considered to be a row vector for purposes of multiplication.</param>
      <param name="matrix">Matrix to use as the transformation.</param>
      <param name="result">Row vector product of the transformation.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Transform(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix2X3@,Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Transforms the vector by the matrix.
            </summary>
      <param name="v">Vector2 to transform.  Considered to be a column vector for purposes of multiplication.</param>
      <param name="matrix">Matrix to use as the transformation.</param>
      <param name="result">Column vector product of the transformation.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X3.Transpose(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix3X2@)">
      <summary>
            Computes the transposed matrix of a matrix.
            </summary>
      <param name="matrix">Matrix to transpose.</param>
      <param name="result">Transposed matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X3.ToString">
      <summary>
            Creates a string representation of the matrix.
            </summary>
      <returns>A string representation of the matrix.</returns>
    </member>
    <member name="T:BEPUphysics.PositionUpdating.IPositionUpdateable">
      <summary>
             Defines an object capable of a position update.
            </summary>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.IPositionUpdateable.PreUpdatePosition(System.Single)">
      <summary>
             Updates the position state of the object.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="P:BEPUphysics.PositionUpdating.IPositionUpdateable.IsActive">
      <summary>
             Gets whether or not the object is active.
             Only active objects will be updated.
            </summary>
    </member>
    <member name="P:BEPUphysics.PositionUpdating.IPositionUpdateable.PositionUpdater">
      <summary>
             Gets or sets the position updater that owns this updateable.
            </summary>
    </member>
    <member name="T:BEPUphysics.DataStructures.RawList`1">
      <summary>
             No-frills list that wraps an accessible array.
            </summary>
      <typeparam name="T">Type of elements contained by the list.</typeparam>
    </member>
    <member name="T:BEPUphysics.DataStructures.RawList`1.Enumerator">
      <summary>
             Enumerator for the RawList.
            </summary>
    </member>
    <member name="F:BEPUphysics.DataStructures.RawList`1.Elements">
      <summary>
             Direct access to the elements owned by the raw list.
             Be careful about the operations performed on this list;
             use the normal access methods if in doubt.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.#ctor">
      <summary>
             Constructs an empty list.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.#ctor(System.Int32)">
      <summary>
             Constructs an empty list.
            </summary>
      <param name="initialCapacity">Initial capacity to allocate for the list.</param>
      <exception cref="T:System.ArgumentException">Thrown when the initial capacity is zero or negative.</exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
             Constructs a raw list from another list.
            </summary>
      <param name="elements">List to copy.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.RemoveAt(System.Int32)">
      <summary>
            Removes an element from the list.
            </summary>
      <param name="index">Index of the element to remove.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.FastRemoveAt(System.Int32)">
      <summary>
            Removes an element from the list without maintaining order.
            </summary>
      <param name="index">Index of the element to remove.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.Add(`0)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.AddRange(BEPUphysics.DataStructures.RawList{`0})">
      <summary>
             Adds a range of elements to the list from another list.
            </summary>
      <param name="items">Elements to add.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.AddRange(System.Collections.Generic.List{`0})">
      <summary>
             Adds a range of elements to the list from another list.
            </summary>
      <param name="items">Elements to add.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.FastRemove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the collection without maintaining element order.
            </summary>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.ToArray">
      <summary>
            Copies the elements from the list into an array.
            </summary>
      <returns>An array containing the elements in the list.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.Insert(System.Int32,`0)">
      <summary>
            Inserts the element at the specified index.
            </summary>
      <param name="index">Index to insert the item.</param>
      <param name="item">Element to insert.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.FastInsert(System.Int32,`0)">
      <summary>
            Inserts the element at the specified index without maintaining list order.
            </summary>
      <param name="index">Index to insert the item.</param>
      <param name="item">Element to insert.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.GetEnumerator">
      <summary>
             Gets an enumerator for the list.
            </summary>
      <returns>Enumerator for the list.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>
             Sorts the list.
            </summary>
      <param name="comparer">Comparer to use to sort the list.</param>
    </member>
    <member name="P:BEPUphysics.DataStructures.RawList`1.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="P:BEPUphysics.DataStructures.RawList`1.Capacity">
      <summary>
             Gets or sets the current size allocated for the list.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Contact">
      <summary>
            Handles information about a contact point during a collision between two bodies.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.Contact.PenetrationDepth">
      <summary>
            Amount of penetration between the two objects.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.Contact.Id">
      <summary>
            Feature-based id used to match contacts from the previous frame to their current versions.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.Contact.Normal">
      <summary>
            Normal direction of the surface at the contact point.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.Contact.Position">
      <summary>
            Position of the contact point.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Contact.Setup(BEPUphysics.CollisionTests.ContactData@)">
      <summary>
             Sets upt he contact with new information.
            </summary>
      <param name="candidate">Contact data to initialize the contact with.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Contact.Equals(BEPUphysics.CollisionTests.Contact)">
      <summary>
            Determines if two contacts are equal using their id and position.
            </summary>
      <param name="other">Other contact to compare.</param>
      <returns>Whether or not the contacts are equivalent.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Contact.ToString">
      <summary>
            Outputs the position, normal, and depth information of the contact into a string.
            </summary>
      <returns>Position, normal, and depth information of the contact in a string.</returns>
    </member>
    <member name="T:BEPUphysics.CollisionRuleManagement.CollisionRules">
      <summary>
            Stores how an object can interact with other objects through collisions.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRules.CollisionGroupRules">
      <summary>
            Defines any special collision rules between collision groups.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRules.DefaultCollisionRule">
      <summary>
            If a CollisionRule calculation between two colliding objects results in no defined CollisionRule, this value will be used.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRules.DefaultDynamicCollisionGroup">
      <summary>
            When a dynamic entity is created and added to a space without having a specific collision group set beforehand, it inherits this collision group.
            There are no special rules associated with this group by default; entities within this group have normal, full interaction with all other entities.
            Collision group interaction rules can be overriden by entity personal collision rules or entity-to-entity specific collision rules.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRules.DefaultKinematicCollisionGroup">
      <summary>
            When a kinematic entity is created and added to a space without having a specific collision group set beforehand, it inherits this collision group.
            Entities in this collision group will not create collision pairs with other entities of this collision group by default.  All other interactions are normal.
            Collision group interaction rules can be overriden by entity personal collision rules or entity-to-entity specific collision rules.
            
            Non-entity collidable objects like static triangle meshes also use this collision group by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.#ctor">
      <summary>
             Constructs a new CollisionRules instance.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.AddRule(BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.CollisionRule)">
      <summary>
             Adds an entry in ownerA's Specific relationships list about ownerB.
            </summary>
      <param name="ownerA">Owner of the collision rules that will gain an entry in its Specific relationships.</param>
      <param name="ownerB">Owner of the collision rules that will be added to ownerA's Specific relationships.</param>
      <param name="rule">Rule assigned to the pair.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.AddRule(BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.CollisionRule)">
      <summary>
             Adds an entry in rulesA's Specific relationships list about ownerB.
            </summary>
      <param name="rulesA">Collision rules that will gain an entry in its Specific relationships.</param>
      <param name="ownerB">Owner of the collision rules that will be added to ownerA's Specific relationships.</param>
      <param name="rule">Rule assigned to the pair.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.AddRule(BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.CollisionRule)">
      <summary>
             Adds an entry in rulesA's Specific relationships list about ownerB.
            </summary>
      <param name="ownerA">Owner of the collision rules that will gain an entry in its Specific relationships.</param>
      <param name="rulesB">Collision rules that will be added to ownerA's Specific relationships.</param>
      <param name="rule">Rule assigned to the pair.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.RemoveRule(BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner)">
      <summary>
             Tries to remove a relationship about ownerB from ownerA's Specific list.
            </summary>
      <param name="ownerA">Owner of the collision rules that will lose an entry in its Specific relationships.</param>
      <param name="ownerB">Owner of the collision rules that will be removed from ownerA's Specific relationships.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.RemoveRule(BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner)">
      <summary>
             Tries to remove a relationship about ownerB from rulesA's Specific list.
            </summary>
      <param name="rulesA">Collision rules that will lose an entry in its Specific relationships.</param>
      <param name="ownerB">Owner of the collision rules that will be removed from ownerA's Specific relationships.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.RemoveRule(BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.CollisionRules)">
      <summary>
             Tries to remove a relationship about rulesB from ownerA's Specific list.
            </summary>
      <param name="ownerA">Owner of the collision rules that will lose an entry in its Specific relationships.</param>
      <param name="rulesB">Collision rules that will be removed from ownerA's Specific relationships.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.GetCollisionRule(BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner,BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner)">
      <summary>
            Uses the CollisionRuleCalculator to get the collision rule between two collision rules owners.
            </summary>
      <param name="ownerA">First owner of the pair.</param>
      <param name="ownerB">Second owner of the pair.</param>
      <returns>CollisionRule between the pair, according to the CollisionRuleCalculator.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.GetCollisionRuleDefault(BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.CollisionRules)">
      <summary>
            Determines what collision rule governs the interaction between the two objects.
            </summary>
      <param name="a">First ruleset in the pair.  This entity's space is used to determine the collision detection settings that contain special collision group interaction rules.</param>
      <param name="b">Second ruleset in the pair.</param>
      <returns>Collision rule governing the interaction between the pair.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.GetSpecificCollisionRuleDefault(BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.CollisionRules)">
      <summary>
             Default implementation used to calculate collision rules due to the rulesets' specific relationships.
            </summary>
      <param name="a">First ruleset in the pair.</param>
      <param name="b">Second ruleset in the pair.</param>
      <returns>Collision rule governing the interaction between the pair.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.GetGroupCollisionRuleDefault(BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.CollisionRules)">
      <summary>
             Default implementation used to calculate collision rules due to the rulesets' collision groups.
            </summary>
      <param name="a">First ruleset in the pair.</param>
      <param name="b">Second ruleset in the pair.</param>
      <returns>Collision rule governing the interaction between the pair.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionRules.GetPersonalCollisionRuleDefault(BEPUphysics.CollisionRuleManagement.CollisionRules,BEPUphysics.CollisionRuleManagement.CollisionRules)">
      <summary>
             Default implementation used to calculate collision rules due to the rulesets' personal rules.
            </summary>
      <param name="a">First ruleset in the pair.</param>
      <param name="b">Second ruleset in the pair.</param>
      <returns>Collision rule governing the interaction between the pair.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionRuleManagement.CollisionRules.Group">
      <summary>
            The collision group to which the object owning this instance belongs to.
            This is overridden by any relationships defined in the Specific collection with CollisionRules other than CollisionRule.Defer.
            This is also overriden by the Personal CollisionRule if it is anything but CollisionRule.Defer.
            If the interaction type between the group is defined as CollisionRule.Defer, it is considered to be CollisionRule.normal as the collision group is the final stage.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionRuleManagement.CollisionRules.Personal">
      <summary>
            Determines in general how the object owning this instance should react to other objects.
            This is overridden by any relationships defined in the Specific collection with CollisionRules other than CollisionRule.Defer.
            If this is not set to CollisionRule.Defer, it will override the collision group's collision rules.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionRuleManagement.CollisionRules.Specific">
      <summary>
            Specifies how the object owning this instance should react to other individual objects.
            Any rules defined in this collection will take priority over the Personal collision rule and the collision group's collision rules.
            Objects that are not in this collection are considered to have a relationship of CollisionRule.Defer.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionRuleManagement.CollisionRules.CollisionRuleCalculator">
      <summary>
             Gets or sets the delegate used to calculate collision rules.
             Defaults to CollisionRules.GetCollisionRuleDefault.
            </summary>
    </member>
    <member name="E:BEPUphysics.CollisionRuleManagement.CollisionRules.CollisionRulesChanged">
      <summary>
             Fires when the contained collision rules are altered.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionRuleManagement.CollisionGroupPair">
      <summary>
            Storage strucure containing two CollisionGroup instances used as a key in a collision rules dictionary.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionRuleManagement.CollisionGroupPair.A">
      <summary>
            First collision group in the pair.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionRuleManagement.CollisionGroupPair.B">
      <summary>
            Second collision group in the pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroupPair.#ctor(BEPUphysics.CollisionRuleManagement.CollisionGroup,BEPUphysics.CollisionRuleManagement.CollisionGroup)">
      <summary>
            Constructs a new collision group pair.
            </summary>
      <param name="groupA">First collision group in the pair.</param>
      <param name="groupB">Second collision group in the pair.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroupPair.Equals(System.Object)">
      <summary>
            Determines whether or not the two objects are equal.
            Use the IEquatable interface implementation if possible.
            </summary>
      <param name="obj">Object to compare.</param>
      <returns>Whether or not the two objects are equal.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroupPair.GetHashCode">
      <summary>
            Gets the hash code of the entity type pair.
            </summary>
      <returns>Hash code of the entity type pair.</returns>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair">
      <summary>
             Superclass of objects which handle a collision between two broad phase entries.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.UpdateCollision(System.Single)">
      <summary>
             Updates the collision between the broad phase entries.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.OnAddedToNarrowPhase">
      <summary>
            Called when the pair is added to the narrow phase.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.CleanUp">
      <summary>
            Cleans up the pair, preparing it to go inactive.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.NeedsUpdate">
      <summary>
             Gets or sets whether or not the pair needs to be updated.
             Used by the NarrowPhase to manage pairs.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.CollisionRule">
      <summary>
             Gets or sets the collision rule governing this pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.BroadPhaseOverlap">
      <summary>
             Gets the overlap used to create the pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.Factory">
      <summary>
             Gets the factory that created the pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair.NarrowPhase">
      <summary>
            Gets the narrow phase that owns this pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler">
      <summary>
             Superclass of pairs between collidables that generate contact points.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
      <summary>
             Updates the time of impact for the pair.
            </summary>
      <param name="requester">Collidable requesting the update.</param>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.OnAddedToNarrowPhase">
      <summary>
             Called when the pair handler is added to the narrow phase.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.UpdateMaterialProperties(BEPUphysics.Materials.InteractionProperties)">
      <summary>
             Forces an update of the pair's material properties.
            </summary>
      <param name="properties">Properties to use in the collision.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.UpdateMaterialProperties(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material)">
      <summary>
             Forces an update of the pair's material properties.
            </summary>
      <param name="materialA">First material to use.</param>
      <param name="materialB">Second material to use.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.UpdateMaterialProperties">
      <summary>
             Forces an update of the pair's material properties.
             Uses default choices (such as the owning entities' materials).
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.ClearContacts">
      <summary>
            Forces the pair handler to clean out its contacts.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.TimeOfImpact">
      <summary>
             Gets the last computed time of impact of the pair handler.
             This is only computed when one of the members is a continuously
             updated object.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.SuppressEvents">
      <summary>
             Gets or sets whether or not to suppress events from this pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.Parent">
      <summary>
             Gets or sets the parent of this pair handler.
             Pairs with parents report to their parents various
             changes in state.  This is mainly used to support
             hierarchies of pairs for compound collisions.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler.Contacts">
      <summary>
             Gets a list of the contacts in the pair and their associated constraint information.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler">
      <summary>
             Handles a standard pair handler that has a direct manifold and constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.#ctor">
      <summary>
             Constructs a pair handler.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.UpdateMaterialProperties(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material)">
      <summary>
             Forces an update of the pair's material properties.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.UpdateMaterialProperties(BEPUphysics.Materials.InteractionProperties)">
      <summary>
            Updates the material interaction properties of the pair handler's constraint.
            </summary>
      <param name="properties">Properties to use.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.UpdateCollision(System.Single)">
      <summary>
             Updates the pair handler.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.ClearContacts">
      <summary>
            Clears the contacts associated with this pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.ContactManifold">
      <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.ContactConstraint">
      <summary>
            Gets the contact constraint usd by the pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.StandardPairHandler.ContactCount">
      <summary>
            Gets the number of contacts associated with this pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.ConvexPairHandler">
      <summary>
             Pair handler that manages a pair of two boxes.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ConvexPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
      <summary>
             Updates the time of impact for the pair.
            </summary>
      <param name="requester">Collidable requesting the update.</param>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.SpherePairHandler">
      <summary>
             Handles a sphere-sphere collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.SpherePairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.SpherePairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.SpherePairHandler.ContactConstraint">
      <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.SpherePairHandler.ContactManifold">
      <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.OtherSpaceStages.IDeferredEventCreator">
      <summary>
             Defines an object which can create deferred events.
            </summary>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.IDeferredEventCreator.DispatchEvents">
      <summary>
             Dispatches the events created by this creator.
            </summary>
    </member>
    <member name="P:BEPUphysics.OtherSpaceStages.IDeferredEventCreator.DeferredEventDispatcher">
      <summary>
             Gets or sets the deferred event dispatcher that owns this creator.
            </summary>
    </member>
    <member name="P:BEPUphysics.OtherSpaceStages.IDeferredEventCreator.IsActive">
      <summary>
             Gets or sets the activity state of this creator.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.IEntryEventTriggerer">
      <summary>
            Manages triggers for events in an EntryEventManager.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.IEntryEventTriggerer.OnPairCreated(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair)">
      <summary>
            Fires the event manager's pair creation events.
            </summary>
      <param name="other">Other entry involved in the pair.</param>
      <param name="collisionPair">Narrow phase pair governing the two objects.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.IEntryEventTriggerer.OnPairRemoved(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Fires the event manager's pair removal events.
            </summary>
      <param name="other">Other entry involved in the pair.</param>
      <param name="collisionPair">Narrow phase pair governing the two objects.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.IEntryEventTriggerer.OnPairUpdated(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair)">
      <summary>
            Fires the event manager's pair updated events.
            </summary>
      <param name="other">Other entry involved in the pair.</param>
      <param name="collisionPair">Narrow phase pair governing the two objects.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.EntryEventManager`1">
      <summary>
             Event manager for BroadPhaseEntries (all types that live in the broad phase).
            </summary>
      <typeparam name="T">Some BroadPhaseEntry subclass.</typeparam>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.EntryEventManager`1.#ctor(`0)">
      <summary>
             Constructs a new event manager.
            </summary>
      <param name="owner">Owner of the event manager.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.EntryEventManager`1.VerifyEventStatus">
      <summary>
            Removes the entity from the space's list of eventful entities if no events are active.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.EntryEventManager`1.RemoveAllEvents">
      <summary>
             Removes all event hooks from the manager.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.Events.EntryEventManager`1.Owner">
      <summary>
             Owner of the event manager.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.IContactEventTriggerer">
      <summary>
            Manages triggers for events in an ContactEventManager.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.IContactEventTriggerer.OnCollisionEnded(BEPUphysics.Collidables.Collidable,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler)">
      <summary>
            Fires collision ending events.
            </summary>
      <param name="other">Other collidable involved in the pair.</param>
      <param name="collisionPair">Collidable pair handler that manages the two objects.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.IContactEventTriggerer.OnPairTouching(BEPUphysics.Collidables.Collidable,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler)">
      <summary>
            Fires pair touching events.
            </summary>
      <param name="other">Other collidable involved in the pair.</param>
      <param name="collisionPair">Collidable pair handler that manages the two objects.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.IContactEventTriggerer.OnContactCreated(BEPUphysics.Collidables.Collidable,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler,BEPUphysics.CollisionTests.Contact)">
      <summary>
            Fires contact creating events.
            </summary>
      <param name="other">Other collidable involved in the pair.</param>
      <param name="collisionPair">Collidable pair handler that manages the two objects.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.IContactEventTriggerer.OnContactRemoved(BEPUphysics.Collidables.Collidable,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler,BEPUphysics.CollisionTests.Contact)">
      <summary>
            Fires contact removal events.
            </summary>
      <param name="other">Other collidable involved in the pair.</param>
      <param name="collisionPair">Collidable pair handler that manages the two objects.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.IContactEventTriggerer.OnInitialCollisionDetected(BEPUphysics.Collidables.Collidable,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler)">
      <summary>
            Fires initial collision detected events.
            </summary>
      <param name="other">Other collidable involved in the pair.</param>
      <param name="collisionPair">Collidable pair handler that manages the two objects.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.ContactEventManager`1">
      <summary>
             Event manager for collidables (things which can create contact points).
            </summary>
      <typeparam name="T">Some Collidable subclass.</typeparam>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.ContactEventManager`1.#ctor(`0)">
      <summary>
             Constructs a new event manager.
            </summary>
      <param name="owner">Owner of the event manager.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.ContactEventManager`1.#ctor">
      <summary>
             Constructs a new event manager.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.Events.ContactEventManager`1.RemoveAllEvents">
      <summary>
             Removes all event hooks from the event manager.
            </summary>
    </member>
    <member name="T:BEPUphysics.MultithreadedProcessingStage">
      <summary>
             Superclass of processing systems which can use multiple threads.
            </summary>
    </member>
    <member name="M:BEPUphysics.MultithreadedProcessingStage.Update">
      <summary>
             Runs the processing stage.
            </summary>
    </member>
    <member name="P:BEPUphysics.MultithreadedProcessingStage.Enabled">
      <summary>
             Gets or sets whether or not the processing stage is active.
            </summary>
    </member>
    <member name="P:BEPUphysics.MultithreadedProcessingStage.AllowMultithreading">
      <summary>
             Gets or sets whether or not the processing stage should allow multithreading.
            </summary>
    </member>
    <member name="P:BEPUphysics.MultithreadedProcessingStage.ThreadManager">
      <summary>
             Gets or sets the thread manager used by the stage.
            </summary>
    </member>
    <member name="E:BEPUphysics.MultithreadedProcessingStage.Starting">
      <summary>
             Fires when the processing stage begins working.
            </summary>
    </member>
    <member name="E:BEPUphysics.MultithreadedProcessingStage.Finishing">
      <summary>
            Fires when the processing stage finishes working.
            </summary>
    </member>
    <member name="T:BEPUphysics.PositionUpdating.PositionUpdater">
      <summary>
             Superclass of updaters which manage the position of objects.
            </summary>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.PositionUpdater.Add(BEPUphysics.PositionUpdating.IPositionUpdateable)">
      <summary>
             Adds an object to the position updater.
            </summary>
      <param name="updateable">Updateable to add.</param>
      <exception cref="T:System.Exception">Thrown if the updateable already belongs to a position updater.</exception>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.PositionUpdater.Remove(BEPUphysics.PositionUpdating.IPositionUpdateable)">
      <summary>
             Removes an updateable from the updater.
            </summary>
      <param name="updateable">Item to remove.</param>
      <exception cref="T:System.Exception">Thrown if the updater does not own the updateable.</exception>
    </member>
    <member name="P:BEPUphysics.PositionUpdating.PositionUpdater.TimeStepSettings">
      <summary>
             Gets or sets the time step settings used by the updater.
            </summary>
    </member>
    <member name="T:BEPUphysics.PositionUpdating.ContinuousPositionUpdater">
      <summary>
             Updates objects according to the position update mode.
             This allows continuous objects to avoid missing collisions.
            </summary>
    </member>
    <member name="F:BEPUphysics.PositionUpdating.ContinuousPositionUpdater.MultithreadingThreshold">
      <summary>
             Number of objects in a list required to use multithreading.
            </summary>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.ContinuousPositionUpdater.#ctor(BEPUphysics.TimeStepSettings)">
      <summary>
             Constructs the position updater.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.ContinuousPositionUpdater.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs the position updater.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
      <param name="threadManager">Thread manager to use.</param>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.ContinuousPositionUpdater.UpdateableModeChanged(BEPUphysics.PositionUpdating.ICCDPositionUpdateable,BEPUphysics.PositionUpdating.PositionUpdateMode)">
      <summary>
             Notifies the position updater that an updateable has changed state.
            </summary>
      <param name="updateable">Updateable with changed state.</param>
      <param name="previousMode">Previous state the updateable was in.</param>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.ContinuousPositionUpdater.Add(BEPUphysics.PositionUpdating.IPositionUpdateable)">
      <summary>
             Adds an object to the position updater.
            </summary>
      <param name="updateable">Updateable to add.</param>
      <exception cref="T:System.Exception">Thrown if the updateable already belongs to a position updater.</exception>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.ContinuousPositionUpdater.Remove(BEPUphysics.PositionUpdating.IPositionUpdateable)">
      <summary>
             Removes an updateable from the updater.
            </summary>
      <param name="updateable">Item to remove.</param>
      <exception cref="T:System.Exception">Thrown if the updater does not own the updateable.</exception>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshPairHandler">
      <summary>
             Handles a mobile mesh-convex collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
      <summary>
             Updates the time of impact for the pair.
            </summary>
      <param name="requester">Collidable requesting the update.</param>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshPairHandler.ContactManifold">
      <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshPairHandler.ContactConstraint">
      <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshTrianglePairHandler">
      <summary>
             Handles a mobile mesh-convex collision pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.BroadPhaseSystems.IBroadPhaseEntryOwner">
      <summary>
             Requires that a class own a BroadPhaseEntry.
            </summary>
    </member>
    <member name="P:BEPUphysics.BroadPhaseSystems.IBroadPhaseEntryOwner.Entry">
      <summary>
             Gets the broad phase entry associated with this object.
            </summary>
    </member>
    <member name="T:BEPUphysics.OtherSpaceStages.IDeferredEventCreatorOwner">
      <summary>
             Defines an object that owns a deferred event creator.
            </summary>
    </member>
    <member name="P:BEPUphysics.OtherSpaceStages.IDeferredEventCreatorOwner.EventCreator">
      <summary>
             Gets the event creator owned by the object.
            </summary>
    </member>
    <member name="T:BEPUphysics.DeactivationManagement.ISimulationIslandMemberOwner">
      <summary>
            Defines an object which owns a SimulationIslandMember.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.ISimulationIslandMemberOwner.ActivityInformation">
      <summary>
            Gets the simulation island member associated with the object.
            </summary>
    </member>
    <member name="T:BEPUphysics.PositionUpdating.ICCDPositionUpdateable">
      <summary>
             A position updateable that can be updated continuously.
            </summary>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.ICCDPositionUpdateable.UpdateTimeOfImpacts(System.Single)">
      <summary>
             Updates the time of impacts associated with the updateable.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.ICCDPositionUpdateable.UpdatePositionContinuously(System.Single)">
      <summary>
            Updates the updateable using its continuous nature.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="P:BEPUphysics.PositionUpdating.ICCDPositionUpdateable.PositionUpdateMode">
      <summary>
            Gets or sets the position update mode of the object.
            The position update mode defines the way the object
            interacts with continuous collision detection.
            </summary>
    </member>
    <member name="T:BEPUphysics.OtherSpaceStages.IForceUpdateable">
      <summary>
             Defines an object which can be updated using forces by the ForceUpdater.
            </summary>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.IForceUpdateable.UpdateForForces(System.Single)">
      <summary>
             Applies forces to the object.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="P:BEPUphysics.OtherSpaceStages.IForceUpdateable.ForceUpdater">
      <summary>
             Force updater that owns this object.
            </summary>
    </member>
    <member name="P:BEPUphysics.OtherSpaceStages.IForceUpdateable.IsDynamic">
      <summary>
             Gets whether or not this object is dynamic.
             Only dynamic objects are updated by the force updater.
            </summary>
    </member>
    <member name="P:BEPUphysics.OtherSpaceStages.IForceUpdateable.IsActive">
      <summary>
             Gets whether or not this object is active.  Only active objects are updated by the force updater.
            </summary>
    </member>
    <member name="T:BEPUphysics.Materials.IMaterialOwner">
      <summary>
             Defines an object that has a material.
            </summary>
    </member>
    <member name="P:BEPUphysics.Materials.IMaterialOwner.Material">
      <summary>
             Gets or sets the material of the object.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner">
      <summary>
             Defines a class which must own CollisionRules.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionRuleManagement.ICollisionRulesOwner.CollisionRules">
      <summary>
             Collision rules owned by the object.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.Entity">
      <summary>
             Superclass of movable rigid bodies.  Contains information for
             both dynamic and kinematic simulation.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable)">
      <summary>
             Constructs a new entity.
            </summary>
      <param name="collisionInformation">Collidable to use with the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single)">
      <summary>
             Constructs a new entity.
            </summary>
      <param name="collisionInformation">Collidable to use with the entity.</param>
      <param name="mass">Mass of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
             Constructs a new entity.
            </summary>
      <param name="collisionInformation">Collidable to use with the entity.</param>
      <param name="mass">Mass of the entity.</param>
      <param name="inertiaTensor">Inertia tensor of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
      <summary>
             Constructs a new entity.
            </summary>
      <param name="collisionInformation">Collidable to use with the entity.</param>
      <param name="mass">Mass of the entity.</param>
      <param name="inertiaTensor">Inertia tensor of the entity.</param>
      <param name="volume">Volume of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.CollisionShapes.EntityShape)">
      <summary>
             Constructs a new entity.
            </summary>
      <param name="shape">Shape to use with the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single)">
      <summary>
             Constructs a new entity.
            </summary>
      <param name="shape">Shape to use with the entity.</param>
      <param name="mass">Mass of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
             Constructs a new entity.
            </summary>
      <param name="shape">Shape to use with the entity.</param>
      <param name="mass">Mass of the entity.</param>
      <param name="inertiaTensor">Inertia tensor of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
      <summary>
             Constructs a new entity.
            </summary>
      <param name="shape">Shape to use with the entity.</param>
      <param name="mass">Mass of the entity.</param>
      <param name="inertiaTensor">Inertia tensor of the entity.</param>
      <param name="volume">Volume of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.ApplyImpulse(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
             Applies an impulse to the entity.
            </summary>
      <param name="location">Location to apply the impulse.</param>
      <param name="impulse">Impulse to apply.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.ApplyImpulse(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Applies an impulse to the entity.
            </summary>
      <param name="location">Location to apply the impulse.</param>
      <param name="impulse">Impulse to apply.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.ApplyLinearImpulse(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Applies a linear velocity change to the entity using the given impulse.
            This method does not wake up the object or perform any other nonessential operation;
            it is meant to be used for performance-sensitive constraint solving.
            Consider equivalently adding to the LinearMomentum property for convenience instead.
            </summary>
      <param name="impulse">Impulse to apply.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.ApplyAngularImpulse(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Applies an angular velocity change to the entity using the given impulse.
            This method does not wake up the object or perform any other nonessential operation;
            it is meant to be used for performance-sensitive constraint solving.
            Consider equivalently adding to the AngularMomentum property for convenience instead.
            </summary>
      <param name="impulse">Impulse to apply.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.BecomeKinematic">
      <summary>
             Forces the entity to become kinematic.  Kinematic entities have infinite mass and inertia.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.BecomeDynamic(System.Single)">
      <summary>
             Forces the entity to become dynamic.  Dynamic entities respond to collisions and have finite mass and inertia.
            </summary>
      <param name="mass">Mass to use for the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.BecomeDynamic(System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
             Forces the entity to become dynamic.  Dynamic entities respond to collisions and have finite mass and inertia.
            </summary>
      <param name="mass">Mass to use for the entity.</param>
      <param name="localInertiaTensor">Inertia tensor to use for the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.ModifyLinearDamping(System.Single)">
      <summary>
            Temporarily adjusts the linear damping by an amount.  After the value is used, the
            damping returns to the base value.
            </summary>
      <param name="damping">Damping to add.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity.ModifyAngularDamping(System.Single)">
      <summary>
            Temporarily adjusts the angular damping by an amount.  After the value is used, the
            damping returns to the base value.
            </summary>
      <param name="damping">Damping to add.</param>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.Position">
      <summary>
             Gets or sets the position of the Entity.  This Position acts
             as the center of mass for dynamic entities.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.Orientation">
      <summary>
             Gets or sets the orientation quaternion of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.OrientationMatrix">
      <summary>
            Gets or sets the orientation matrix of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.WorldTransform">
      <summary>
             Gets or sets the world transform of the entity.
             The upper left 3x3 part is the Orientation, and the translation is the Position.
             When setting this property, ensure that the rotation matrix component does not include
             any scaling or shearing.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.AngularVelocity">
      <summary>
            Gets or sets the angular velocity of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.AngularMomentum">
      <summary>
            Gets or sets the angular momentum of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.LinearVelocity">
      <summary>
            Gets or sets the linear velocity of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.LinearMomentum">
      <summary>
            Gets or sets the linear momentum of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.MotionState">
      <summary>
            Gets or sets the position, orientation, linear velocity, and angular velocity of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.IsDynamic">
      <summary>
            Gets whether or not the entity is dynamic.
            Dynamic entities have finite mass and respond
            to collisions.  Kinematic (non-dynamic) entities
            have infinite mass and inertia and will plow through anything.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.IsAffectedByGravity">
      <summary>
             Gets or sets whether or not the entity can be affected by gravity applied by the ForceUpdater.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.BufferedStates">
      <summary>
             Gets the buffered states of the entity.  If the Space.BufferedStates manager is enabled,
             this property provides access to the buffered and interpolated states of the entity.
             Buffered states are the most recent completed update values, while interpolated states are the previous values blended
             with the current frame's values.  Interpolated states are helpful when updating the engine with internal time stepping, 
             giving entity motion a smooth appearance even when updates aren't occurring consistently every frame.  
             Both are buffered for asynchronous access.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.InertiaTensorInverse">
      <summary>
             Gets the world space inertia tensor inverse of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.InertiaTensor">
      <summary>
             Gets the world space inertia tensor of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.LocalInertiaTensor">
      <summary>
             Gets or sets the local inertia tensor of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.LocalInertiaTensorInverse">
      <summary>
            Gets or sets the local inertia tensor inverse of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.Mass">
      <summary>
             Gets or sets the mass of the entity.  Setting this to an invalid value, such as a non-positive number, NaN, or infinity, makes the entity kinematic.
             Setting it to a valid positive number will also scale the inertia tensor if it was already dynamic, or force the calculation of a new inertia tensor
             if it was previously kinematic.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.InverseMass">
      <summary>
            Gets or sets the inverse mass of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.Volume">
      <summary>
            Gets or sets the volume of the entity.
            This is computed along with other physical properties at initialization,
            but it's only used for auxiliary systems like the FluidVolume.
            Changing this can tune behavior of those systems.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.CollisionInformation">
      <summary>
             Gets the collidable used by the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.Locker">
      <summary>
             Gets the synchronization object used by systems that need
             exclusive access to the entity's properties.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.Material">
      <summary>
             Gets or sets the material used by the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.SolverUpdateables">
      <summary>
             Gets all the EntitySolverUpdateables associated with this entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.Constraints">
      <summary>
             Gets the two-entity constraints associated with this entity (a subset of the solver updateables).
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.IgnoreShapeChanges">
      <summary>
            Gets or sets whether or not to ignore shape changes.  When true, changing the entity's collision shape will not update the maximum radius, volume, density, or inertia tensor. 
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.Space">
      <summary>
             Gets the space that owns the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.PositionUpdateMode">
      <summary>
             Gets the position update mode of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.AngularDamping">
      <summary>
             Gets or sets the angular damping of the entity.
             Values range from 0 to 1, correspondong to a fraction of angular momentum removed
             from the entity over a unit of time.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.LinearDamping">
      <summary>
             Gets or sets the linear damping of the entity.
             Values range from 0 to 1, correspondong to a fraction of linear momentum removed
             from the entity over a unit of time.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Entity.Tag">
      <summary>
            Gets or sets the user data associated with the entity.
            This is separate from the entity's collidable's tag.
            If a tag needs to be accessed from within the collision
            detection pipeline, consider using the entity.CollisionInformation.Tag.
            </summary>
    </member>
    <member name="E:BEPUphysics.Entities.Entity.PositionUpdated">
      <summary>
             Fires when the entity's position is updated.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.Entity`1">
      <summary>
             Superclass of all entities which have a defined collidable type.
             After construction, the collidable on this sort of Entity cannot be changed.
             It can be constructed directly, or one of its prefab children (Box, Sphere, etc.) can be used.
            </summary>
      <remarks>If the collidable needs to be changed after construction, consider using the MorphableEntity.</remarks>
      <typeparam name="T">Type of EntityCollidable to use for the entity.</typeparam>
    </member>
    <member name="M:BEPUphysics.Entities.Entity`1.#ctor(`0)">
      <summary>
             Constructs an Entity.
            </summary>
      <param name="collisionInformation">Collidable for the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity`1.#ctor(`0,System.Single)">
      <summary>
             Constructs an Entity.
            </summary>
      <param name="collisionInformation">Collidable for the entity.</param>
      <param name="mass">Mass of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity`1.#ctor(`0,System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
             Constructs an Entity.
            </summary>
      <param name="collisionInformation">Collidable for the entity.</param>
      <param name="mass">Mass of the entity.</param>
      <param name="inertiaTensor">Inertia of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Entity`1.#ctor(`0,System.Single,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
      <summary>
             Constructs an Entity.
            </summary>
      <param name="collisionInformation">Collidable for the entity.</param>
      <param name="mass">Mass of the entity.</param>
      <param name="inertiaTensor">Inertia of the entity.</param>
      <param name="volume">Volume of the entity.</param>
    </member>
    <member name="P:BEPUphysics.Entities.Entity`1.CollisionInformation">
      <summary>
             Gets the collidable used by the entity.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.Prefabs.Sphere">
      <summary>
            Ball-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Sphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>
            Constructs a physically simulated sphere.
            </summary>
      <param name="position">Position of the sphere.</param>
      <param name="radius">Radius of the sphere.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Sphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Constructs a nondynamic sphere.
            </summary>
      <param name="position">Position of the sphere.</param>
      <param name="radius">Radius of the sphere.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Sphere.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single)">
      <summary>
            Constructs a physically simulated sphere.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="radius">Radius of the sphere.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Sphere.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single)">
      <summary>
            Constructs a nondynamic sphere.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="radius">Radius of the sphere.</param>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Sphere.Radius">
      <summary>
            Radius of the sphere.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.Prefabs.Cylinder">
      <summary>
            Cylinder-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Cylinder.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a physically simulated cylinder.
            </summary>
      <param name="position">Position of the cylinder.</param>
      <param name="height">Height of the cylinder.</param>
      <param name="radius">Radius of the cylinder.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Cylinder.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>
            Constructs a nondynamic cylinder.
            </summary>
      <param name="position">Position of the cylinder.</param>
      <param name="height">Height of the cylinder.</param>
      <param name="radius">Radius of the cylinder.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Cylinder.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a physically simulated cylinder.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="height">Height of the cylinder.</param>
      <param name="radius">Radius of the cylinder.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Cylinder.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single)">
      <summary>
            Constructs a nondynamic cylinder.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="height">Height of the cylinder.</param>
      <param name="radius">Radius of the cylinder.</param>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Cylinder.Height">
      <summary>
            Gets or sets the height of the cylinder.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Cylinder.Radius">
      <summary>
            Gets or sets the radius of the cylinder.
            </summary>
    </member>
    <member name="T:BEPUphysics.DeactivationManagement.ISimulationIslandConnectionOwner">
      <summary>
            Denotes a class which owns a simulation island connection.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.ISimulationIslandConnectionOwner.SimulationIslandConnection">
      <summary>
            Gets the connection associated with the object.
            </summary>
    </member>
    <member name="T:BEPUphysics.SolverSystems.SolverUpdateable">
      <summary>
             Superclass of all objects that live in the solver.
            </summary>
    </member>
    <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.TryEnterLock">
      <summary>
            Attempts to acquire a lock on the solver updateable.
            This allows operations that need exclusive access to the solver updateable's members.
            If it is contested, it aborts the attempt.
            </summary>
      <returns>Whether or not the lock could be acquired.</returns>
    </member>
    <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.EnterLock">
      <summary>
            Acquires a lock on the solver updateable.
            This allows operations that need exclusive access to the solver updateable's members.
            </summary>
    </member>
    <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.ExitLock">
      <summary>
            Releases the lock on the solver updateable.
            </summary>
    </member>
    <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.UpdateSolverActivity">
      <summary>
            Updates the activity state of the solver updateable based on its members.
            </summary>
    </member>
    <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.OnAdditionToSpace(BEPUphysics.ISpace)">
      <summary>
            Called after the object is added to a space.
            </summary>
      <param name="newSpace">
      </param>
    </member>
    <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.OnRemovalFromSpace(BEPUphysics.ISpace)">
      <summary>
            Called before an object is removed from its space.
            </summary>
    </member>
    <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.OnAdditionToSolver(BEPUphysics.SolverSystems.Solver)">
      <summary>
             Called when the updateable is added to a solver.
            </summary>
      <param name="newSolver">Solver to which the updateable was added.</param>
    </member>
    <member name="M:BEPUphysics.SolverSystems.SolverUpdateable.OnRemovalFromSolver(BEPUphysics.SolverSystems.Solver)">
      <summary>
            Called when the updateable is removed from its solver.
            </summary>
      <param name="oldSolver">Solver from which the updateable was removed.</param>
    </member>
    <member name="P:BEPUphysics.SolverSystems.SolverUpdateable.Solver">
      <summary>
             Gets the solver to which the solver updateable belongs.
            </summary>
    </member>
    <member name="P:BEPUphysics.SolverSystems.SolverUpdateable.SolverSettings">
      <summary>
             Gets the solver settings that manage how the solver updates.
            </summary>
    </member>
    <member name="P:BEPUphysics.SolverSystems.SolverUpdateable.IsActive">
      <summary>
            Gets or sets whether or not this solver updateable is active.
            
            When set to false, this solver updateable will be idle and its 
            isActiveInSolver field will always be false.
            
            When set to true, the solver updateable will run normally and update if
            the type's activity conditions allow it.
            </summary>
    </member>
    <member name="P:BEPUphysics.SolverSystems.SolverUpdateable.IsActiveInSolver">
      <summary>
            Gets whether or not the space's solver should try to solve this object.
            Depends on conditions specific to each solver updateable type and whether or not
            it has completed its computations early.  Recomputed each frame.
            </summary>
    </member>
    <member name="P:BEPUphysics.SolverSystems.SolverUpdateable.Tag">
      <summary>
            Gets or sets the user data associated with this object.
            </summary>
    </member>
    <member name="P:BEPUphysics.SolverSystems.SolverUpdateable.SimulationIslandConnection">
      <summary>
            Gets the simulation island connection associated with this updateable.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.EntitySolverUpdateable">
      <summary>
            Superclass of objects types which require solving by the velocity solver.
            These are updated within the internal iterative solver when owned by a space.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.EntitySolverUpdateable.involvedEntities">
      <summary>
            List of all entities affected by this updateable.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.EntitySolverUpdateable.numberOfInvolvedEntities">
      <summary>
            Number of entities used in the solver updateable.
            Note that this is set automatically by the sortInvolvedEntities method
            if it is called.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.EnterLock">
      <summary>
            Acquires exclusive access to all entities involved in the solver updateable.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.ExitLock">
      <summary>
            Releases exclusive access to the updateable's entities.
            This should be called within a 'finally' block following a 'try' block containing the locked operations.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.TryEnterLock">
      <summary>
            Attempts to acquire exclusive access to all entities involved in the solver updateable.
            </summary>
      <returns>Whether or not the lock was entered successfully.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.OnInvolvedEntitiesChanged">
      <summary>
            Handle any bookkeeping needed when the entities involved in this SolverUpdateable change.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.CollectInvolvedEntities">
      <summary>
            Collects the entities involved in a solver updateable and sets up the internal listings.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.CollectInvolvedEntities(BEPUphysics.DataStructures.RawList{BEPUphysics.Entities.Entity})">
      <summary>
            Adds entities associated with the solver item to the involved entities list.
            This allows the non-batched multithreading system to lock properly.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.EntitySolverUpdateable.SortInvolvedEntities">
      <summary>
            Sorts the involved entities according to their hashcode to allow non-batched multithreading to avoid deadlocks.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.EntitySolverUpdateable.InvolvedEntities">
      <summary>
             Gets the entities that this solver updateable is involved with.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.EntitySolverUpdateable.SolverGroup">
      <summary>
            Gets the solver group that manages this solver updateable, if any.
            Null if not owned by a solver group.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint">
      <summary>
            Abstract superclass of constraints involving two bodies.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint.WorldEntity">
      <summary>
            Entity that constraints connect to when they are given a null connection.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint.connectionA">
      <summary>
            First connection to the constraint.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint.connectionB">
      <summary>
            Second connection to the constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint.CollectInvolvedEntities(BEPUphysics.DataStructures.RawList{BEPUphysics.Entities.Entity})">
      <summary>
            Adds entities associated with the solver item to the involved entities list.
            Ensure that sortInvolvedEntities() is called at the end of the function.
            This allows the non-batched multithreading system to lock properly.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint.ConnectionA">
      <summary>
            Gets or sets the first connection to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.TwoEntityConstraint.ConnectionB">
      <summary>
            Gets or sets the second connection to the constraint.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.Motor">
      <summary>
            Superclass of constraints which do work and change the velocity of connected entities, but have no specific position target.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.Motor.usedSoftness">
      <summary>
            Softness divided by the timestep to maintain timestep independence.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.Motor.ComputeMaxForces(System.Single,System.Single)">
      <summary>
            Computes the maxForceDt and maxForceDtSquared fields.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.I1DImpulseConstraint">
      <summary>
            Implemented by solver updateables which have a one dimensional impulse.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.I1DImpulseConstraint.RelativeVelocity">
      <summary>
            Gets the current relative velocity of the constraint.
            Computed based on the current connection velocities and jacobians.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.I1DImpulseConstraint.TotalImpulse">
      <summary>
            Gets the total impulse a constraint has applied.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.I1DImpulseConstraintWithError">
      <summary>
            Implemented by solver updateables which have a one dimensional impulse.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.I1DImpulseConstraintWithError.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.I1DJacobianConstraint">
      <summary>
            Denotes a class that uses a single linear jacobian axis.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.I1DJacobianConstraint.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor">
      <summary>
            Attempts to achieve some defined relative twist angle between the entities.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.biasVelocity">
      <summary>
            Velocity needed to get closer to the goal.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.#ctor">
      <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the BasisA and BasisB.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other.
            </summary>
      <param name="connectionA">First connection of the pair.</param>
      <param name="connectionB">Second connection of the pair.</param>
      <param name="axisA">Twist axis attached to the first connected entity.</param>
      <param name="axisB">Twist axis attached to the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.SetupJointTransforms(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets up the joint transforms by automatically creating perpendicular vectors to complete the bases.
            </summary>
      <param name="worldTwistAxisA">Twist axis in world space to attach to entity A.</param>
      <param name="worldTwistAxisB">Twist axis in world space to attach to entity B.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.SolveIteration">
      <summary>
            Solves for velocity.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.Update(System.Single)">
      <summary>
            Do any necessary computations to prepare the constraint for this frame.
            </summary>
      <param name="dt">Simulation step length.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.BasisA">
      <summary>
            Gets the basis attached to entity A.
            The primary axis represents the twist axis attached to entity A.
            The x axis and y axis represent a plane against which entity B's attached x axis is projected to determine the twist angle.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.BasisB">
      <summary>
            Gets the basis attached to entity B.
            The primary axis represents the twist axis attached to entity A.
            The x axis is projected onto the plane defined by localTransformA's x and y axes
            to get the twist angle.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.Settings">
      <summary>
            Gets the motor's velocity and servo settings.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.TwistMotor.Error">
      <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, the error will be zero.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SolverGroups.SolverGroup">
      <summary>
            Superclass of constraints that are composed of multiple subconstraints.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.CollectInvolvedEntities(BEPUphysics.DataStructures.RawList{BEPUphysics.Entities.Entity})">
      <summary>
            Collects the entities which are affected by the solver group and updates the internal listing.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.UpdateSolverActivity">
      <summary>
            Sets the activity state of the constraint based on the activity state of its connections.
            Called automatically by the space owning a constaint.  If a constraint is a sub-constraint that hasn't been directly added to the space,
            this may need to be called alongside the preStep from within the parent constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.SolveUpdateable(BEPUphysics.Constraints.EntitySolverUpdateable,System.Int32@)">
      <summary>
            Solves a child updateable.  Some children may override the group's update method;
            this avoids code repeat.
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.Add(BEPUphysics.Constraints.EntitySolverUpdateable)">
      <summary>
            Adds a solver updateable to the group.
            </summary>
      <param name="solverUpdateable">Solver updateable to add.</param>
      <exception cref="T:System.InvalidOperationException">Thrown when the SolverUpdateable to add to the SolverGroup already belongs to another SolverGroup or to a Space.</exception>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.Remove(BEPUphysics.Constraints.EntitySolverUpdateable)">
      <summary>
            Removes a solver updateable from the group.
            </summary>
      <param name="solverUpdateable">Solver updateable to remove.</param>
      <exception cref="T:System.InvalidOperationException">Thrown when the SolverUpdateable to remove from the SolverGroup doesn't actually belong to this SolverGroup.</exception>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.OnAdditionToSpace(BEPUphysics.ISpace)">
      <summary>
            Called after the object is added to a space.
            </summary>
      <param name="newSpace">
      </param>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.SolverGroup.OnRemovalFromSpace(BEPUphysics.ISpace)">
      <summary>
            Called before an object is removed from its space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.SolverGroup.SolverUpdateables">
      <summary>
            Gets the solver updateables managed by this solver group.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.SolverGroup.Solver">
      <summary>
             Gets the solver to which the solver updateable belongs.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint">
      <summary>
            Restricts one linear degree of freedom.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.#ctor">
      <summary>
            Constructs a new constraint which restricts one linear degree of freedom between two entities.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new constraint which restricts one linear degree of freedom between two entities.
            </summary>
      <param name="connectionA">First entity of the constraint pair.</param>
      <param name="connectionB">Second entity of the constraint pair.</param>
      <param name="planeAnchor">Location of the anchor for the plane to be attached to connectionA in world space.</param>
      <param name="planeNormal">Normal of the plane constraint in world space.</param>
      <param name="xAxis">Direction in world space along which the X axis LinearAxisLimit and LinearAxisMotor work.
            This is usually chosen to be perpendicular to the planeNormal and the yAxis.</param>
      <param name="yAxis">Direction in world space along which the Y axis LinearAxisLimit and LinearAxisMotor work.
            This is usually chosen to be perpendicular to the planeNormal and the xAxis.</param>
      <param name="pointAnchor">Location of the anchor for the point to be attached to connectionB in world space.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.LimitX">
      <summary>
            Gets the distance limit for the slider along plane's X axis.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.LimitY">
      <summary>
            Gets the distance limit for the slider along plane's Y axis.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.MotorX">
      <summary>
            Gets the slider motor for the plane's X axis.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.MotorY">
      <summary>
            Gets the slider motor for the plane's Y axis.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.PlaneSliderJoint.PointOnPlaneJoint">
      <summary>
            Gets the plane joint that restricts one linear degree of freedom.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis">
      <summary>
            Computes the forces to slow down and stop sliding motion between two entities when centralized friction is active.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.#ctor">
      <summary>
             Constructs a new sliding friction constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.ContactManifoldConstraint">
      <summary>
             Gets the contact manifold constraint that owns this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.FrictionDirectionX">
      <summary>
            Gets the first direction in which the friction force acts.
            This is one of two directions that are perpendicular to each other and the normal of a collision between two entities.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.FrictionDirectionY">
      <summary>
            Gets the second direction in which the friction force acts.
            This is one of two directions that are perpendicular to each other and the normal of a collision between two entities.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.TotalForce">
      <summary>
            Gets the total force applied by sliding friction.
            The X component of this vector is the force applied along the frictionDirectionX,
            while the Y component is the force applied along the frictionDirectionY.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.SlidingFrictionTwoAxis.RelativeVelocity">
      <summary>
             Gets the tangential relative velocity between the associated entities at the contact point.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.Collision.ContactFrictionConstraint">
      <summary>
            Computes the friction force for a contact when central friction cannot be used.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.#ctor">
      <summary>
             Constructs a new friction constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.Setup(BEPUphysics.Constraints.Collision.ContactManifoldConstraint,BEPUphysics.Constraints.Collision.ContactPenetrationConstraint)">
      <summary>
             Configures the friction constraint for a new contact.
            </summary>
      <param name="contactManifoldConstraint">Manifold to which the constraint belongs.</param>
      <param name="penetrationConstraint">Penetration constraint associated with this friction constraint.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.CleanUp">
      <summary>
             Cleans upt he friction constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.Update(System.Single)">
      <summary>
            Initializes the constraint for this frame.
            </summary>
      <param name="dt">Time since the last frame.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.ContactManifoldConstraint">
      <summary>
             Gets the manifold constraint associated with this friction constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.PenetrationConstraint">
      <summary>
             Gets the penetration constraint associated with this friction constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.FrictionDirection">
      <summary>
            Gets the direction in which the friction force acts.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.TotalForce">
      <summary>
            Gets the total force applied by this friction constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactFrictionConstraint.RelativeVelocity">
      <summary>
             Gets the relative velocity of the constraint.  This is the velocity along the tangent movement direction.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.CollisionShape">
      <summary>
             Superclass of all collision shapes.
             Collision shapes are composed entirely of local space information.
             Collidables provide the world space information needed to use the shapes to do collision detection.
            </summary>
    </member>
    <member name="E:BEPUphysics.CollisionShapes.CollisionShape.ShapeChanged">
      <summary>
             Fires when some of the local space information in the shape changes.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.EntityShape">
      <summary>
             Superclass of all collision shapes that are used by Entities.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.EntityShape.ComputeVolume">
      <summary>
            Computes the volume of the shape.
            </summary>
      <returns>Volume of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.EntityShape.ComputeVolumeDistribution(System.Single@)">
      <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.EntityShape.ComputeVolumeDistribution">
      <summary>
            Computes the volume distribution of the shape.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.EntityShape.ComputeCenter">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.EntityShape.ComputeCenter(System.Single@)">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.EntityShape.ComputeDistributionInformation(BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
      <summary>
            Computes a variety of shape information all at once.
            </summary>
      <param name="shapeInfo">Properties of the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.EntityShape.GetCollidableInstance">
      <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
      <returns>EntityCollidable that uses this shape.</returns>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape">
      <summary>
             Superclass of convex collision shapes.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetLocalExtremePointWithoutMargin(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetExtremePointWithoutMargin(Microsoft.Xna.Framework.Vector3,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in world space in a given direction.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="shapeTransform">Transform to use for the shape.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetExtremePoint(Microsoft.Xna.Framework.Vector3,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in world space in a given direction with margin expansion.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="shapeTransform">Transform to use for the shape.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetLocalExtremePoint(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in local space in a given direction with margin expansion.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
      <param name="shapeTransform">Transform to use.</param>
      <param name="boundingBox">Bounding box of the transformed shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.RayTest(Microsoft.Xna.Framework.Ray@,BEPUphysics.MathExtensions.RigidTransform@,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Gets the intersection between the convex shape and the ray.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="transform">Transform of the convex shape.</param>
      <param name="maximumLength">Maximum distance to travel in units of the ray direction's length.</param>
      <param name="hit">Ray hit data, if any.</param>
      <returns>Whether or not the ray hit the target.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeCenter">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeCenter(System.Single@)">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeVolume">
      <summary>
            Computes the volume of the shape.
            </summary>
      <returns>Volume of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeVolumeDistribution(System.Single@)">
      <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeVolumeDistribution">
      <summary>
            Computes the volume distribution of the shape.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetSweptLocalBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.AffineTransform@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Gets the bounding box of the convex shape transformed first into world space, and then into the local space of another affine transform.
            </summary>
      <param name="shapeTransform">Transform to use to put the shape into world space.</param>
      <param name="spaceTransform">Used as the frame of reference to compute the bounding box.
            In effect, the shape is transformed by the inverse of the space transform to compute its bounding box in local space.</param>
      <param name="sweep">Vector to expand the bounding box with in local space.</param>
      <param name="boundingBox">Bounding box in the local space.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.GetLocalBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.AffineTransform@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Gets the bounding box of the convex shape transformed first into world space, and then into the local space of another affine transform.
            </summary>
      <param name="shapeTransform">Transform to use to put the shape into world space.</param>
      <param name="spaceTransform">Used as the frame of reference to compute the bounding box.
            In effect, the shape is transformed by the inverse of the space transform to compute its bounding box in local space.</param>
      <param name="boundingBox">Bounding box in the local space.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeMinimumRadius">
      <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
      <returns>Minimum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.ComputeMaximumRadius">
      <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
      <returns>Maximum radius of the shape.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.CollisionMargin">
      <summary>
             Collision margin of the convex shape.  The margin is a small spherical expansion around
             entities which allows specialized collision detection algorithms to be used.
             It's recommended that this be left unchanged.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.MinimumRadius">
      <summary>
            Gets or sets the minimum radius of the collidable's shape.  This is initialized to a value that is
            guaranteed to be equal to or smaller than the actual minimum radius.  When setting this property,
            ensure that the inner sphere formed by the new minimum radius is fully contained within the shape.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape.MaximumRadius">
      <summary>
            Gets the maximum radius of the collidable's shape.  This is initialized to a value that is
            guaranteed to be equal to or larger than the actual maximum radius.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape">
      <summary>
             Sphere-expanded line segment.  Another way of looking at it is a cylinder with half-spheres on each end.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.#ctor(System.Single,System.Single)">
      <summary>
             Constructs a new capsule shape.
            </summary>
      <param name="length">Length of the capsule's inner line segment.</param>
      <param name="radius">Radius to expand the line segment width.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.GetLocalExtremePointWithoutMargin(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.ComputeMinimumRadius">
      <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
      <returns>Minimum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.ComputeMaximumRadius">
      <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
      <returns>Maximum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.ComputeVolumeDistribution(System.Single@)">
      <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.ComputeCenter">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.ComputeCenter(System.Single@)">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.ComputeVolume">
      <summary>
            Computes the volume of the shape.
            </summary>
      <returns>Volume of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.GetCollidableInstance">
      <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
      <returns>EntityCollidable that uses this shape.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.Length">
      <summary>
             Gets or sets the length of the capsule's inner line segment.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.CapsuleShape.Radius">
      <summary>
             Gets or sets the radius of the capsule.
            </summary>
    </member>
    <member name="T:BEPUphysics.Paths.Path`1">
      <summary>
            Superclass of a variety of classes that can be evaluated at a time to retrieve a value associated with that time.
            </summary>
      <typeparam name="TValue">Type of the value of the path.</typeparam>
    </member>
    <member name="M:BEPUphysics.Paths.Path`1.Evaluate(System.Double,`0@)">
      <summary>
            Computes the value of the path at a given time.
            </summary>
      <param name="time">Time at which to evaluate the path.</param>
      <param name="value">Path value at the given time.</param>
    </member>
    <member name="M:BEPUphysics.Paths.Path`1.GetPathBoundsInformation(System.Single@,System.Single@)">
      <summary>
            Gets the starting and ending times of the path.
            </summary>
      <param name="startingTime">Beginning time of the path.</param>
      <param name="endingTime">Ending time of the path.</param>
    </member>
    <member name="M:BEPUphysics.Paths.Path`1.Evaluate(System.Double)">
      <summary>
            Computes the value of the path at a given time.
            </summary>
      <param name="time">Time at which to evaluate the path.</param>
      <returns>Path value at the given time.</returns>
    </member>
    <member name="T:BEPUphysics.Paths.SpeedControlledCurve`1">
      <summary>
            Wrapper that controls the speed at which a curve is traversed.
            </summary>
      <remarks>
        <para>
            Even if a curve is evaluated at linearly increasing positions,
            the distance between consecutive values can be different.  This
            has the effect of a curve-following object having variable velocity.
            </para>
        <para>
            To counteract the variable velocity, this wrapper samples the curve
            and produces a reparameterized, distance-based curve.  Changing the
            evaluated curve position will linearly change the value.
            </para>
      </remarks>
    </member>
    <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.#ctor">
      <summary>
            Constructs a new speed controlled curve.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.#ctor(BEPUphysics.Paths.Curve{`0})">
      <summary>
            Constructs a new speed-controlled curve.
            </summary>
      <param name="curve">Curve to wrap.</param>
    </member>
    <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.#ctor(BEPUphysics.Paths.Curve{`0},System.Int32)">
      <summary>
            Constructs a new speed-controlled curve.
            </summary>
      <param name="curve">Curve to wrap.</param>
      <param name="samplesPerInterval">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
    </member>
    <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.GetSpeedAtCurveTime(System.Single)">
      <summary>
            Gets the desired speed at a given time.
            </summary>
      <param name="time">Time to check for speed.</param>
      <returns>Speed at the given time.</returns>
    </member>
    <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.GetInnerTime(System.Double)">
      <summary>
            Gets the time at which the internal curve would be evaluated at the given time.
            </summary>
      <param name="time">Time to evaluate the speed-controlled curve.</param>
      <returns>Time at which the internal curve would be evaluated.</returns>
    </member>
    <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.Evaluate(System.Double,`0@)">
      <summary>
            Computes the value of the curve at a given time.
            </summary>
      <param name="time">Time to evaluate the curve at.</param>
      <param name="value">Value of the curve at the given time.</param>
    </member>
    <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.GetPathBoundsInformation(System.Single@,System.Single@)">
      <summary>
            Gets the starting and ending times of the path.
            </summary>
      <param name="startingTime">Beginning time of the path.</param>
      <param name="endingTime">Ending time of the path.</param>
    </member>
    <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.ResampleCurve">
      <summary>
            Forces a recalculation of curve samples.
            This needs to be called if the wrapped curve
            is changed.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.SpeedControlledCurve`1.GetDistance(`0,`0)">
      <summary>
            Computes the distance between the two values.
            </summary>
      <param name="start">Starting value.</param>
      <param name="end">Ending value.</param>
      <returns>Distance between the values.</returns>
    </member>
    <member name="P:BEPUphysics.Paths.SpeedControlledCurve`1.Curve">
      <summary>
            Gets or sets the curve wrapped by this instance.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.SpeedControlledCurve`1.PostLoop">
      <summary>
            Defines how the curve is sampled when the evaluation time exceeds the final control point.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.SpeedControlledCurve`1.PreLoop">
      <summary>
            Defines how the curve is sampled when the evaluation time exceeds the beginning control point.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.SpeedControlledCurve`1.SamplesPerInterval">
      <summary>
            Gets or sets the number of samples to use per interval in the curve.
            </summary>
    </member>
    <member name="T:BEPUphysics.Paths.VariableSpeedCurve`1">
      <summary>
            Curve that wraps another curve and travels along it with specified speeds.
            </summary>
      <typeparam name="TValue">Type of the value of the wrapped curve.</typeparam>
    </member>
    <member name="M:BEPUphysics.Paths.VariableSpeedCurve`1.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{`0})">
      <summary>
            Constructs a new constant speed curve.
            </summary>
      <param name="speedCurve">Curve defining speeds to use.</param>
      <param name="curve">Curve to wrap.</param>
    </member>
    <member name="M:BEPUphysics.Paths.VariableSpeedCurve`1.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{`0},System.Int32)">
      <summary>
            Constructs a new constant speed curve.
            </summary>
      <param name="speedCurve">Curve defining speeds to use.</param>
      <param name="curve">Curve to wrap.</param>
      <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
    </member>
    <member name="M:BEPUphysics.Paths.VariableSpeedCurve`1.GetSpeedAtCurveTime(System.Single)">
      <summary>
            Gets the speed at a given time on the wrapped curve.
            </summary>
      <param name="time">Time to evaluate.</param>
      <returns>Speed at the given time.</returns>
    </member>
    <member name="P:BEPUphysics.Paths.VariableSpeedCurve`1.SpeedCurve">
      <summary>
            Gets or sets the path that defines the speeds at given locations.
            The speed curve will be sampled at times associated with the wrapped curve.
            </summary>
    </member>
    <member name="T:BEPUphysics.Paths.Curve`1">
      <summary>
            Manages a curve in 3D space that supports interpolation.
            </summary>
      <typeparam name="TValue">Type of values in the curve.</typeparam>
    </member>
    <member name="M:BEPUphysics.Paths.Curve`1.#ctor">
      <summary>
            Constructs a new 3D curve.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.Curve`1.ModifyTime(System.Double,System.Single,System.Single,BEPUphysics.Paths.CurveEndpointBehavior,BEPUphysics.Paths.CurveEndpointBehavior)">
      <summary>
            Converts an unbounded time to a time within the curve's interval using the 
            endpoint behavior.
            </summary>
      <param name="time">Time to convert.</param>
      <param name="intervalBegin">Beginning of the curve's interval.</param>
      <param name="intervalEnd">End of the curve's interval.</param>
      <param name="preLoop">Looping behavior of the curve before the first endpoint's time.</param>
      <param name="postLoop">Looping behavior of the curve after the last endpoint's time.</param>
      <returns>Time within the curve's interval.</returns>
    </member>
    <member name="M:BEPUphysics.Paths.Curve`1.Evaluate(System.Int32,System.Single,`0@)">
      <summary>
            Evaluates the curve section starting at the control point index using
            the weight value.
            </summary>
      <param name="controlPointIndex">Index of the starting control point of the subinterval.</param>
      <param name="weight">Location to evaluate on the subinterval from 0 to 1.</param>
      <param name="value">Value at the given location.</param>
    </member>
    <member name="M:BEPUphysics.Paths.Curve`1.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
      <summary>
            Gets the curve's bounding index information.
            </summary>
      <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
      <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
    </member>
    <member name="M:BEPUphysics.Paths.Curve`1.Evaluate(System.Double,`0@)">
      <summary>
            Computes the value of the curve at a given time.
            </summary>
      <param name="time">Time at which to evaluate the curve.</param>
      <param name="value">Curve value at the given time.</param>
    </member>
    <member name="M:BEPUphysics.Paths.Curve`1.GetPathBoundsInformation(System.Single@,System.Single@)">
      <summary>
            Gets the starting and ending times of the path.
            </summary>
      <param name="startingTime">Beginning time of the path.</param>
      <param name="endingTime">Ending time of the path.</param>
    </member>
    <member name="M:BEPUphysics.Paths.Curve`1.GetCurveBoundsInformation(System.Single@,System.Single@,System.Int32@,System.Int32@)">
      <summary>
            Gets information about the curve's total active interval.
            These are not always the first and last endpoints in a curve.
            </summary>
      <param name="firstIndexTime">Time of the first index.</param>
      <param name="lastIndexTime">Time of the last index.</param>
      <param name="minIndex">First index in the reachable curve.</param>
      <param name="maxIndex">Last index in the reachable curve.</param>
    </member>
    <member name="M:BEPUphysics.Paths.Curve`1.GetPreviousIndex(System.Double)">
      <summary>
            Computes the indices of control points surrounding the time.
            If the time is equal to a control point's time, indexA will
            be that control point's index.
            </summary>
      <param name="time">Time to index.</param>
      <returns>Index prior to or equal to the given time.</returns>
    </member>
    <member name="M:BEPUphysics.Paths.Curve`1.ControlPointAdded(BEPUphysics.Paths.CurveControlPoint{`0},System.Int32)">
      <summary>
            Called when a control point is added.
            </summary>
      <param name="curveControlPoint">New control point.</param>
      <param name="index">Index of the control point.</param>
    </member>
    <member name="M:BEPUphysics.Paths.Curve`1.ControlPointRemoved(BEPUphysics.Paths.CurveControlPoint{`0},System.Int32)">
      <summary>
            Called when a control point is removed.
            </summary>
      <param name="curveControlPoint">Removed control point.</param>
      <param name="oldIndex">Index of the control point before it was removed.</param>
    </member>
    <member name="M:BEPUphysics.Paths.Curve`1.ControlPointTimeChanged(BEPUphysics.Paths.CurveControlPoint{`0},System.Int32,System.Int32)">
      <summary>
            Called when a control point belonging to the curve has its time changed.
            </summary>
      <param name="curveControlPoint">Changed control point.</param>
      <param name="oldIndex">Old index of the control point.</param>
      <param name="newIndex">New index of the control point.</param>
    </member>
    <member name="M:BEPUphysics.Paths.Curve`1.ControlPointValueChanged(BEPUphysics.Paths.CurveControlPoint{`0})">
      <summary>
            Called when a control point belonging to the curve has its value changed.
            </summary>
      <param name="curveControlPoint">Changed control point.</param>
    </member>
    <member name="P:BEPUphysics.Paths.Curve`1.ControlPoints">
      <summary>
            Gets the list of control points in the curve.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.Curve`1.PostLoop">
      <summary>
            Defines how the curve is sampled when the evaluation time exceeds the final control point.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.Curve`1.PreLoop">
      <summary>
            Defines how the curve is sampled when the evaluation time exceeds the beginning control point.
            </summary>
    </member>
    <member name="T:BEPUphysics.Paths.StepCurve1D">
      <summary>
            One dimensional-valued curve that does not interpolate values.
            Instead, it just picks the value from the previous control point.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.StepCurve1D.Evaluate(System.Int32,System.Single,System.Single@)">
      <summary>
            Evaluates the curve at a given time using linear interpolation.
            </summary>
      <param name="controlPointIndex">Index of the control point at the beginning of the evaluation interval.</param>
      <param name="weight">Value of 0 to 1 representing how far along the interval to sample.</param>
      <param name="value">Value of the curve at the given location.</param>
    </member>
    <member name="M:BEPUphysics.Paths.StepCurve1D.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
      <summary>
            Computes the bounds of the curve.
            </summary>
      <param name="minIndex">Minimum index of the curve.</param>
      <param name="maxIndex">Maximum index of the curve.</param>
    </member>
    <member name="T:BEPUphysics.Paths.CurveControlPointList`1">
      <summary>
            Collection of control points in a curve.
            </summary>
      <typeparam name="TValue">Type of values in the curve.</typeparam>
    </member>
    <member name="M:BEPUphysics.Paths.CurveControlPointList`1.GetEnumerator">
      <summary>
             Gets an enumerator for the list.
            </summary>
      <returns>Enumerator for the list.</returns>
    </member>
    <member name="M:BEPUphysics.Paths.CurveControlPointList`1.Add(BEPUphysics.Paths.CurveControlPoint{`0})">
      <summary>
            Adds a control point to the curve.
            </summary>
      <param name="point">New control point to add to the curve.</param>
    </member>
    <member name="M:BEPUphysics.Paths.CurveControlPointList`1.Add(System.Single,`0)">
      <summary>
            Adds a new control point to the curve.
            </summary>
      <param name="time">Time of the new control point.</param>
      <param name="value">Value of the new control point.</param>
      <returns>Newly created control point.</returns>
    </member>
    <member name="M:BEPUphysics.Paths.CurveControlPointList`1.Remove(BEPUphysics.Paths.CurveControlPoint{`0})">
      <summary>
            Removes the control point from the curve.
            </summary>
      <param name="controlPoint">Control point to remove.</param>
    </member>
    <member name="M:BEPUphysics.Paths.CurveControlPointList`1.RemoveAt(System.Int32)">
      <summary>
            Removes the control point from the curve.
            </summary>
      <param name="index">Index to remove at.</param>
    </member>
    <member name="P:BEPUphysics.Paths.CurveControlPointList`1.Item(System.Int32)">
      <summary>
            Gets the control point at the given index.
            </summary>
      <param name="index">Index into the list.</param>
      <returns>Control point at the index.</returns>
    </member>
    <member name="P:BEPUphysics.Paths.CurveControlPointList`1.Count">
      <summary>
            Gets the number of elements in the list.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.CurveControlPointList`1.Curve">
      <summary>
            Gets the curve associated with this control point list.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory">
      <summary>
            Superclass of the generic typed NarrowPhasePairFactory.  Offers interaction with the factory on a INarrowPhasePair level.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.GetNarrowPhasePair">
      <summary>
             Manufactures and returns a narrow phase pair for the given overlap.
            </summary>
      <returns>Narrow phase pair.</returns>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.GiveBack(BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair)">
      <summary>
            Returns a pair to the factory for re-use.
            </summary>
      <param name="pair">Pair to return.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.EnsureCount(System.Int32)">
      <summary>
            Ensures that the factory has at least the given number of elements ready to take.
            </summary>
      <param name="minimumCount">Minimum number of elements to ensure in the factory.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.CapCount(System.Int32)">
      <summary>
            Ensures that the factory has at most the given number of elements ready to take.
            </summary>
      <param name="maximumCount">Maximum number of elements to allow in the factory.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.Clear">
      <summary>
            Removes all elements from the factory.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.Count">
      <summary>
            Gets or sets the number of elements in the pair factory that are ready to take.
            If the factory runs out, it will construct new instances to give away (unless AllowOnDemandConstruction is set to false).
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory.AllowOnDemandConstruction">
      <summary>
            Gets or sets whether or not to allow the factory to create additional instances when it runs
            out of its initial set.  Defaults to true.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory`1">
      <summary>
             Manufactures a given type of narrow phase pairs.
            </summary>
      <typeparam name="T">Type of the pair to manufacture.</typeparam>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory`1.GetNarrowPhasePair">
      <summary>
            Get a resource from the factory.
            </summary>
      <returns>A pair from the factory.</returns>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory`1.GiveBack(BEPUphysics.NarrowPhaseSystems.Pairs.NarrowPhasePair)">
      <summary>
            Give a resource back to the factory.
            </summary>
      <param name="pair">Pair to return.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory`1.Clear">
      <summary>
            Removes all elements from the factory.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhasePairFactory`1.Count">
      <summary>
            Gets or sets the number of elements in the pair factory that are ready to take.
            If the factory runs out, it will construct new instances to give away (unless AllowOnDemandConstruction is set to false).
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.TypePair">
      <summary>
             Pair of types.
            </summary>
    </member>
    <member name="F:BEPUphysics.NarrowPhaseSystems.TypePair.A">
      <summary>
             First type in the pair.
            </summary>
    </member>
    <member name="F:BEPUphysics.NarrowPhaseSystems.TypePair.B">
      <summary>
             Second type in the pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.TypePair.#ctor(System.Type,System.Type)">
      <summary>
             Constructs a new type pair.
            </summary>
      <param name="a">First type in the pair.</param>
      <param name="b">Second type in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.TypePair.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.TypePair.Equals(BEPUphysics.NarrowPhaseSystems.TypePair)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.NarrowPhase">
      <summary>
             Manages and constructs pair handlers from broad phase overlaps.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.#ctor(BEPUphysics.TimeStepSettings)">
      <summary>
             Constructs a new narrow phase.
            </summary>
      <param name="timeStepSettings">Time step settings used by the narrow phase.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.DataStructures.RawList{BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap})">
      <summary>
             Constructs a new narrow phase.
            </summary>
      <param name="timeStepSettings">Time step settings used by the narrow phase.</param>
      <param name="overlaps">Overlaps list used by the narrow phase to create pairs.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.DataStructures.RawList{BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap},BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs a new narrow phase.
            </summary>
      <param name="timeStepSettings">Time step settings used by the narrow phase.</param>
      <param name="overlaps">Overlaps list used by the narrow phase to create pairs.</param>
      <param name="threadManager">Thread manager used by the narrow phase.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.GetPair(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Gets the pair between two broad phase entries, if any.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
      <returns>The pair if it exists, null otherwise.</returns>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.NotifyUpdateableAdded(BEPUphysics.SolverSystems.SolverUpdateable)">
      <summary>
             Enqueues a solver updateable created by some pair for flushing into the solver later.
            </summary>
      <param name="addedItem">Updateable to add.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.NotifyUpdateableRemoved(BEPUphysics.SolverSystems.SolverUpdateable)">
      <summary>
             Enqueues a solver updateable removed by some pair for flushing into the solver later.
            </summary>
      <param name="removedItem">Solver updateable to remove.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhase.FlushGeneratedSolverUpdateables">
      <summary>
            Flushes the new solver updateables into the solver.
            They are 'flux' updateables, so this uses the solver's flux add method.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhase.BroadPhaseOverlaps">
      <summary>
             Gets or sets the list of broad phase overlaps used by the narrow phase to manage pairs.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhase.Pairs">
      <summary>
             Gets the list of Pairs managed by the narrow phase.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhase.TimeStepSettings">
      <summary>
             Gets or sets the time step settings used by the narrow phase.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhase.Solver">
      <summary>
            Gets or sets the solver into which the narrow phase will put solver updateables generated by narrow phase pairs.
            </summary>
    </member>
    <member name="E:BEPUphysics.NarrowPhaseSystems.NarrowPhase.CreatingPair">
      <summary>
             Fires when the narrow phase creates a pair.
            </summary>
    </member>
    <member name="E:BEPUphysics.NarrowPhaseSystems.NarrowPhase.RemovingPair">
      <summary>
             Fires when the narrow phase removes a pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.MathExtensions.Matrix2X2">
      <summary>
            2 row, 2 column matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix2X2.M11">
      <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix2X2.M12">
      <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix2X2.M21">
      <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix2X2.M22">
      <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a new 2 row, 2 column matrix.
            </summary>
      <param name="m11">Value at row 1, column 1 of the matrix.</param>
      <param name="m12">Value at row 1, column 2 of the matrix.</param>
      <param name="m21">Value at row 2, column 1 of the matrix.</param>
      <param name="m22">Value at row 2, column 2 of the matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Add(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
      <param name="a">First matrix to add.</param>
      <param name="b">Second matrix to add.</param>
      <param name="result">Sum of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Add(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
      <param name="a">First matrix to add.</param>
      <param name="b">Second matrix to add.</param>
      <param name="result">Sum of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Add(BEPUphysics.MathExtensions.Matrix2X2@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
      <param name="a">First matrix to add.</param>
      <param name="b">Second matrix to add.</param>
      <param name="result">Sum of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Add(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
      <param name="a">First matrix to add.</param>
      <param name="b">Second matrix to add.</param>
      <param name="result">Sum of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.CreateScale(System.Single,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Constructs a uniform scaling matrix.
            </summary>
      <param name="scale">Value to use in the diagonal.</param>
      <param name="matrix">Scaling matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Invert(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Inverts the given matix.
            </summary>
      <param name="matrix">Matrix to be inverted.</param>
      <param name="result">Inverted matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Multiply(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Multiplies the two matrices.
            </summary>
      <param name="a">First matrix to multiply.</param>
      <param name="b">Second matrix to multiply.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Multiply(BEPUphysics.MathExtensions.Matrix2X2@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Multiplies the two matrices.
            </summary>
      <param name="a">First matrix to multiply.</param>
      <param name="b">Second matrix to multiply.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Multiply(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Multiplies the two matrices.
            </summary>
      <param name="a">First matrix to multiply.</param>
      <param name="b">Second matrix to multiply.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Multiply(BEPUphysics.MathExtensions.Matrix2X3@,BEPUphysics.MathExtensions.Matrix3X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Multiplies the two matrices.
            </summary>
      <param name="a">First matrix to multiply.</param>
      <param name="b">Second matrix to multiply.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Negate(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Negates every element in the matrix.
            </summary>
      <param name="matrix">Matrix to negate.</param>
      <param name="result">Negated matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Subtract(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
      <param name="a">First matrix to subtract.</param>
      <param name="b">Second matrix to subtract.</param>
      <param name="result">Difference of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Transform(Microsoft.Xna.Framework.Vector2@,BEPUphysics.MathExtensions.Matrix2X2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>
            Transforms the vector by the matrix.
            </summary>
      <param name="v">Vector2 to transform.</param>
      <param name="matrix">Matrix to use as the transformation.</param>
      <param name="result">Product of the transformation.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Transpose(BEPUphysics.MathExtensions.Matrix2X2@,BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Computes the transposed matrix of a matrix.
            </summary>
      <param name="matrix">Matrix to transpose.</param>
      <param name="result">Transposed matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.ToString">
      <summary>
            Creates a string representation of the matrix.
            </summary>
      <returns>A string representation of the matrix.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix2X2.Determinant">
      <summary>
            Calculates the determinant of the matrix.
            </summary>
      <returns>The matrix's determinant.</returns>
    </member>
    <member name="P:BEPUphysics.MathExtensions.Matrix2X2.Identity">
      <summary>
            Gets the 2x2 identity matrix.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox">
      <summary>
             Helper class containing various tests based on GJK.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.MaximumGJKIterations">
      <summary>
            Maximum number of iterations the GJK algorithm will do.  If the iterations exceed this number, the system will immediately quit and return whatever information it has at the time.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.HighGJKIterations">
      <summary>
            Defines how many iterations are required to consider a GJK attempt to be 'probably stuck' and proceed with protective measures.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.AreShapesIntersecting(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
      <summary>
             Tests if the pair is intersecting.
            </summary>
      <param name="shapeA">First shape of the pair.</param>
      <param name="shapeB">Second shape of the pair.</param>
      <param name="transformA">Transform to apply to the first shape.</param>
      <param name="transformB">Transform to apply to the second shape.</param>
      <returns>Whether or not the shapes are intersecting.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.AreShapesIntersecting(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Tests if the pair is intersecting.
            </summary>
      <param name="shapeA">First shape of the pair.</param>
      <param name="shapeB">Second shape of the pair.</param>
      <param name="transformA">Transform to apply to the first shape.</param>
      <param name="transformB">Transform to apply to the second shape.</param>
      <param name="localSeparatingAxis">Warmstartable separating axis used by the method to quickly early-out if possible.  Updated to the latest separating axis after each run.</param>
      <returns>Whether or not the objects were intersecting.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.GetClosestPoints(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the closest points between the shapes.
            </summary>
      <param name="shapeA">First shape of the pair.</param>
      <param name="shapeB">Second shape of the pair.</param>
      <param name="transformA">Transform to apply to the first shape.</param>
      <param name="transformB">Transform to apply to the second shape.</param>
      <param name="closestPointA">Closest point on the first shape to the second shape.</param>
      <param name="closestPointB">Closest point on the second shape to the first shape.</param>
      <returns>Whether or not the objects were intersecting.  If they are intersecting, then the closest points cannot be identified.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.GetClosestPoints(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the closest points between the shapes.
            </summary>
      <param name="shapeA">First shape of the pair.</param>
      <param name="shapeB">Second shape of the pair.</param>
      <param name="transformA">Transform to apply to the first shape.</param>
      <param name="transformB">Transform to apply to the second shape.</param>
      <param name="cachedSimplex">Simplex from a previous updated used to warmstart the current attempt.  Updated after each run.</param>
      <param name="closestPointA">Closest point on the first shape to the second shape.</param>
      <param name="closestPointB">Closest point on the second shape to the first shape.</param>
      <returns>Whether or not the objects were intersecting.  If they are intersecting, then the closest points cannot be identified.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.RayCast(Microsoft.Xna.Framework.Ray,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,System.Single,BEPUphysics.RayHit@)">
      <summary>
             Tests a ray against a convex shape.
            </summary>
      <param name="ray">Ray to test against the shape.</param>
      <param name="shape">Shape to test.</param>
      <param name="shapeTransform">Transform to apply to the shape for the test.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="hit">Hit data of the ray cast, if any.</param>
      <returns>Whether or not the ray hit the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.RayHit@)">
      <summary>
             Sweeps a shape against another shape using a given sweep vector.
            </summary>
      <param name="sweptShape">Shape to sweep.</param>
      <param name="target">Shape being swept against.</param>
      <param name="sweep">Sweep vector for the sweptShape.</param>
      <param name="startingSweptTransform">Starting transform of the sweptShape.</param>
      <param name="targetTransform">Transform to apply to the target shape.</param>
      <param name="hit">Hit data of the sweep test, if any.</param>
      <returns>Whether or not the swept shape hit the other shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.RayHit@)">
      <summary>
             Sweeps two shapes against another.
            </summary>
      <param name="shapeA">First shape being swept.</param>
      <param name="shapeB">Second shape being swept.</param>
      <param name="sweepA">Sweep vector for the first shape.</param>
      <param name="sweepB">Sweep vector for the second shape.</param>
      <param name="transformA">Transform to apply to the first shape.</param>
      <param name="transformB">Transform to apply to the second shape.</param>
      <param name="hit">Hit data of the sweep test, if any.</param>
      <returns>Whether or not the swept shapes hit each other..</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.SphereCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,System.Single,BEPUphysics.RayHit@)">
      <summary>
             Casts a fat (sphere expanded) ray against the shape.
            </summary>
      <param name="ray">Ray to test against the shape.</param>
      <param name="radius">Radius of the ray.</param>
      <param name="shape">Shape to test against.</param>
      <param name="shapeTransform">Transform to apply to the shape for the test.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="hit">Hit data of the sphere cast, if any.</param>
      <returns>Whether or not the sphere cast hit the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.GJKToolbox.CCDSphereCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,System.Single,BEPUphysics.RayHit@)">
      <summary>
             Casts a fat (sphere expanded) ray against the shape.  If the raycast appears to be stuck in the shape, the cast will be attempted
             with a smaller ray (scaled by the MotionSettings.CoreShapeScaling each time).
            </summary>
      <param name="ray">Ray to test against the shape.</param>
      <param name="radius">Radius of the ray.</param>
      <param name="target">Shape to test against.</param>
      <param name="shapeTransform">Transform to apply to the shape for the test.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="hit">Hit data of the sphere cast, if any.</param>
      <returns>Whether or not the sphere cast hit the shape.</returns>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape">
      <summary>
             Ball-like shape.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.#ctor(System.Single)">
      <summary>
             Constructs a new sphere shape.
            </summary>
      <param name="radius">Radius of the sphere.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
      <param name="shapeTransform">Transform to use.</param>
      <param name="boundingBox">Bounding box of the transformed shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.GetLocalExtremePointWithoutMargin(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.ComputeMaximumRadius">
      <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
      <returns>Maximum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.ComputeMinimumRadius">
      <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
      <returns>Minimum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.ComputeVolumeDistribution(System.Single@)">
      <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.RayTest(Microsoft.Xna.Framework.Ray@,BEPUphysics.MathExtensions.RigidTransform@,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Gets the intersection between the sphere and the ray.
            </summary>
      <param name="ray">Ray to test against the sphere.</param>
      <param name="transform">Transform applied to the convex for the test.</param>
      <param name="maximumLength">Maximum distance to travel in units of the ray direction's length.</param>
      <param name="hit">Ray hit data, if any.</param>
      <returns>Whether or not the ray hit the target.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.ComputeCenter">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.ComputeCenter(System.Single@)">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.ComputeVolume">
      <summary>
            Computes the volume of the shape.
            </summary>
      <returns>Volume of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.GetCollidableInstance">
      <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
      <returns>EntityCollidable that uses this shape.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.SphereShape.Radius">
      <summary>
             Gets or sets the radius of the sphere.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainPairHandler">
      <summary>
             Handles a terrain-convex collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
      <summary>
             Updates the time of impact for the pair.
            </summary>
      <param name="requester">Collidable requesting the update.</param>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainPairHandler.ContactConstraint">
      <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainPairHandler.ContactManifold">
      <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainConvexPairHandler">
      <summary>
             Handles a terrain-convex collision pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.PositionUpdating.DiscretePositionUpdater">
      <summary>
             Discrete position updater.  Similar to the ContinuousPositionUpdater, but
             ignores the continuous state and just updates everything as if it were discrete.
            </summary>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.DiscretePositionUpdater.#ctor(BEPUphysics.TimeStepSettings)">
      <summary>
             Constructs the discrete position updater.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.DiscretePositionUpdater.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs the discrete position updater.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
      <param name="threadManager">Thread manager to use.</param>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.DiscretePositionUpdater.Add(BEPUphysics.PositionUpdating.IPositionUpdateable)">
      <summary>
             Adds an updateable to the updater.
            </summary>
      <param name="updateable">Item to add.</param>
      <exception cref="T:System.Exception">Thrown if the updateable already belongs to an updater.</exception>
    </member>
    <member name="M:BEPUphysics.PositionUpdating.DiscretePositionUpdater.Remove(BEPUphysics.PositionUpdating.IPositionUpdateable)">
      <summary>
            Removes an updateable from the updater.
            </summary>
      <param name="updateable">Updateable to remove.</param>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.IPairHandlerParent">
      <summary>
             Defines a pair handler which can have children.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.IPairHandlerParent.OnContactAdded(BEPUphysics.CollisionTests.Contact)">
      <summary>
             Called when a child adds a contact.
            </summary>
      <param name="contact">Contact added.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.IPairHandlerParent.OnContactRemoved(BEPUphysics.CollisionTests.Contact)">
      <summary>
            Called when a child removes a contact.
            </summary>
      <param name="contact">Contact removed.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.IPairHandlerParent.AddSolverUpdateable(BEPUphysics.Constraints.EntitySolverUpdateable)">
      <summary>
             Called when a child attempts to add a solver updateable to the solver.
            </summary>
      <param name="addedItem">Item to add.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.IPairHandlerParent.RemoveSolverUpdateable(BEPUphysics.Constraints.EntitySolverUpdateable)">
      <summary>
             Called when a child attempts to remove a solver updateable from the solver.
            </summary>
      <param name="removedItem">Item to remove.</param>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler">
      <summary>
             Superclass of pair handlers which have multiple index-based collidable child pairs.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.#ctor">
      <summary>
             Constructs a new compound-convex pair handler.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.UpdateMaterialProperties(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material)">
      <summary>
             Forces an update of the pair's material properties.
            </summary>
      <param name="a">Material of the first member of the pair.</param>
      <param name="b">Material of the second member of the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.UpdateMaterialProperties(BEPUphysics.Materials.InteractionProperties)">
      <summary>
            Updates the material interaction properties of the pair handler's constraint.
            </summary>
      <param name="properties">Properties to use.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.GetOpposingCollidable(System.Int32)">
      <summary>
            Get a collidable from CollidableB to represent the object at the given index.
            </summary>
      <param name="index">Index to create a collidable for.</param>
      <returns>Collidable for the object at the given index.</returns>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.ConfigureCollidable(BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry,System.Single)">
      <summary>
            Configure a triangle from CollidableB to represent the object at the given index.
            </summary>
      <param name="entry">Entry to configure.</param>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.CleanUpCollidable(BEPUphysics.Collidables.MobileCollidables.TriangleCollidable)">
      <summary>
            Cleans up the collidable.
            </summary>
      <param name="collidable">Collidable to clean up.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.UpdateContacts(System.Single)">
      <summary>
             Updates the pair handler's contacts.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.UpdateCollision(System.Single)">
      <summary>
             Updates the pair handler.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
      <summary>
             Updates the time of impact for the pair.
            </summary>
      <param name="requester">Collidable requesting the update.</param>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.ClearContacts">
      <summary>
            Clears the pair's contacts.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.ChildPairs">
      <summary>
             Gets a list of the pairs associated with children.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.MaterialA">
      <summary>
            Material of the first collidable.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.MaterialB">
      <summary>
            Material of the second collidable.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.MeshGroupPairHandler.ContactCount">
      <summary>
            Gets the number of contacts in the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshMeshPairHandler">
      <summary>
             Handles a mobile mesh and mesh collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshMeshPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshMeshPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshMobileMeshPairHandler">
      <summary>
             Handles a mobile mesh-mobile mesh collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshMobileMeshPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshMobileMeshPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.ISpringSettings">
      <summary>
            Implemented by constraints that support springlike behavior.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.ISpringSettings.SpringSettings">
      <summary>
            Gets the spring settings used by the constraint.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.Joint">
      <summary>
            Superclass of position-based constraints.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Joints.Joint.maxCorrectiveVelocity">
      <summary>
            Maximum extra velocity that the constraint will apply in an effort to correct constraint error.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Joints.Joint.maxCorrectiveVelocitySquared">
      <summary>
            Squared maximum extra velocity that the constraint will apply in an effort to correct constraint error.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Joints.Joint.springSettings">
      <summary>
            Spring settings define how a constraint responds to velocity and position error.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.Joint.MaxCorrectiveVelocity">
      <summary>
            Gets or sets the maximum extra velocity that the constraint will apply in an effort to correct any constraint error.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.Joint.SpringSettings">
      <summary>
            Gets the spring settings used by the constraint.
            Spring settings define how a constraint responds to velocity and position error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.I2DImpulseConstraint">
      <summary>
            Implemented by solver updateables which have a two dimensional impulse.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.I2DImpulseConstraint.RelativeVelocity">
      <summary>
            Gets the current relative velocity of the constraint.
            Computed based on the current connection velocities and jacobians.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.I2DImpulseConstraint.TotalImpulse">
      <summary>
            Gets the total impulse a constraint has applied.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.I2DImpulseConstraintWithError">
      <summary>
            Implemented by solver updateables which have a two dimensional impulse.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.I2DImpulseConstraintWithError.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.I2DJacobianConstraint">
      <summary>
            Denotes a class that uses two linear jacobian axes.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.I2DJacobianConstraint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="massMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint">
      <summary>
            Constrains two entities so that one has a point that stays on a line defined by the other.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.#ctor">
      <summary>
            Constructs a joint which constrains a point of one body to be on a line based on the other body.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB),
            the LineAnchor, the LineDirection, and the Point (or the entity-local versions).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a joint which constrains a point of one body to be on a line based on the other body.
            </summary>
      <param name="connectionA">First connected entity which defines the line.</param>
      <param name="connectionB">Second connected entity which has a point.</param>
      <param name="lineAnchor">Location off of which the line is based in world space.</param>
      <param name="lineDirection">Direction of the line in world space.</param>
      <param name="pointLocation">Location of the point anchored to connectionB in world space.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="massMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.SolveIteration">
      <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.LineAnchor">
      <summary>
            Gets or sets the line anchor in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.LineDirection">
      <summary>
            Gets or sets the line direction in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.LocalLineAnchor">
      <summary>
            Gets or sets the line anchor in connection A's local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.LocalLineDirection">
      <summary>
            Gets or sets the line direction in connection A's local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.LocalPoint">
      <summary>
            Gets or sets the point's location in connection B's local space.
            The point is the location that is attached to the line.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.OffsetA">
      <summary>
            Gets the offset from A to the connection point between the entities.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.OffsetB">
      <summary>
            Gets the offset from B to the connection point between the entities.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.Point">
      <summary>
            Gets or sets the point's location in world space.
            The point is the location on connection B that is attached to the line.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnLineJoint.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.I3DJacobianConstraint">
      <summary>
            Denotes a class that uses three linear jacobian axes.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
      <param name="jacobianZ">Third angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
      <param name="jacobianZ">Third angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
      <param name="jacobianZ">Third linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
      <param name="jacobianZ">Third linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.I3DJacobianConstraint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="T:BEPUphysics.Constraints.Collision.TwistFrictionConstraint">
      <summary>
            Computes the forces necessary to slow down and stop twisting motion in a collision between two entities.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.#ctor">
      <summary>
             Constructs a new twist friction constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.ContactManifoldConstraint">
      <summary>
             Gets the contact manifold constraint that owns this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.TotalTorque">
      <summary>
            Gets the torque applied by twist friction.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.TwistFrictionConstraint.RelativeVelocity">
      <summary>
             Gets the angular velocity between the associated entities.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.Collision.ContactManifoldConstraint">
      <summary>
             Superclass of collision constraints that include multiple contact subconstraints.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.AddContact(BEPUphysics.CollisionTests.Contact)">
      <summary>
             Adds a contact to be managed by the constraint.
            </summary>
      <param name="contact">Contact to add.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.RemoveContact(BEPUphysics.CollisionTests.Contact)">
      <summary>
             Removes a contact from the constraint.
            </summary>
      <param name="contact">Contact to remove.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.Initialize(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,BEPUphysics.NarrowPhaseSystems.Pairs.CollidablePairHandler)">
      <summary>
             Initializes the constraint.
            </summary>
      <param name="a">First entity of the pair.</param>
      <param name="b">Second entity of the pair.</param>
      <param name="newPair">Pair owning this constraint.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.CleanUp">
      <summary>
             Cleans up the constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.OnRemovalFromSolver(BEPUphysics.SolverSystems.Solver)">
      <summary>
            Called when the updateable is removed from its solver.
            </summary>
      <param name="oldSolver">Solver from which the updateable was removed.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.UpdateSolverActivity">
      <summary>
            Sets the activity state of the constraint based on the activity state of its connections.
            Called automatically by the space owning a constaint.  If a constraint is a sub-constraint that hasn't been directly added to the space,
            this may need to be called alongside the preStep from within the parent constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.UpdateMaterialProperties(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material)">
      <summary>
             Updates the material properties associated with the constraint.
            </summary>
      <param name="materialA">Material associated with the first entity of the pair.</param>
      <param name="materialB">Material associated with the second entity of the pair.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.MaterialInteraction">
      <summary>
             Gets or sets the material-blended properties used by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.EntityA">
      <summary>
             Gets the first entity associated with the manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.EntityB">
      <summary>
             Gets the second entity associated with the manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactManifoldConstraint.Pair">
      <summary>
             Gets the pair handler owning this constraint.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint">
      <summary>
             Collision constraint for non-convex manifolds.  These manifolds are usually used in cases
             where the contacts are coming from multiple objects or from non-convex objects.  The normals
             will likely face more than one direction.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.#ctor">
      <summary>
             Constructs a new nonconvex manifold constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.CleanUp">
      <summary>
             Cleans up the constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.AddContact(BEPUphysics.CollisionTests.Contact)">
      <summary>
             Adds a contact to be managed by the constraint.
            </summary>
      <param name="contact">Contact to add.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.RemoveContact(BEPUphysics.CollisionTests.Contact)">
      <summary>
             Removes a contact from the constraint.
            </summary>
      <param name="contact">Contact to remove.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.ContactPenetrationConstraints">
      <summary>
             Gets the penetration constraints in the manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.NonConvexContactManifoldConstraint.ContactFrictionConstraints">
      <summary>
             Gets the friction constraints in the manifold.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.ContactManifold">
      <summary>
             Superclass of manifolds which manage persistent contacts over multiple frames.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.ContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
      <summary>
             Initializes the manifold.
            </summary>
      <param name="newCollidableA">First collidable.</param>
      <param name="newCollidableB">Second collidable.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.ContactManifold.CleanUp">
      <summary>
             Cleans up the manifold.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.ContactManifold.Update(System.Single)">
      <summary>
             Updates the manifold.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.ContactManifold.ClearContacts">
      <summary>
            Clears the contacts associated with this manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.ContactManifold.Contacts">
      <summary>
             Gets the contacts in the manifold.
            </summary>
    </member>
    <member name="E:BEPUphysics.CollisionTests.Manifolds.ContactManifold.ContactAdded">
      <summary>
             Fires when a contact is added.
            </summary>
    </member>
    <member name="E:BEPUphysics.CollisionTests.Manifolds.ContactManifold.ContactRemoved">
      <summary>
             Fires when a contact is removed.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold">
      <summary>
             Manages persistent contact data between a triangle mesh and a convex.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices">
      <summary>
             Stores indices of a triangle.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices.Equals(BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.#ctor">
      <summary>
             Constructs a new contact manifold.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.Update(System.Single)">
      <summary>
             Updates the manifold.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.CleanUp">
      <summary>
             Cleans up the manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.ConvexCollidable">
      <summary>
             Gets the convex collidable associated with this pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.SphereTester">
      <summary>
             Helper class to test spheres against each other.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.SphereTester.AreSpheresColliding(BEPUphysics.CollisionShapes.ConvexShapes.SphereShape,BEPUphysics.CollisionShapes.ConvexShapes.SphereShape,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.CollisionTests.ContactData@)">
      <summary>
            Computes contact data for two spheres.
            </summary>
      <param name="a">First sphere.</param>
      <param name="b">Second sphere.</param>
      <param name="positionA">Position of the first sphere.</param>
      <param name="positionB">Position of the second sphere.</param>
      <param name="contact">Contact data between the spheres, if any.</param>
      <returns>Whether or not the spheres are touching.</returns>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold">
      <summary>
             Manages persistent contact data between two boxes.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.#ctor">
      <summary>
             Constructs a new manifold.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.Update(System.Single)">
      <summary>
             Updates the manifold.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
      <summary>
             Initializes the manifold.
            </summary>
      <param name="newCollidableA">First collidable.</param>
      <param name="newCollidableB">Second collidable.</param>
      <exception cref="T:System.Exception">Thrown when the collidables being used are not of the proper type.</exception>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.CleanUp">
      <summary>
             Cleans up the manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.CollidableA">
      <summary>
             Gets the first collidable in the pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.BoxSphereContactManifold.CollidableB">
      <summary>
            Gets the second collidable in the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.BroadPhaseSystems.IQueryAccelerator">
      <summary>
             Defines a system that accelerates bounding volume and ray cast queries.
            </summary>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.IQueryAccelerator.RayCast(Microsoft.Xna.Framework.Ray,System.Collections.Generic.IList{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry})">
      <summary>
             Gets the broad phase entries overlapping the ray.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="outputIntersections">Overlapped entries.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.IQueryAccelerator.RayCast(Microsoft.Xna.Framework.Ray,System.Single,System.Collections.Generic.IList{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry})">
      <summary>
             Gets the broad phase entries overlapping the ray.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray's direction's length.</param>
      <param name="outputIntersections">Overlapped entries.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.IQueryAccelerator.GetEntries(Microsoft.Xna.Framework.BoundingBox,System.Collections.Generic.IList{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry})">
      <summary>
            Gets the entries with bounding boxes which overlap the bounding shape.
            </summary>
      <param name="boundingShape">Bounding shape to test.</param>
      <param name="overlaps">Overlapped entries.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.IQueryAccelerator.GetEntries(Microsoft.Xna.Framework.BoundingSphere,System.Collections.Generic.IList{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry})">
      <summary>
            Gets the entries with bounding boxes which overlap the bounding shape.
            </summary>
      <param name="boundingShape">Bounding shape to test.</param>
      <param name="overlaps">Overlapped entries.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.IQueryAccelerator.GetEntries(Microsoft.Xna.Framework.BoundingFrustum,System.Collections.Generic.IList{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry})">
      <summary>
            Gets the entries with bounding boxes which overlap the bounding shape.
            </summary>
      <param name="boundingShape">Bounding shape to test.</param>
      <param name="overlaps">Overlapped entries.</param>
    </member>
    <member name="T:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchyQueryAccelerator">
      <summary>
             Interface to the DynamicHierarchy's volume query systems.
            </summary>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchyQueryAccelerator.GetEntries(Microsoft.Xna.Framework.BoundingBox,System.Collections.Generic.IList{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry})">
      <summary>
            Collects all entries with bounding boxes which intersect the given bounding box.
            </summary>
      <param name="box">Bounding box to test against the world.</param>
      <param name="entries">Entries of the space which intersect the bounding box.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchyQueryAccelerator.GetEntries(Microsoft.Xna.Framework.BoundingFrustum,System.Collections.Generic.IList{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry})">
      <summary>
            Collects all entries with bounding boxes which intersect the given frustum.
            </summary>
      <param name="frustum">Frustum to test against the world.</param>
      <param name="entries">Entries of the space which intersect the frustum.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchyQueryAccelerator.GetEntries(Microsoft.Xna.Framework.BoundingSphere,System.Collections.Generic.IList{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry})">
      <summary>
            Collects all entries with bounding boxes which intersect the given sphere.
            </summary>
      <param name="sphere">Sphere to test against the world.</param>
      <param name="entries">Entries of the space which intersect the sphere.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchyQueryAccelerator.RayCast(Microsoft.Xna.Framework.Ray,System.Single,System.Collections.Generic.IList{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry})">
      <summary>
            Finds all intersections between the ray and broad phase entries.
            </summary>
      <param name="ray">Ray to test against the structure.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray's direction's length.</param>
      <param name="entries">Entries which have bounding boxes that overlap the ray.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchyQueryAccelerator.RayCast(Microsoft.Xna.Framework.Ray,System.Collections.Generic.IList{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry})">
      <summary>
            Finds all intersections between the ray and broad phase entries.
            </summary>
      <param name="ray">Ray to test against the structure.</param>
      <param name="entries">Entries which have bounding boxes that overlap the ray.</param>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.UpdateableManager">
      <summary>
             Superclass of updateable managers.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.UpdateableManager.SequentialUpdatingStateChanged(BEPUphysics.UpdateableSystems.ISpaceUpdateable)">
      <summary>
             Notifies the manager that the updateable has changed sequential updating state.
            </summary>
      <param name="updateable">Updateable with changed state.</param>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.UpdateableManager.TimeStepSettings">
      <summary>
             Gets the time step settings used by the updateable manager.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.UpdateableManager.Space">
      <summary>
             Gets or sets the owning space.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.UpdateableManager`1">
      <summary>
             Superclass of updateable managers with a specific type.
            </summary>
      <typeparam name="T">Type of Updateable being managed.</typeparam>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.UpdateableManager`1.Add(`0)">
      <summary>
             Adds an updateable to the manager.
            </summary>
      <param name="updateable">Updateable to add.</param>
      <exception cref="T:System.Exception">Thrown if the manager already contains the updateable.</exception>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.UpdateableManager`1.Remove(`0)">
      <summary>
             Removes an updateable from the manager.
            </summary>
      <param name="updateable">Updateable to remove.</param>
      <exception cref="T:System.Exception">Thrown if the manager does not contain the updateable.</exception>
    </member>
    <member name="T:BEPUphysics.Paths.VariableLinearSpeedCurve">
      <summary>
            Wraps a curve that is traveled along with arbitrary defined linear speed.
            </summary>
      <remarks>
            The speed curve should be designed with the wrapped curve's times in mind.
            Speeds will be sampled based on the wrapped curve's interval.</remarks>
    </member>
    <member name="M:BEPUphysics.Paths.VariableLinearSpeedCurve.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Vector3})">
      <summary>
            Constructs a new variable speed curve.
            </summary>
      <param name="speedCurve">Curve defining speeds to use.</param>
      <param name="curve">Curve to wrap.</param>
    </member>
    <member name="M:BEPUphysics.Paths.VariableLinearSpeedCurve.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Vector3},System.Int32)">
      <summary>
            Constructs a new variable speed curve.
            </summary>
      <param name="speedCurve">Curve defining speeds to use.</param>
      <param name="curve">Curve to wrap.</param>
      <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
    </member>
    <member name="T:BEPUphysics.Materials.MaterialManager">
      <summary>
             Manages the relationship between materials.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.MaterialManager.BouncinessBlendMethod">
      <summary>
            Determines how to factor together friction values from two objects in a collision.
            Defaults to using the maximum bounciness of the pair.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.MaterialManager.BouncinessBlender">
      <summary>
            The property blender used by default in collision bounciness.
            Uses the space's bounciness PropertyBlendMethod to blend.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.MaterialManager.FrictionBlendMethod">
      <summary>
            Determines how to factor together bounciness values from two objects in a collision.
            Defaults to using the average friction of the pair.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.MaterialManager.FrictionBlender">
      <summary>
            The property blender used by default in collision friction.
            Uses the space's friction PropertyBlendMethod to blend.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.MaterialManager.DefaultKineticFriction">
      <summary>
             Default coefficient of kinetic friction.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.MaterialManager.DefaultStaticFriction">
      <summary>
             Default coefficient of static friction.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.MaterialManager.DefaultBounciness">
      <summary>
             Default coefficient of restitution.
            </summary>
    </member>
    <member name="M:BEPUphysics.Materials.MaterialManager.GetInteractionProperties(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material,BEPUphysics.Materials.InteractionProperties@)">
      <summary>
             Computes the interaction properties between two materials.
            </summary>
      <param name="materialA">First material of the pair.</param>
      <param name="materialB">Second material of the pair.</param>
      <param name="properties">Interaction properties between two materials.</param>
    </member>
    <member name="M:BEPUphysics.Materials.MaterialManager.GetStaticFriction(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material,System.Single@)">
      <summary>
             Blends the static friction of the two materials together.
            </summary>
      <param name="materialA">First material of the pair.</param>
      <param name="materialB">Second material of the pair.</param>
      <param name="blendedCoefficient">Blended friction coefficient.</param>
    </member>
    <member name="M:BEPUphysics.Materials.MaterialManager.GetKineticFriction(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material,System.Single@)">
      <summary>
             Blends the kinetic friction of the two materials together.
            </summary>
      <param name="materialA">First material of the pair.</param>
      <param name="materialB">Second material of the pair.</param>
      <param name="blendedCoefficient">Blended friction coefficient.</param>
    </member>
    <member name="M:BEPUphysics.Materials.MaterialManager.GetBounciness(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material,System.Single@)">
      <summary>
             Blends the bounciness of the two materials together.
            </summary>
      <param name="materialA">First material of the pair.</param>
      <param name="materialB">Second material of the pair.</param>
      <param name="blendedCoefficient">Blended bounciness.</param>
    </member>
    <member name="M:BEPUphysics.Materials.MaterialManager.GetStaticFriction(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material,BEPUphysics.Materials.PropertyBlender,System.Single@)">
      <summary>
             Blends the static friction of the two materials together.
            </summary>
      <param name="materialA">First material of the pair.</param>
      <param name="materialB">Second material of the pair.</param>
      <param name="blender">Blender to use to blend the material properties.</param>
      <param name="blendedCoefficient">Blended friction coefficient.</param>
    </member>
    <member name="M:BEPUphysics.Materials.MaterialManager.GetKineticFriction(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material,BEPUphysics.Materials.PropertyBlender,System.Single@)">
      <summary>
             Blends the kinetic friction of the two materials together.
            </summary>
      <param name="materialA">First material of the pair.</param>
      <param name="materialB">Second material of the pair.</param>
      <param name="blender">Blender to use to blend the material properties.</param>
      <param name="blendedCoefficient">Blended friction coefficient.</param>
    </member>
    <member name="M:BEPUphysics.Materials.MaterialManager.GetBounciness(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material,BEPUphysics.Materials.PropertyBlender,System.Single@)">
      <summary>
             Blends the bounciness of the two materials together.
            </summary>
      <param name="materialA">First material of the pair.</param>
      <param name="materialB">Second material of the pair.</param>
      <param name="blender">Blender to use to blend the material properties.</param>
      <param name="blendedCoefficient">Blended bounciness coefficient.</param>
    </member>
    <member name="M:BEPUphysics.Materials.MaterialManager.DefaultBouncinessBlender(System.Single,System.Single,System.Object)">
      <summary>
            The property blender used by default in collision bounciness.
            Uses the space's bounciness PropertyBlendMethod to blend.
            </summary>
      <param name="aValue">Value associated with the first object to blend.</param>
      <param name="bValue">Value associated with the second object to blend.</param>
      <param name="extraInfo">Extra data to use in the calculation.</param>
      <returns>Blended property value.</returns>
    </member>
    <member name="M:BEPUphysics.Materials.MaterialManager.DefaultFrictionBlender(System.Single,System.Single,System.Object)">
      <summary>
            The property blender used by default in collision friction.
            Uses the space's friction PropertyBlendMethod to blend.
            </summary>
      <param name="aValue">Value associated with the first object to blend.</param>
      <param name="bValue">Value associated with the second object to blend.</param>
      <param name="extraInfo">Extra data to use in the calculation.</param>
      <returns>Blended property value.</returns>
    </member>
    <member name="P:BEPUphysics.Materials.MaterialManager.MaterialInteractions">
      <summary>
             Gets or sets the material interactions dictionary.
             This dictionary contains all the special relationships between specific materials.
             These interaction properties will override properties obtained by normal blending.
            </summary>
    </member>
    <member name="T:BEPUphysics.MathExtensions.RigidTransform">
      <summary>
             Transform composed of a rotation and translation.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.RigidTransform.Position">
      <summary>
             Translation component of the transform.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.RigidTransform.Orientation">
      <summary>
             Rotation component of the transform.
            </summary>
    </member>
    <member name="M:BEPUphysics.MathExtensions.RigidTransform.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
      <summary>
             Constructs a new rigid transform.
            </summary>
      <param name="position">Translation component of the transform.</param>
      <param name="orienation">Rotation component of the transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.RigidTransform.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>
             Constructs a new rigid transform.
            </summary>
      <param name="position">Translation component of the transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.RigidTransform.#ctor(Microsoft.Xna.Framework.Quaternion)">
      <summary>
             Constructs a new rigid transform.
            </summary>
      <param name="orienation">Rotation component of the transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.RigidTransform.Invert(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
      <summary>
            Inverts a rigid transform.
            </summary>
      <param name="transform">Transform to invert.</param>
      <param name="inverse">Inverse of the transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.RigidTransform.Transform(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
      <summary>
             Transforms a rigid transform by another rigid transform.
            </summary>
      <param name="a">The first, "local" rigid transform.</param>
      <param name="b">The second, "world" rigid transform.</param>
      <param name="combined">Combined rigid transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.RigidTransform.TransformByInverse(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
      <summary>
             Transforms a rigid transform by another rigid transform's inverse.
            </summary>
      <param name="local">The first rigid transform.</param>
      <param name="world">The second rigid transform, to be inverted.</param>
      <param name="combined">Combined rigid transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.RigidTransform.Transform(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Transforms a position by a rigid transform.
            </summary>
      <param name="position">Position to transform.</param>
      <param name="transform">Transform to apply.</param>
      <param name="result">Transformed position.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.RigidTransform.TransformByInverse(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Transforms a position by a rigid transform's inverse.
            </summary>
      <param name="position">Position to transform.</param>
      <param name="transform">Transform to invert and apply.</param>
      <param name="result">Transformed position.</param>
    </member>
    <member name="P:BEPUphysics.MathExtensions.RigidTransform.OrientationMatrix">
      <summary>
            Gets the orientation matrix created from the orientation of the rigid transform.
            </summary>
    </member>
    <member name="P:BEPUphysics.MathExtensions.RigidTransform.Matrix">
      <summary>
             Gets the 4x4 matrix created from the rigid transform.
            </summary>
    </member>
    <member name="P:BEPUphysics.MathExtensions.RigidTransform.Identity">
      <summary>
             Gets the identity rigid transform.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.ContactRefresher">
      <summary>
             Helper class that refreshes manifolds to keep them recent.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.ContactRefresher.ContactRefresh(BEPUphysics.DataStructures.RawList{BEPUphysics.CollisionTests.Contact},BEPUphysics.DataStructures.RawValueList{BEPUphysics.CollisionTests.ContactSupplementData},BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.DataStructures.RawList{System.Int32})">
      <summary>
            Refreshes the contact manifold, removing any out of date contacts
            and updating others.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox">
      <summary>
             Helper class that supports other systems using minkowski space operations.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.GetLocalTransform(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
      <summary>
             Gets the local transform of B in the space of A.
            </summary>
      <param name="transformA">First transform.</param>
      <param name="transformB">Second transform.</param>
      <param name="localTransformB">Transform of B in the local space of A.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.GetLocalMinkowskiExtremePoint(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the minkowski difference of shapeA and shapeB in the local space of shapeA.
            </summary>
      <param name="shapeA">First shape.</param>
      <param name="shapeB">Second shape.</param>
      <param name="direction">Extreme point direction in local space.</param>
      <param name="localTransformB">Transform of shapeB in the local space of A.</param>
      <param name="extremePoint">The extreme point in the local space of A.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.GetLocalMinkowskiExtremePoint(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the minkowski difference of shapeA and shapeB in the local space of shapeA.
            </summary>
      <param name="shapeA">First shape.</param>
      <param name="shapeB">Second shape.</param>
      <param name="direction">Extreme point direction in local space.</param>
      <param name="localTransformB">Transform of shapeB in the local space of A.</param>
      <param name="extremePointA">The extreme point on shapeA.</param>
      <param name="extremePoint">The extreme point in the local space of A.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.GetLocalMinkowskiExtremePoint(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the minkowski difference of shapeA and shapeB in the local space of shapeA.
            </summary>
      <param name="shapeA">First shape.</param>
      <param name="shapeB">Second shape.</param>
      <param name="direction">Extreme point direction in local space.</param>
      <param name="localTransformB">Transform of shapeB in the local space of A.</param>
      <param name="extremePointA">The extreme point on shapeA.</param>
      <param name="extremePointB">The extreme point on shapeB.</param>
      <param name="extremePoint">The extreme point in the local space of A.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.GetLocalMinkowskiExtremePointWithoutMargin(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the minkowski difference of shapeA and shapeB in the local space of shapeA, without a margin.
            </summary>
      <param name="shapeA">First shape.</param>
      <param name="shapeB">Second shape.</param>
      <param name="direction">Extreme point direction in local space.</param>
      <param name="localTransformB">Transform of shapeB in the local space of A.</param>
      <param name="extremePoint">The extreme point in the local space of A.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.ExpandMinkowskiSum(System.Single,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Computes the expansion of the minkowski sum due to margins in a given direction.
            </summary>
      <param name="marginA">First margin.</param>
      <param name="marginB">Second margin.</param>
      <param name="direction">Extreme point direction.</param>
      <param name="contribution">Margin contribution to the extreme point.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MinkowskiToolbox.ExpandMinkowskiSum(System.Single,System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Computes the expansion of the minkowski sum due to margins in a given direction.
            </summary>
      <param name="marginA">First margin.</param>
      <param name="marginB">Second margin.</param>
      <param name="direction">Extreme point direction.</param>
      <param name="toExpandA">Margin contribution to the shapeA.</param>
      <param name="toExpandB">Margin contribution to the shapeB.</param>
    </member>
    <member name="T:BEPUphysics.DataStructures.TriangleMesh">
      <summary>
             Data structure containing triangle mesh data and its associated bounding box tree.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.TriangleMesh.#ctor(BEPUphysics.DataStructures.MeshBoundingBoxTreeData)">
      <summary>
             Constructs a new triangle mesh.
            </summary>
      <param name="data">Data to use to construct the mesh.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Ray,System.Int32@)">
      <summary>
             Tests a ray against the triangle mesh.
            </summary>
      <param name="ray">Ray to test against the mesh.</param>
      <param name="hitCount">Number of hits between the ray and the mesh.</param>
      <returns>Whether or not the ray hit the mesh.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Ray,BEPUphysics.RayHit@)">
      <summary>
             Tests a ray against the triangle mesh.
            </summary>
      <param name="ray">Ray to test against the mesh.</param>
      <param name="rayHit">Hit data for the ray, if any.</param>
      <returns>Whether or not the ray hit the mesh.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Ray,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,BEPUphysics.RayHit@)">
      <summary>
             Tests a ray against the triangle mesh.
            </summary>
      <param name="ray">Ray to test against the mesh.</param>
      <param name="sidedness">Sidedness to apply to the mesh for the ray cast.</param>
      <param name="rayHit">Hit data for the ray, if any.</param>
      <returns>Whether or not the ray hit the mesh.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Ray,System.Collections.Generic.IList{BEPUphysics.RayHit})">
      <summary>
             Tests a ray against the triangle mesh.
            </summary>
      <param name="ray">Ray to test against the mesh.</param>
      <param name="hits">Hit data for the ray, if any.</param>
      <returns>Whether or not the ray hit the mesh.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Ray,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,System.Collections.Generic.IList{BEPUphysics.RayHit})">
      <summary>
             Tests a ray against the triangle mesh.
            </summary>
      <param name="ray">Ray to test against the mesh.</param>
      <param name="sidedness">Sidedness to apply to the mesh for the ray cast.</param>
      <param name="hits">Hit data for the ray, if any.</param>
      <returns>Whether or not the ray hit the mesh.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@)">
      <summary>
             Tests a ray against the triangle mesh.
            </summary>
      <param name="ray">Ray to test against the mesh.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="rayHit">Hit data for the ray, if any.</param>
      <returns>Whether or not the ray hit the mesh.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,BEPUphysics.RayHit@)">
      <summary>
             Tests a ray against the triangle mesh.
            </summary>
      <param name="ray">Ray to test against the mesh.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="sidedness">Sidedness to apply to the mesh for the ray cast.</param>
      <param name="rayHit">Hit data for the ray, if any.</param>
      <returns>Whether or not the ray hit the mesh.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Ray,System.Single,System.Collections.Generic.IList{BEPUphysics.RayHit})">
      <summary>
             Tests a ray against the triangle mesh.
            </summary>
      <param name="ray">Ray to test against the mesh.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="hits">Hit data for the ray, if any.</param>
      <returns>Whether or not the ray hit the mesh.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TriangleMesh.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,System.Collections.Generic.IList{BEPUphysics.RayHit})">
      <summary>
             Tests a ray against the triangle mesh.
            </summary>
      <param name="ray">Ray to test against the mesh.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="sidedness">Sidedness to apply to the mesh for the ray cast.</param>
      <param name="hits">Hit data for the ray, if any.</param>
      <returns>Whether or not the ray hit the mesh.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TriangleMesh.GetVerticesAndIndicesFromModel(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Vector3[]@,System.Int32[]@)">
      <summary>
            Gets an array of vertices and indices from the provided model.
            </summary>
      <param name="collisionModel">Model to use for the collision shape.</param>
      <param name="vertices">Compiled set of vertices from the model.</param>
      <param name="indices">Compiled set of indices from the model.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.TriangleMesh.AddMesh(Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Matrix,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.IList{System.Int32})">
      <summary>
            Adds a mesh's vertices and indices to the given lists.
            </summary>
      <param name="collisionModelMesh">Model to use for the collision shape.</param>
      <param name="transform">Transform to apply to the mesh.</param>
      <param name="vertices">List to receive vertices from the mesh.</param>
      <param name="indices">List to receive indices from the mesh.</param>
    </member>
    <member name="P:BEPUphysics.DataStructures.TriangleMesh.Data">
      <summary>
             Gets or sets the bounding box data used in the mesh.
            </summary>
    </member>
    <member name="P:BEPUphysics.DataStructures.TriangleMesh.Tree">
      <summary>
             Gets the bounding box tree that accelerates queries to this triangle mesh.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.BoxSpherePairHandler">
      <summary>
             Handles a box and sphere in a collision.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.BoxSpherePairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.BoxSpherePairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.BoxSpherePairHandler.ContactConstraint">
      <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.BoxSpherePairHandler.ContactManifold">
      <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshPairHandler">
      <summary>
             Handles a instanced mesh-convex collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
      <summary>
             Updates the time of impact for the pair.
            </summary>
      <param name="requester">Collidable requesting the update.</param>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshPairHandler.ContactConstraint">
      <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshPairHandler.ContactManifold">
      <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshSpherePairHandler">
      <summary>
             Handles a instanced mesh-convex collision pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SolverGroups.WeldJoint">
      <summary>
            Restricts the linear and angular motion between two entities.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.WeldJoint.#ctor">
      <summary>
            Constructs a new constraint which restricts the linear and angular motion between two entities.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.WeldJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
      <summary>
            Constructs a new constraint which restricts the linear and angular motion between two entities.
            </summary>
      <param name="connectionA">First entity of the constraint pair.</param>
      <param name="connectionB">Second entity of the constraint pair.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.WeldJoint.BallSocketJoint">
      <summary>
            Gets the ball socket joint that restricts linear degrees of freedom.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.WeldJoint.NoRotationJoint">
      <summary>
            Gets the no rotation joint that prevents angular motion.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SolverGroups.UniversalJoint">
      <summary>
            Restricts three degrees of linear motion and one degree of angular motion.
            Acts like two hinges in immediate sequence.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.UniversalJoint.#ctor">
      <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and one degree of twisting angular freedom between two entities.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.UniversalJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and one degree of twisting angular freedom between two entities.
            </summary>
      <param name="connectionA">First entity of the constraint pair.</param>
      <param name="connectionB">Second entity of the constraint pair.</param>
      <param name="anchor">Point around which both entities rotate in world space.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.UniversalJoint.BallSocketJoint">
      <summary>
            Gets the ball socket joint that restricts linear degrees of freedom.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.UniversalJoint.Limit">
      <summary>
            Gets the rotational limit of the universal joint.
            This constraint overlaps with the twistJoint; if the limit is activated,
            the twistJoint should be generally deactivated and vice versa.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.UniversalJoint.Motor">
      <summary>
            Gets the motor of the universal joint.
            This constraint overlaps with the twistJoint; if the motor is activated,
            the twistJoint should generally be deactivated and vice versa.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.UniversalJoint.TwistJoint">
      <summary>
            Gets the angular joint which removes one twisting degree of freedom.
            </summary>
    </member>
    <member name="T:BEPUphysics.DataStructures.MeshBoundingBoxTreeData">
      <summary>
             Superclass of the data used to create triangle mesh bounding box trees.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTreeData.GetBoundingBox(System.Int32,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Gets the bounding box of an element in the data.
            </summary>
      <param name="triangleIndex">Index of the triangle in the data.</param>
      <param name="boundingBox">Bounding box of the triangle.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTreeData.GetTriangle(System.Int32,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the triangle vertex positions at a given index.
            </summary>
      <param name="triangleIndex">First index of a triangle's vertices in the index buffer.</param>
      <param name="v1">First vertex of the triangle.</param>
      <param name="v2">Second vertex of the triangle.</param>
      <param name="v3">Third vertex of the triangle.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTreeData.GetVertexPosition(System.Int32,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the position of a vertex in the data.
            </summary>
      <param name="i">Index of the vertex.</param>
      <param name="vertex">Position of the vertex.</param>
    </member>
    <member name="P:BEPUphysics.DataStructures.MeshBoundingBoxTreeData.Indices">
      <summary>
             Gets or sets the indices of the triangle mesh.
            </summary>
    </member>
    <member name="P:BEPUphysics.DataStructures.MeshBoundingBoxTreeData.Vertices">
      <summary>
             Gets or sets the vertices of the triangle mesh.
            </summary>
    </member>
    <member name="T:BEPUphysics.DataStructures.TransformableMeshData">
      <summary>
             Collection of mesh data which transforms its vertices before returning them.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.TransformableMeshData.#ctor(Microsoft.Xna.Framework.Vector3[],System.Int32[])">
      <summary>
             Constructs the mesh data.
            </summary>
      <param name="vertices">Vertices to use in the mesh data.</param>
      <param name="indices">Indices to use in the mesh data.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.TransformableMeshData.#ctor(Microsoft.Xna.Framework.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform)">
      <summary>
             Constructs the mesh data.
            </summary>
      <param name="vertices">Vertice sto use in the mesh data.</param>
      <param name="indices">Indices to use in the mesh data.</param>
      <param name="worldTransform">Transform to apply to vertices before returning their positions.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.TransformableMeshData.GetTriangle(System.Int32,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the triangle vertex positions at a given index.
            </summary>
      <param name="triangleIndex">First index of a triangle's vertices in the index buffer.</param>
      <param name="v1">First vertex of the triangle.</param>
      <param name="v2">Second vertex of the triangle.</param>
      <param name="v3">Third vertex of the triangle.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.TransformableMeshData.GetVertexPosition(System.Int32,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the position of a vertex in the data.
            </summary>
      <param name="i">Index of the vertex.</param>
      <param name="vertex">Position of the vertex.</param>
    </member>
    <member name="P:BEPUphysics.DataStructures.TransformableMeshData.WorldTransform">
      <summary>
             Gets or sets the transform to apply to the vertices before returning their position.
            </summary>
    </member>
    <member name="T:BEPUphysics.DataStructures.BoundingBoxTree`1">
      <summary>
             Acceleration structure of objects surrounded by axis aligned bounding boxes, supporting various speedy queries.
            </summary>
    </member>
    <member name="F:BEPUphysics.DataStructures.BoundingBoxTree`1.LeafMargin">
      <summary>
            The tiny extra margin added to leaf bounding boxes that allow the volume cost metric to function properly even in degenerate cases.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Constructs a new tree.
            </summary>
      <param name="elements">Data to use to construct the tree.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.Reconstruct(System.Collections.Generic.IList{`0})">
      <summary>
            Reconstructs the tree based on the current data.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.Refit">
      <summary>
            Refits the tree based on the current data.
            This process is cheaper to perform than a reconstruction when the topology of the mesh
            does not change.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.Add(`0)">
      <summary>
            Adds an element to the tree.
            If a list of objects is available, using the Reconstruct method is recommended.
            </summary>
      <param name="element">Element to add.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.GetOverlaps(Microsoft.Xna.Framework.BoundingBox,System.Collections.Generic.IList{`0})">
      <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
      <param name="boundingBox">Shape to query against the tree.</param>
      <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
      <returns>Whether or not any elements were overlapped.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.GetOverlaps(Microsoft.Xna.Framework.BoundingSphere,System.Collections.Generic.IList{`0})">
      <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
      <param name="boundingSphere">Shape to query against the tree.</param>
      <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
      <returns>Whether or not any elements were overlapped.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.GetOverlaps(Microsoft.Xna.Framework.BoundingFrustum,System.Collections.Generic.IList{`0})">
      <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
      <param name="boundingFrustum">Shape to query against the tree.</param>
      <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
      <returns>Whether or not any elements were overlapped.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.GetOverlaps(Microsoft.Xna.Framework.Ray,System.Collections.Generic.IList{`0})">
      <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
      <param name="ray">Shape to query against the tree.</param>
      <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
      <returns>Whether or not any elements were overlapped.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.GetOverlaps(Microsoft.Xna.Framework.Ray,System.Single,System.Collections.Generic.IList{`0})">
      <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
      <param name="ray">Shape to query against the tree.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray's length.</param>
      <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
      <returns>Whether or not any elements were overlapped.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.BoundingBoxTree`1.GetOverlaps``1(BEPUphysics.DataStructures.BoundingBoxTree{``0},System.Collections.Generic.IList{BEPUphysics.DataStructures.TreeOverlapPair{`0,``0}})">
      <summary>
            Gets the pairs of elements in each tree with overlapping bounding boxes.
            </summary>
      <typeparam name="TElement">Type of the elements in the opposing tree.</typeparam>
      <param name="tree">Other tree to test.</param>
      <param name="outputOverlappedElements">List of overlaps found by the query.</param>
      <returns>Whether or not any overlaps were found.</returns>
    </member>
    <member name="P:BEPUphysics.DataStructures.BoundingBoxTree`1.BoundingBox">
      <summary>
            Gets the bounding box surrounding the tree.
            </summary>
    </member>
    <member name="T:BEPUphysics.Paths.HermiteCurve3D">
      <summary>
            Defines a 3D curve using hermite interpolation.
            </summary>
    </member>
    <member name="F:BEPUphysics.Paths.HermiteCurve3D.tangents">
      <summary>
            Internal list of curve tangents.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.HermiteCurve3D.Evaluate(System.Int32,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Evaluates the curve section starting at the control point index using
            the weight value.
            </summary>
      <param name="controlPointIndex">Index of the starting control point of the subinterval.</param>
      <param name="weight">Location to evaluate on the subinterval from 0 to 1.</param>
      <param name="value">Value at the given location.</param>
    </member>
    <member name="M:BEPUphysics.Paths.HermiteCurve3D.ControlPointAdded(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3},System.Int32)">
      <summary>
            Called when a control point is added.
            </summary>
      <param name="curveControlPoint">New control point.</param>
      <param name="index">Index of the control point.</param>
    </member>
    <member name="M:BEPUphysics.Paths.HermiteCurve3D.ControlPointRemoved(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3},System.Int32)">
      <summary>
            Called when a control point is removed.
            </summary>
      <param name="curveControlPoint">Removed control point.</param>
      <param name="oldIndex">Index of the control point before it was removed.</param>
    </member>
    <member name="M:BEPUphysics.Paths.HermiteCurve3D.ControlPointTimeChanged(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32)">
      <summary>
            Called when a control point belonging to the curve has its time changed.
            </summary>
      <param name="curveControlPoint">Changed control point.</param>
      <param name="oldIndex">Old index of the control point.</param>
      <param name="newIndex">New index of the control point.</param>
    </member>
    <member name="M:BEPUphysics.Paths.HermiteCurve3D.ControlPointValueChanged(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3})">
      <summary>
            Called when a control point belonging to the curve has its value changed.
            </summary>
      <param name="curveControlPoint">Changed control point.</param>
    </member>
    <member name="M:BEPUphysics.Paths.HermiteCurve3D.ComputeTangents">
      <summary>
            Computes the tangent entries in the curve according to some type of hermite curve.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.HermiteCurve3D.Tangents">
      <summary>
            Gets the tangents used by the curve per control point.
            </summary>
    </member>
    <member name="T:BEPUphysics.Paths.FiniteDifferenceSpline3D">
      <summary>
            3D hermite curve that uses the finite difference method to compute tangents.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.FiniteDifferenceSpline3D.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
      <summary>
            Gets the curve's bounding index information.
            </summary>
      <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
      <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
    </member>
    <member name="T:BEPUphysics.Materials.PropertyBlendMethod">
      <summary>
            Contains the various options available for combining the physical properties of objects during an interaction, such as friction and bounciness.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.PropertyBlendMethod.Average">
      <summary>
            Averages the two property values.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.PropertyBlendMethod.Max">
      <summary>
            Uses the larger of the two property values.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.PropertyBlendMethod.Min">
      <summary>
            Uses the smaller of the two property values.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.PropertyBlendMethod.BiasHigh">
      <summary>
            Factors in 75% of the high property value of the pair and 25% of the low property value of the pair.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.PropertyBlendMethod.BiasLow">
      <summary>
            Factors in 25% of the high property value of the pair and 75% of the low property value of the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.Materials.PropertyBlender">
      <summary>
            Function which takes information from each entity and computes a blended property.
            Commonly used for friction and bounciness.
            </summary>
      <param name="aValue">Value associated with the first object to blend.</param>
      <param name="bValue">Value associated with the second object to blend.</param>
      <param name="extraData">Extra data to include in the process.</param>
      <returns>Blended property value.</returns>
    </member>
    <member name="T:BEPUphysics.PositionUpdating.PositionUpdateMode">
      <summary>
             Update modes for position updateables.
            </summary>
    </member>
    <member name="F:BEPUphysics.PositionUpdating.PositionUpdateMode.Discrete">
      <summary>
            Updates position discretely regardless of its collision pairs.
            </summary>
    </member>
    <member name="F:BEPUphysics.PositionUpdating.PositionUpdateMode.Passive">
      <summary>
            Updates position discretely in isolation; when a Continuous object collides with it,
            its position update will be bounded by the time of impact.
            </summary>
    </member>
    <member name="F:BEPUphysics.PositionUpdating.PositionUpdateMode.Continuous">
      <summary>
            Updates position continuously.  Continuous objects will integrate up to their earliest collision time.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler">
      <summary>
             Superclass of pairs which manage multiple sub-collidable pairs.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.#ctor">
      <summary>
             Constructs a new compound-convex pair handler.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.UpdateMaterialProperties(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material)">
      <summary>
             Forces an update of the pair's material properties.
            </summary>
      <param name="a">Material of the first member of the pair.</param>
      <param name="b">Material of the second member of the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.UpdateMaterialProperties(BEPUphysics.Materials.InteractionProperties)">
      <summary>
            Updates the material interaction properties of the pair handler's constraint.
            </summary>
      <param name="properties">Properties to use.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.UpdateContacts(System.Single)">
      <summary>
             Updates the pair handler's contacts.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.UpdateCollision(System.Single)">
      <summary>
             Updates the pair handler.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
      <summary>
             Updates the time of impact for the pair.
            </summary>
      <param name="requester">Collidable requesting the update.</param>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.ClearContacts">
      <summary>
            Clears the pair's contacts.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.ChildPairs">
      <summary>
             Gets a list of the pairs associated with children.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.GroupPairHandler.ContactCount">
      <summary>
            Gets the number of contacts in the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundGroupPairHandler">
      <summary>
             Handles a compound and group collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundGroupPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundGroupPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundStaticMeshPairHandler">
      <summary>
             Handles a compound-static mesh collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundStaticMeshPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundStaticMeshPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.Prefabs.Triangle">
      <summary>
            Triangle-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Triangle.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Constructs a dynamic triangle.
            </summary>
      <param name="v1">Position of the first vertex.</param>
      <param name="v2">Position of the second vertex.</param>
      <param name="v3">Position of the third vertex.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Triangle.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a nondynamic triangle.
            </summary>
      <param name="v1">Position of the first vertex.</param>
      <param name="v2">Position of the second vertex.</param>
      <param name="v3">Position of the third vertex.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Triangle.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Constructs a dynamic triangle.
            </summary>
      <param name="pos">Position where the triangle is initialy centered.</param>
      <param name="v1">Position of the first vertex.</param>
      <param name="v2">Position of the second vertex.</param>
      <param name="v3">Position of the third vertex.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Triangle.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a nondynamic triangle.
            </summary>
      <param name="pos">Position where the triangle is initially centered.</param>
      <param name="v1">Position of the first vertex.</param>
      <param name="v2">Position of the second vertex.</param>
      <param name="v3">Position of the third vertex.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Triangle.#ctor(BEPUphysics.EntityStateManagement.MotionState,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Constructs a dynamic triangle.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="v1">Position of the first vertex.</param>
      <param name="v2">Position of the second vertex.</param>
      <param name="v3">Position of the third vertex.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Triangle.#ctor(BEPUphysics.EntityStateManagement.MotionState,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a nondynamic triangle.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="v1">Position of the first vertex.</param>
      <param name="v2">Position of the second vertex.</param>
      <param name="v3">Position of the third vertex.</param>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Triangle.LocalVertexA">
      <summary>
             Gets or sets the first vertex of the triangle in local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Triangle.LocalVertexB">
      <summary>
             Gets or sets the second vertex of the triangle in local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Triangle.LocalVertexC">
      <summary>
             Gets or sets the third vertex of the triangle in local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Triangle.VertexA">
      <summary>
             Gets or sets the first vertex of the triangle in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Triangle.VertexB">
      <summary>
             Gets or sets the second vertex of the triangle in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Triangle.VertexC">
      <summary>
             Gets or sets the third vertex of the triangle in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Triangle.Sidedness">
      <summary>
             Gets or sets the sidedness of the triangle.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.I3DImpulseConstraint">
      <summary>
            Implemented by solver updateables which have a three dimensional impulse.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.I3DImpulseConstraint.RelativeVelocity">
      <summary>
            Gets the current relative velocity of the constraint.
            Computed based on the current connection velocities and jacobians.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.I3DImpulseConstraint.TotalImpulse">
      <summary>
            Gets the total impulse a constraint has applied.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.I3DImpulseConstraintWithError">
      <summary>
            Implemented by solver updateables which have a three dimensional impulse.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.I3DImpulseConstraintWithError.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint">
      <summary>
            Connects two entities with a spherical joint.  Acts like an unrestricted shoulder joint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.#ctor">
      <summary>
            Constructs a spherical joint.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the offsets (OffsetA, OffsetB or LocalOffsetA, LocalOffsetB).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a spherical joint.
            </summary>
      <param name="connectionA">First connected entity.</param>
      <param name="connectionB">Second connected entity.</param>
      <param name="anchorLocation">Location of the socket.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
      <param name="jacobianZ">Third linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
      <param name="jacobianZ">Third linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
      <param name="jacobianZ">Third angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
      <param name="jacobianZ">Third angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.Update(System.Single)">
      <summary>
            Calculates necessary information for velocity solving.
            Called by preStep(float dt)
            </summary>
      <param name="dt">Time in seconds since the last update.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.SolveIteration">
      <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.LocalOffsetA">
      <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in its local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.LocalOffsetB">
      <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in its local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.OffsetA">
      <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.OffsetB">
      <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.BallSocketJoint.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SingleEntity.SingleEntityConstraint">
      <summary>
            Abstract superclass of constraints which control a single entity.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.SingleEntity.SingleEntityConstraint.iterationsAtZeroImpulse">
      <summary>
            Number of frames so far at effectively zero corrective impulse.
            Set to zero during every preStep(float dt) call and incremented by checkForEarlyOutIterations(Vector3 impulse).
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.SingleEntity.SingleEntityConstraint.entity">
      <summary>
            Entity affected by the constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityConstraint.CollectInvolvedEntities(BEPUphysics.DataStructures.RawList{BEPUphysics.Entities.Entity})">
      <summary>
            Adds entities associated with the solver item to the involved entities list.
            Ensure that sortInvolvedEntities() is called at the end of the function.
            This allows the non-batched multithreading system to lock properly.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityConstraint.Entity">
      <summary>
            Gets or sets the entity affected by the constraint.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape">
      <summary>
             Convex shape with width, length, and height.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.#ctor(System.Single,System.Single,System.Single)">
      <summary>
             Constructs a new box shape.
            </summary>
      <param name="width">Width of the box.</param>
      <param name="height">Height of the box.</param>
      <param name="length">Length of the box.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
      <param name="shapeTransform">Transform to use.</param>
      <param name="boundingBox">Bounding box of the transformed shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.GetLocalExtremePointWithoutMargin(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.ComputeMinimumRadius">
      <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
      <returns>Minimum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.ComputeMaximumRadius">
      <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
      <returns>Maximum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.ComputeVolumeDistribution(System.Single@)">
      <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.RayTest(Microsoft.Xna.Framework.Ray@,BEPUphysics.MathExtensions.RigidTransform@,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Gets the intersection between the box and the ray.
            </summary>
      <param name="ray">Ray to test against the box.</param>
      <param name="transform">Transform of the shape.</param>
      <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
      <param name="hit">Hit data for the raycast, if any.</param>
      <returns>Whether or not the ray hit the target.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.ComputeCenter">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.ComputeCenter(System.Single@)">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.ComputeVolume">
      <summary>
            Computes the volume of the shape.
            </summary>
      <returns>Volume of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.GetCollidableInstance">
      <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
      <returns>EntityCollidable that uses this shape.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.HalfWidth">
      <summary>
            Width of the box divided by two.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.HalfHeight">
      <summary>
            Height of the box divided by two.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.HalfLength">
      <summary>
            Length of the box divided by two.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.Width">
      <summary>
            Width of the box.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.Height">
      <summary>
            Height of the box.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.BoxShape.Length">
      <summary>
            Length of the box.
            </summary>
    </member>
    <member name="T:BEPUphysics.BroadPhaseSystems.IBoundingBoxOwner">
      <summary>
             Requires that a class have a BoundingBox.
            </summary>
    </member>
    <member name="P:BEPUphysics.BroadPhaseSystems.IBoundingBoxOwner.BoundingBox">
      <summary>
             Gets the bounding box of the object.
            </summary>
    </member>
    <member name="T:BEPUphysics.BroadPhaseSystems.BroadPhaseEntry">
      <summary>
            Superclass of all objects which live inside the broad phase.
            The BroadPhase will generate pairs between BroadPhaseEntries.
            </summary>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseEntry.GetHashCode">
      <summary>
            Gets the object's hash code.
            </summary>
      <returns>Hash code for the object.</returns>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseEntry.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Tests a ray against the entry.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
      <param name="rayHit">Hit location of the ray on the entry, if any.</param>
      <returns>Whether or not the ray hit the entry.</returns>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseEntry.RayCast(Microsoft.Xna.Framework.Ray,System.Single,System.Func{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,System.Boolean},BEPUphysics.RayHit@)">
      <summary>
            Tests a ray against the entry.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
      <param name="filter">Test to apply to try on the entry.  If a collidable hierarchy is present
            in the entry, this filter will be passed into inner ray casts.</param>
      <param name="rayHit">Hit location of the ray on the entry, if any.</param>
      <returns>Whether or not the ray hit the entry.</returns>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseEntry.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.RayHit@)">
      <summary>
            Sweeps a convex shape against the entry.
            </summary>
      <param name="castShape">Swept shape.</param>
      <param name="startingTransform">Beginning location and orientation of the cast shape.</param>
      <param name="sweep">Sweep motion to apply to the cast shape.</param>
      <param name="hit">Hit data of the ray on the entry, if any.</param>
      <returns>Whether or not the ray hit the entry.</returns>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseEntry.UpdateBoundingBox">
      <summary>
            Updates the bounding box to the current state of the entry.
            </summary>
    </member>
    <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhaseEntry.BoundingBox">
      <summary>
            Gets or sets the bounding box of the entry.
            </summary>
    </member>
    <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhaseEntry.CollisionRules">
      <summary>
            Gets the entry's collision rules.
            </summary>
    </member>
    <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhaseEntry.Tag">
      <summary>
            Gets or sets the user data associated with this entry.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.Collidable">
      <summary>
             Superclass of objects living in the collision detection pipeline
             that can result in contacts.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.Collidable.Shape">
      <summary>
             Gets the shape used by the collidable.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.Collidable.IgnoreShapeChanges">
      <summary>
            Gets or sets whether or not to ignore shape changes.  When true, changing the collision shape will not force an update of maximum or minimum radii.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.Collidable.Pairs">
      <summary>
             Gets the list of pairs associated with the collidable.
             These pairs are found by the broad phase and are managed by the narrow phase;
             they can contain other collidables, entities, and contacts.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.Collidable.OverlappedCollidables">
      <summary>
             Gets a list of all other collidables that this collidable overlaps.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.MobileCollidables.MobileCollidable">
      <summary>
             Superclass of all collidables which are capable of movement, and thus need bounding box updates every frame.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.MobileCollidable.UpdateBoundingBox(System.Single)">
      <summary>
             Updates the bounding box of the mobile collidable.
            </summary>
      <param name="dt">Timestep with which to update the bounding box.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.MobileCollidables.EntityCollidable">
      <summary>
             Mobile collidable acting as a collision proxy for an entity.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.UpdateBoundingBox">
      <summary>
            Updates the bounding box to the current state of the entry.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.UpdateBoundingBox(System.Single)">
      <summary>
             Updates the bounding box of the mobile collidable.
            </summary>
      <param name="dt">Timestep with which to update the bounding box.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.UpdateWorldTransform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
             Updates the world transform of the collidable.
            </summary>
      <param name="position">Position to use for the calculation.</param>
      <param name="orientation">Orientation to use for the calculation.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.UpdateBoundingBoxForTransform(BEPUphysics.MathExtensions.RigidTransform@,System.Single)">
      <summary>
            Updates the collidable's world transform and bounding box.
            This is a convenience method for external modification of the collidable's data.
            </summary>
      <param name="transform">Transform to use for the collidable.</param>
      <param name="dt">Duration of the simulation time step.  Used to expand the
            bounding box using the owning entity's velocity.  If the collidable
            does not have an owning entity, this must be zero.</param>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.Shape">
      <summary>
            Gets the shape of the collidable.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.Entity">
      <summary>
             Gets the entity owning the collidable.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.WorldTransform">
      <summary>
             Gets the world transform of the collidable.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.LocalPosition">
      <summary>
             Gets or sets the local position of the collidable.
             The local position can be used to offset the collision geometry
             from an entity's center of mass.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.Events">
      <summary>
             Gets or sets the event manager of the collidable.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.EntityCollidable.OverlappedEntities">
      <summary>
             Gets an enumerable collection of all entities overlapping this collidable.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.MobileCollidables.ConvexCollidable">
      <summary>
             Collidable with a convex shape.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.ConvexCollidable.Shape">
      <summary>
             Gets the shape of the collidable.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.MobileCollidables.ConvexCollidable`1">
      <summary>
             Collidable with a convex shape of a particular type.
            </summary>
      <typeparam name="T">ConvexShape type.</typeparam>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.ConvexCollidable`1.#ctor(`0)">
      <summary>
             Constructs a new convex collidable.
            </summary>
      <param name="shape">Shape to use in the collidable.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.ConvexCollidable`1.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Tests a ray against the entry.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
      <param name="rayHit">Hit location of the ray on the entry, if any.</param>
      <returns>Whether or not the ray hit the entry.</returns>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.ConvexCollidable`1.Shape">
      <summary>
             Gets the shape of the collidable.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.MobileCollidables.TriangleCollidable">
      <summary>
             Special case collidable for reuseable triangles.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.TriangleCollidable.#ctor">
      <summary>
             Constructs a new shapeless collidable.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.TriangleCollidable.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape)">
      <summary>
             Constructs the triangle collidable using the given shape.
            </summary>
      <param name="shape">TriangleShape to use in the collidable.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.TriangleCollidable.Initialize(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Initializes the collidable using the new triangle shape, but does NOT
             fire any shape-changed events.
            </summary>
      <param name="a">First vertex in the triangle.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.TriangleCollidable.CleanUp">
      <summary>
             Cleans up the collidable by removing all events and setting the shape to null.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.StaticMeshContactManifold">
      <summary>
             Manages persistent contacts between a static mesh and a convex.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.StaticMeshContactManifold.CleanUp">
      <summary>
             Cleans up the manifold.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.StaticMeshContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
      <summary>
             Initializes the manifold.
            </summary>
      <param name="newCollidableA">First collidable.</param>
      <param name="newCollidableB">Second collidable.</param>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.StaticMeshContactManifold.Mesh">
      <summary>
             Gets the static mesh associated with this pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.ResourceManagement.Resources">
      <summary>
            Handles allocation and management of commonly used resources.
            </summary>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetRayCastResultList">
      <summary>
            Retrieves a ray cast result list from the resource pool.
            </summary>
      <returns>Empty ray cast result list.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{BEPUphysics.RayCastResult})">
      <summary>
            Returns a resource to the pool.
            </summary>
      <param name="list">List to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetRayHitList">
      <summary>
            Retrieves a ray hit list from the resource pool.
            </summary>
      <returns>Empty ray hit list.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{BEPUphysics.RayHit})">
      <summary>
            Returns a resource to the pool.
            </summary>
      <param name="list">List to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetCollisionEntryList">
      <summary>
            Retrieves an CollisionEntry list from the resource pool.
            </summary>
      <returns>Empty CollisionEntry list.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry})">
      <summary>
            Returns a resource to the pool.
            </summary>
      <param name="list">List to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetCompoundChildList">
      <summary>
            Retrieves an CompoundChild list from the resource pool.
            </summary>
      <returns>Empty information list.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{BEPUphysics.Collidables.MobileCollidables.CompoundChild})">
      <summary>
            Returns a resource to the pool.
            </summary>
      <param name="list">List to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetIntList">
      <summary>
            Retrieves a int list from the resource pool.
            </summary>
      <returns>Empty int list.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{System.Int32})">
      <summary>
            Returns a resource to the pool.
            </summary>
      <param name="list">List to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetFloatList">
      <summary>
            Retrieves a float list from the resource pool.
            </summary>
      <returns>Empty float list.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{System.Single})">
      <summary>
            Returns a resource to the pool.
            </summary>
      <param name="list">List to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetVectorList">
      <summary>
            Retrieves a Vector3 list from the resource pool.
            </summary>
      <returns>Empty Vector3 list.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{Microsoft.Xna.Framework.Vector3})">
      <summary>
            Returns a resource to the pool.
            </summary>
      <param name="list">List to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetEntityRawList">
      <summary>
            Retrieves an Entity RawList from the resource pool.
            </summary>
      <returns>Empty Entity raw list.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{BEPUphysics.Entities.Entity})">
      <summary>
            Returns a resource to the pool.
            </summary>
      <param name="list">List to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetTriangle(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Retrieves a Triangle shape from the resource pool.
            </summary>
      <param name="v1">Position of the first vertex.</param>
      <param name="v2">Position of the second vertex.</param>
      <param name="v3">Position of the third vertex.</param>
      <returns>Initialized TriangleShape.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetTriangle">
      <summary>
            Retrieves a Triangle shape from the resource pool.
            </summary>
      <returns>Initialized TriangleShape.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape)">
      <summary>
            Returns a resource to the pool.
            </summary>
      <param name="triangle">Triangle to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetTriangleCollidable(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Retrieves a TriangleCollidable from the resource pool.
            </summary>
      <param name="a">First vertex in the triangle.</param>
      <param name="b">Second vertex in the triangle.</param>
      <param name="c">Third vertex in the triangle.</param>
      <returns>Initialized TriangleCollidable.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetTriangleCollidable">
      <summary>
            Retrieves a TriangleCollidable from the resource pool.
            </summary>
      <returns>Initialized TriangleCollidable.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.Collidables.MobileCollidables.TriangleCollidable)">
      <summary>
            Returns a resource to the pool.
            </summary>
      <param name="triangle">Triangle collidable to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetTriangleIndicesList">
      <summary>
            Retrieves a TriangleIndices list from the resource pool.
            </summary>
      <returns>TriangleIndices list.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DataStructures.RawList{BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices})">
      <summary>
            Returns a resource to the pool.
            </summary>
      <param name="triangleIndices">TriangleIndices list to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GetSimulationIslandConnection">
      <summary>
            Retrieves a simulation island connection from the resource pool.
            </summary>
      <returns>Uninitialized simulation island connection.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.Resources.GiveBack(BEPUphysics.DeactivationManagement.SimulationIslandConnection)">
      <summary>
            Returns a resource to the pool.
            </summary>
      <param name="connection">Connection to return.</param>
    </member>
    <member name="T:BEPUphysics.Paths.ConstantSpeedCurve`1">
      <summary>
            Superclass of speed-controlled curves that have a constant speed.
            </summary>
      <typeparam name="TValue">Type of the values in the curve.</typeparam>
    </member>
    <member name="M:BEPUphysics.Paths.ConstantSpeedCurve`1.#ctor(System.Single,BEPUphysics.Paths.Curve{`0})">
      <summary>
            Constructs a new constant speed curve.
            </summary>
      <param name="speed">Speed to maintain while traveling around a curve.</param>
      <param name="curve">Curve to wrap.</param>
    </member>
    <member name="M:BEPUphysics.Paths.ConstantSpeedCurve`1.#ctor(System.Single,BEPUphysics.Paths.Curve{`0},System.Int32)">
      <summary>
            Constructs a new constant speed curve.
            </summary>
      <param name="speed">Speed to maintain while traveling around a curve.</param>
      <param name="curve">Curve to wrap.</param>
      <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
    </member>
    <member name="M:BEPUphysics.Paths.ConstantSpeedCurve`1.GetSpeedAtCurveTime(System.Single)">
      <summary>
            Gets the desired speed at a given time.
            </summary>
      <param name="time">Time to check for speed.</param>
      <returns>Speed at the given time.</returns>
    </member>
    <member name="P:BEPUphysics.Paths.ConstantSpeedCurve`1.Speed">
      <summary>
            Gets or sets the speed of the curve.
            </summary>
    </member>
    <member name="T:BEPUphysics.Paths.ConstantLinearSpeedCurve">
      <summary>
            Wrapper around a 3d position curve that specifies a specific velocity at which to travel.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.ConstantLinearSpeedCurve.#ctor(System.Single,BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Vector3})">
      <summary>
            Constructs a new constant speed curve.
            </summary>
      <param name="speed">Speed to maintain while traveling around a curve.</param>
      <param name="curve">Curve to wrap.</param>
    </member>
    <member name="M:BEPUphysics.Paths.ConstantLinearSpeedCurve.#ctor(System.Single,BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Vector3},System.Int32)">
      <summary>
            Constructs a new constant speed curve.
            </summary>
      <param name="speed">Speed to maintain while traveling around a curve.</param>
      <param name="curve">Curve to wrap.</param>
      <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
    </member>
    <member name="T:BEPUphysics.EntityStateManagement.InterpolatedStatesManager">
      <summary>
             Manages the interpolated states of entities.  Interpolated states are those
             based on the previous entity states and the current entity states, blended together
             using the time remainder from internal time stepping.
            </summary>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.#ctor(BEPUphysics.EntityStateManagement.BufferedStatesManager)">
      <summary>
             Constructs a new interpolated states manager.
            </summary>
      <param name="manager">Owning buffered states manager.</param>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.#ctor(BEPUphysics.EntityStateManagement.BufferedStatesManager,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs a new interpolated states manager.
            </summary>
      <param name="manager">Owning buffered states manager.</param>
      <param name="threadManager">Thread manager to use.</param>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.FlipBuffers">
      <summary>
             Acquires a lock on the FlipLocker and flips the internal buffers.
            </summary>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.GetState(System.Int32)">
      <summary>
             Returns an interpolated state associated with an entity with the given index.
             Does not lock the FlipLocker.
            </summary>
      <param name="motionStateIndex">Motion state of the entity.</param>
      <returns>Interpolated state associated with the entity at the given index.</returns>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.GetStates(BEPUphysics.MathExtensions.RigidTransform[])">
      <summary>
             Gets the interpolated states of all entities.
            </summary>
      <param name="states">Interpolated states of all entities.</param>
      <exception cref="T:System.InvalidOperationException">Thrown when the array is too small to hold the states.</exception>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.Enabled">
      <summary>
             Gets or sets whether or not the manager is updating.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown when enabling the interpolated manager without having the read buffers active.</exception>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.FlipLocker">
      <summary>
             Gets the synchronization object locked prior to flipping the internal buffers.
             Acquiring a lock on this object will prevent the internal buffers from flipping for the duration
             of the lock.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesManager.BlendAmount">
      <summary>
             Gets or sets the blending amount to use.
             This is set automatically when the space is using internal timestepping
             (I.E. when Space.Update(dt) is called).  It is a value from 0 to 1
             that defines the amount of the previous and current frames to include
             in the blended state.  A value of 1 means use only the current frame;
             a value of 0 means use only the previous frame.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.ForceFields.ForceField">
      <summary>
            Superclass of objects which apply forces to entities in some field.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceField.#ctor(BEPUphysics.UpdateableSystems.ForceFields.ForceFieldShape,BEPUphysics.BroadPhaseSystems.IQueryAccelerator)">
      <summary>
            Constructs a force field.
            </summary>
      <param name="shape">Shape to use for the force field.</param>
      <param name="queryAccelerator">Query accelerator used to find entities.</param>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceField.PreUpdate">
      <summary>
            Performs any custom logic desired prior to the force application.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceField.CalculateImpulse(BEPUphysics.Entities.Entity,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Calculates the impulse to apply to the entity.
            </summary>
      <param name="e">Affected entity.</param>
      <param name="dt">Duration between simulation updates.</param>
      <param name="impulse">Impulse to apply to the entity.</param>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.ForceFields.ForceField.AllowMultithreading">
      <summary>
             Gets or sets whether or not threading is allowed.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.ForceFields.ForceField.QueryAccelerator">
      <summary>
             Gets or sets the query accelerator used by the force field to find entities.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.ForceFields.ForceField.ThreadManager">
      <summary>
             Gets or sets the thread manager used by the force field.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.ForceFields.ForceField.ForceWakeUp">
      <summary>
            Gets or sets whether the the force field will force affected entities to wake up.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.ForceFields.ForceField.Shape">
      <summary>
            Gets or sets the shape of the force field used to determine which entities to apply forces to.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry">
      <summary>
            Contains a triangle collidable and its index.  Used by mobile mesh-mesh collisions.
            </summary>
    </member>
    <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry.Index">
      <summary>
            Index of the triangle that was the source of this entry.
            </summary>
    </member>
    <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry.Collidable">
      <summary>
            Collidable for the triangle.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry.GetHashCode">
      <summary>
            Gets the hash code of the object.
            </summary>
      <returns>Hash code of the object.</returns>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry.Equals(BEPUphysics.NarrowPhaseSystems.Pairs.TriangleEntry)">
      <summary>
            Determines if two colliders refer to the same triangle.
            </summary>
      <param name="other">Object to compare.</param>
      <returns>Whether or not the objects are equal.</returns>
    </member>
    <member name="T:BEPUphysics.Entities.Prefabs.ConvexHull">
      <summary>
            Shape that can collide and move based on the convex 'outer layer' of a list of points.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.ConvexHull.#ctor(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
      <summary>
            Constructs a nondynamic convex hull of points.
            </summary>
      <param name="points">List of points in the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.ConvexHull.#ctor(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Single)">
      <summary>
            Constructs a physically simulated convex hull of points.
            </summary>
      <param name="points">List of points in the object.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.ConvexHull.#ctor(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Single)">
      <summary>
            Constructs a physically simulated convex hull of points.
            </summary>
      <param name="position">Position to place the convex hull.</param>
      <param name="points">List of points in the object.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.ConvexHull.#ctor(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
      <summary>
            Constructs a nondynamic convex hull of points.
            </summary>
      <param name="position">Position to place the convex hull.</param>
      <param name="points">List of points in the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.ConvexHull.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Single)">
      <summary>
            Constructs a physically simulated convex hull of points.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="points">List of points in the object.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.ConvexHull.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
      <summary>
            Constructs a nondynamic convex hull of points.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="points">List of points in the object.</param>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.ConvexHull.Vertices">
      <summary>
            List of the points composing the surface of the convex hull in local space.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.Prefabs.Capsule">
      <summary>
            Pill-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Capsule.GetCapsuleInformation(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,System.Single@)">
      <summary>
             Computes an orientation and length from a line segment.
            </summary>
      <param name="start">Starting point of the line segment.</param>
      <param name="end">Endpoint of the line segment.</param>
      <param name="orientation">Orientation of a line that fits the line segment.</param>
      <param name="length">Length of the line segment.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Capsule.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
             Constructs a new kinematic capsule.
            </summary>
      <param name="start">Line segment start point.</param>
      <param name="end">Line segment end point.</param>
      <param name="radius">Radius of the capsule to expand the line segment by.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Capsule.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>
             Constructs a new dynamic capsule.
            </summary>
      <param name="start">Line segment start point.</param>
      <param name="end">Line segment end point.</param>
      <param name="radius">Radius of the capsule to expand the line segment by.</param>
      <param name="mass">Mass of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Capsule.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a physically simulated capsule.
            </summary>
      <param name="position">Position of the capsule.</param>
      <param name="length">Length of the capsule.</param>
      <param name="radius">Radius of the capsule.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Capsule.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>
            Constructs a nondynamic capsule.
            </summary>
      <param name="position">Position of the capsule.</param>
      <param name="length">Length of the capsule.</param>
      <param name="radius">Radius of the capsule.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Capsule.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a dynamic capsule.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="length">Length of the capsule.</param>
      <param name="radius">Radius of the capsule.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Capsule.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single)">
      <summary>
            Constructs a nondynamic capsule.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="length">Length of the capsule.</param>
      <param name="radius">Radius of the capsule.</param>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Capsule.Length">
      <summary>
            Gets or sets the length of the capsule.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Capsule.Radius">
      <summary>
            Gets or sets the radius of the capsule.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint">
      <summary>
            Prevents the connected entities from twisting relative to each other.
            Acts like the angular part of a universal joint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.#ctor">
      <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the WorldAxisA and WorldAxisB (or their entity-local versions).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other.
            </summary>
      <param name="connectionA">First connection of the pair.</param>
      <param name="connectionB">Second connection of the pair.</param>
      <param name="axisA">Twist axis attached to the first connected entity.</param>
      <param name="axisB">Twist axis attached to the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.SolveIteration">
      <summary>
            Solves for velocity.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.Update(System.Single)">
      <summary>
            Do any necessary computations to prepare the constraint for this frame.
            </summary>
      <param name="dt">Simulation step length.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.LocalAxisA">
      <summary>
            Gets or sets the axis attached to the first connected entity in its local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.LocalAxisB">
      <summary>
            Gets or sets the axis attached to the first connected entity in its local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.WorldAxisA">
      <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.WorldAxisB">
      <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.TwistJoint.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint">
      <summary>
            Constraint which tries to maintain the distance between points on two entities.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.distance">
      <summary>
            Distance maintained between the anchors.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.#ctor">
      <summary>
            Constructs a distance joint.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the anchors (WorldAnchorA, WorldAnchorB or LocalAnchorA, LocalAnchorB)
            and the desired Distance.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a distance joint.
            </summary>
      <param name="connectionA">First body connected to the distance joint.</param>
      <param name="connectionB">Second body connected to the distance joint.</param>
      <param name="anchorA">Connection to the distance joint from the first connected body in world space.</param>
      <param name="anchorB"> Connection to the distance joint from the second connected body in world space.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.SolveIteration">
      <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.Update(System.Single)">
      <summary>
            Calculates necessary information for velocity solving.
            </summary>
      <param name="dt">Time in seconds since the last update.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.Distance">
      <summary>
            Gets or sets the distance maintained between the anchors.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.LocalAnchorA">
      <summary>
            Gets or sets the first entity's connection point in local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.LocalAnchorB">
      <summary>
            Gets or sets the first entity's connection point in local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.WorldAnchorA">
      <summary>
            Gets or sets the connection to the distance constraint from the first connected body in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.WorldAnchorB">
      <summary>
            Gets or sets the connection to the distance constraint from the second connected body in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.DistanceJoint.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit">
      <summary>
            Superclass of constraints which have a limited area of free movement.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.bounceVelocityThreshold">
      <summary>
            Minimum velocity necessary for a bounce to occur at a joint limit.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.bounciness">
      <summary>
            Bounciness of this joint limit.  0 is completely inelastic; 1 is completely elastic.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.margin">
      <summary>
            Small area that the constraint can be violated without applying position correction.  Helps avoid jitter.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.BounceVelocityThreshold">
      <summary>
            Gets or sets the minimum velocity necessary for a bounce to occur at a joint limit.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.Bounciness">
      <summary>
            Gets or sets the bounciness of this joint limit.  0 is completely inelastic; 1 is completely elastic.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.IsLimitActive">
      <summary>
            Gets whether or not the limit is currently working.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.JointLimit.Margin">
      <summary>
            Gets or sets the small area that the constraint can be violated without applying position correction.  Helps avoid jitter.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit">
      <summary>
            Constraint which prevents the connected entities from rotating relative to each other around an axis beyond given limits.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.maximumAngle">
      <summary>
            Naximum angle that entities can twist.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.minimumAngle">
      <summary>
            Minimum angle that entities can twist.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.#ctor">
      <summary>
            Constructs a new constraint which prevents the connected entities from rotating relative to each other around an axis beyond given limits.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the TestAxis (or its entity-local version) and the Basis.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>
            Constructs a new constraint which prevents the connected entities from rotating relative to each other around an axis beyond given limits.
            </summary>
      <param name="connectionA">First connection of the pair.</param>
      <param name="connectionB">Second connection of the pair.</param>
      <param name="limitedAxis">Axis of rotation to be limited.</param>
      <param name="testAxis">Axis attached to connectionB that is tested to determine the current angle.
            Will also be used as the base rotation axis representing 0 degrees.</param>
      <param name="minimumAngle">Minimum twist angle allowed.</param>
      <param name="maximumAngle">Maximum twist angle allowed.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
      <summary>
            Constructs a new constraint which prevents the connected entities from rotating relative to each other around an axis beyond given limits.
            Using this constructor will leave the limit uninitialized.  Before using the limit in a simulation, be sure to set the basis axes using
            Basis.SetLocalAxes or Basis.SetWorldAxes and the test axis using the LocalTestAxis or TestAxis properties.
            </summary>
      <param name="connectionA">First connection of the pair.</param>
      <param name="connectionB">Second connection of the pair.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.GetMassMatrix(BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Gets the mass matrix of the revolute limit.
            The revolute limit is special; in terms of solving, it is
            actually sometimes TWO constraints; a minimum plane, and a
            maximum plane.  The M11 field represents the minimum plane mass matrix
            and the M22 field represents the maximum plane mass matrix.
            </summary>
      <param name="massMatrix">Mass matrix of the constraint.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.Basis">
      <summary>
            Gets the basis attached to entity A.
            The primary axis represents the limited axis of rotation.
            The x axis defines the 'base' direction corresponding to 0 degrees of relative rotation.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.LocalTestAxis">
      <summary>
            Gets or sets the axis attached to entity B in its local space that will be tested against the limits.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.MaximumAngle">
      <summary>
            Gets or sets the maximum angle that entities can twist.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.MinimumAngle">
      <summary>
            Gets or sets the minimum angle that entities can twist.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.TestAxis">
      <summary>
            Gets or sets the axis attached to entity B in world space that will be tested against the limits.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            The revolute limit is special; internally, it is sometimes two constraints.
            The X value of the vector is the "minimum" plane of the limit, and the Y value is the "maximum" plane.
            If a plane isn't active, its error is zero.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            The x component corresponds to the minimum plane limit,
            while the y component corresponds to the maximum plane limit.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.RevoluteLimit.Error">
      <summary>
            Gets the current constraint error.
            The x component corresponds to the minimum plane limit,
            while the y component corresponds to the maximum plane limit.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SolverGroups.PrismaticJoint">
      <summary>
            Restricts two degrees of linear freedom and all three degrees of angular freedom.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.PrismaticJoint.#ctor">
      <summary>
            Constructs a new constraint which restricts two degrees of linear freedom and all three degrees of angular freedom.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.PrismaticJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new constraint which restricts two degrees of linear freedom and all three degrees of angular freedom.
            </summary>
      <param name="connectionA">First entity of the constraint pair.</param>
      <param name="connectionB">Second entity of the constraint pair.</param>
      <param name="lineAnchor">Location of the anchor for the line to be attached to connectionA in world space.</param>
      <param name="lineDirection">Axis in world space to be attached to connectionA along which connectionB can move.</param>
      <param name="pointAnchor">Location of the anchor for the point to be attached to connectionB in world space.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.PrismaticJoint.AngularJoint">
      <summary>
            Gets the angular joint which removes three degrees of freedom.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.PrismaticJoint.Limit">
      <summary>
            Gets the distance limits for the slider.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.PrismaticJoint.Motor">
      <summary>
            Gets the slider motor.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.PrismaticJoint.PointOnLineJoint">
      <summary>
            Gets the line joint that restricts two linear degrees of freedom.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup">
      <summary>
             Constraint group containing multiple contact manifold constraints.
             Used by some pairs which manage multiple sub-pairs.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup.Add(BEPUphysics.Constraints.EntitySolverUpdateable)">
      <summary>
             Adds a constraint to the group.
            </summary>
      <param name="manifoldConstraint">Constraint to add.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup.Remove(BEPUphysics.Constraints.EntitySolverUpdateable)">
      <summary>
             Removes a constraint from the group.
            </summary>
      <param name="manifoldConstraint">Constraint to remove.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup.Initialize(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
      <summary>
             Initializes the constraint group.
            </summary>
      <param name="a">First entity of the pair.</param>
      <param name="b">Second entity of the pair.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup.CleanUp">
      <summary>
             Cleans up the constraint group.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup.EntityA">
      <summary>
             Gets the first entity in the pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactManifoldConstraintGroup.EntityB">
      <summary>
             Gets the second entity in the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.TerrainContactManifold">
      <summary>
             Manages persistent contacts between a Terrain and a convex.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.TerrainContactManifold.CleanUp">
      <summary>
             Cleans up the manifold.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.TerrainContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
      <summary>
             Initializes the manifold.
            </summary>
      <param name="newCollidableA">First collidable.</param>
      <param name="newCollidableB">Second collidable.</param>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.TerrainContactManifold.Terrain">
      <summary>
             Gets the terrain associated with this pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.InstancedMeshShape">
      <summary>
             Local space data associated with an instanced mesh.
             This contains a hierarchy and all the other heavy data needed
             by an InstancedMesh.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.InstancedMeshShape.#ctor(Microsoft.Xna.Framework.Vector3[],System.Int32[])">
      <summary>
             Constructs a new instanced mesh shape.
            </summary>
      <param name="vertices">Vertices of the mesh.</param>
      <param name="indices">Indices of the mesh.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.InstancedMeshShape.ComputeBoundingBox(BEPUphysics.MathExtensions.AffineTransform@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
             Computes the bounding box of the transformed mesh shape.
            </summary>
      <param name="transform">Transform to apply to the shape during the bounding box calculation.</param>
      <param name="boundingBox">Bounding box containing the transformed mesh shape.</param>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.InstancedMeshShape.TriangleMesh">
      <summary>
             Gets or sets the TriangleMesh data structure used by this shape.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.EntityCollidableCollection">
      <summary>
             Enumerable collection of entities associated with a collidable.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.EntityCollidableCollection.Enumerator">
      <summary>
             Enumerator for the EntityCollidableCollection.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.EntityCollidableCollection.Enumerator.#ctor(BEPUphysics.Collidables.EntityCollidableCollection)">
      <summary>
             Constructs a new enumerator.
            </summary>
      <param name="collection">Owning collection.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.EntityCollidableCollection.Enumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.Collidables.EntityCollidableCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.Collidables.EntityCollidableCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:BEPUphysics.Collidables.EntityCollidableCollection.Enumerator.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
    </member>
    <member name="M:BEPUphysics.Collidables.EntityCollidableCollection.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable)">
      <summary>
             Constructs a new EntityCollidableCollection.
            </summary>
      <param name="owner">Owner of the collection.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.EntityCollidableCollection.GetEnumerator">
      <summary>
             Gets an enumerator over the entities in the collection.
            </summary>
      <returns>Enumerator over the entities in the collection.</returns>
    </member>
    <member name="T:BEPUphysics.Collidables.CollidableCollection">
      <summary>
             List of collidable objects overlapping another collidable.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.CollidableCollection.Enumerator">
      <summary>
             Enumerator for the CollidableCollection.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.CollidableCollection.Enumerator.#ctor(BEPUphysics.Collidables.CollidableCollection)">
      <summary>
             Constructs an enumerator.
            </summary>
      <param name="collection">Collection to which the enumerator belongs.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.CollidableCollection.Enumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.Collidables.CollidableCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.Collidables.CollidableCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:BEPUphysics.Collidables.CollidableCollection.Enumerator.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
    </member>
    <member name="M:BEPUphysics.Collidables.CollidableCollection.#ctor(BEPUphysics.Collidables.Collidable)">
      <summary>
             Constructs a new CollidableCollection.
            </summary>
      <param name="owner">The collidable to which the collection belongs.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.CollidableCollection.GetEnumerator">
      <summary>
             Gets an enumerator which can be used to enumerate over the list.
            </summary>
      <returns>Enumerator for the collection.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.CollidableCollection.IndexOf(BEPUphysics.Collidables.Collidable)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.CollidableCollection.Contains(BEPUphysics.Collidables.Collidable)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.CollidableCollection.CopyTo(BEPUphysics.Collidables.Collidable[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:BEPUphysics.Collidables.CollidableCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <returns>
            The element at the specified index.
            </returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="P:BEPUphysics.Collidables.CollidableCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="T:BEPUphysics.DataStructures.TreeOverlapPair`2">
      <summary>
             Result of an overlap test between two trees of specified type.
            </summary>
      <typeparam name="T1">Type of elements in the first tree.</typeparam>
      <typeparam name="T2">Type of elements in the second tree.</typeparam>
    </member>
    <member name="F:BEPUphysics.DataStructures.TreeOverlapPair`2.OverlapA">
      <summary>
            Overlap owned by the first tree.
            </summary>
    </member>
    <member name="F:BEPUphysics.DataStructures.TreeOverlapPair`2.OverlapB">
      <summary>
            Overlap owned by the second tree.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.TreeOverlapPair`2.#ctor(`0,`1)">
      <summary>
            Constructs a new overlap pair.
            </summary>
      <param name="overlapA">Overlap owned by the first tree.</param>
      <param name="overlapB">Overlap owned by the second tree.</param>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.StaticMeshConvexContactManifold">
      <summary>
             Manages persistent contacts between a static mesh and a convex.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester">
      <summary>
             Persistent tester that compares triangles against convex objects.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester.Updated">
      <summary>
             Whether or not the pair tester was updated during the last attempt.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester.GenerateContactCandidate(BEPUphysics.DataStructures.TinyStructList{BEPUphysics.CollisionTests.ContactData}@)">
      <summary>
             Generates a contact between the triangle and convex.
            </summary>
      <param name="contactList">Contact between the shapes, if any.</param>
      <returns>Whether or not the shapes are colliding.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester.GetRegion(BEPUphysics.CollisionTests.ContactData@)">
      <summary>
            Gets the triangle region in which the contact resides.
            </summary>
      <param name="contact">Contact to check.</param>
      <returns>Region in which the contact resides.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester.Initialize(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape)">
      <summary>
             Initializes the pair tester.
            </summary>
      <param name="convex">Convex shape to use.</param>
      <param name="triangle">Triangle shape to use.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester.CleanUp">
      <summary>
            Cleans up the pair tester.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.TrianglePairTester.ShouldCorrectContactNormal">
      <summary>
            Whether or not the last found contact should have its normal corrected.
            </summary>
    </member>
    <member name="T:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap">
      <summary>
            A pair of overlapping BroadPhaseEntries.
            </summary>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.#ctor(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Constructs an overlap.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.#ctor(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.CollisionRuleManagement.CollisionRule)">
      <summary>
            Constructs an overlap.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
      <param name="collisionRule">Collision rule calculated for the pair.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.GetHashCode">
      <summary>
            Gets the hash code of the object.
            </summary>
      <returns>Hash code of the object.</returns>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.Equals(BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap)">
      <summary>
            Compares the overlaps for equality based on the involved entries.
            </summary>
      <param name="other">Overlap to compare.</param>
      <returns>Whether or not the overlaps were equal.</returns>
    </member>
    <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.EntryA">
      <summary>
            First entry in the pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.EntryB">
      <summary>
            Second entry in the pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap.CollisionRule">
      <summary>
            Gets the collision rule calculated for the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.BroadPhaseSystems.BroadPhase">
      <summary>
             Superclass of all broad phases.  Broad phases collect overlapping broad phase entry pairs.
            </summary>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhase.Add(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Adds an entry to the broad phase.
            </summary>
      <param name="entry">Entry to add.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhase.Remove(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Removes an entry from the broad phase.
            </summary>
      <param name="entry">Entry to remove.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.BroadPhase.TryToAddOverlap(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Adds a broad phase overlap if the collision rules permit it.
            </summary>
      <param name="entryA">First entry of the overlap.</param>
      <param name="entryB">Second entry of the overlap.</param>
    </member>
    <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhase.Locker">
      <summary>
             Gets the object which is locked by the broadphase during synchronized update processes.
            </summary>
    </member>
    <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhase.Overlaps">
      <summary>
            Gets the list of overlaps identified in the previous broad phase update.
            </summary>
    </member>
    <member name="P:BEPUphysics.BroadPhaseSystems.BroadPhase.QueryAccelerator">
      <summary>
             Gets an interface to the broad phase's support for volume-based queries.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.ISolverSettings">
      <summary>
            Implemented by classes which have solver settings.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.ISolverSettings.SolverSettings">
      <summary>
            Gets the solver settings for this constraint.
            </summary>
    </member>
    <member name="T:BEPUphysics.Vehicle.WheelSlidingFriction">
      <summary>
            Attempts to resist sliding motion of a vehicle.
            </summary>
    </member>
    <member name="F:BEPUphysics.Vehicle.WheelSlidingFriction.DefaultSlidingFrictionBlender">
      <summary>
            Default blender used by WheelSlidingFriction constraints.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.WheelSlidingFriction.BlendFriction(System.Single,System.Single,System.Object)">
      <summary>
            Computes the friction to use between the vehicle and support for a wheel.
            </summary>
      <param name="wheelFriction">Friction coefficient of the wheel.</param>
      <param name="supportFriction">Friction coefficient of the supporting entity.</param>
      <param name="extraInfo">Any extra information to be considered.</param>
      <returns>Blended friction coefficient.</returns>
    </member>
    <member name="M:BEPUphysics.Vehicle.WheelSlidingFriction.#ctor(System.Single,System.Single)">
      <summary>
            Constructs a new sliding friction object for a wheel.
            </summary>
      <param name="dynamicCoefficient">Coefficient of dynamic sliding friction to be blended with the supporting entity's friction.</param>
      <param name="staticCoefficient">Coefficient of static sliding friction to be blended with the supporting entity's friction.</param>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.BlendedCoefficient">
      <summary>
            Gets the coefficient of sliding friction between the wheel and support.
            This coefficient is the blended result of the supporting entity's friction and the wheel's friction.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.DynamicCoefficient">
      <summary>
            Gets or sets the coefficient of dynamic horizontal sliding friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.FrictionBlender">
      <summary>
            Gets or sets the function used to blend the supporting entity's friction and the wheel's friction.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.SlidingFrictionAxis">
      <summary>
            Gets the axis along which sliding friction is applied.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.StaticCoefficient">
      <summary>
            Gets or sets the coefficient of static horizontal sliding friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.StaticFrictionVelocityThreshold">
      <summary>
            Gets or sets the velocity under which the coefficient of static friction will be used instead of the dynamic one.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.TotalImpulse">
      <summary>
            Gets the force 
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.Wheel">
      <summary>
            Gets the wheel that this sliding friction applies to.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.SolverSettings">
      <summary>
            Gets the solver settings used by this wheel constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSlidingFriction.RelativeVelocity">
      <summary>
             Gets the relative velocity along the sliding direction at the wheel contact.
            </summary>
    </member>
    <member name="T:BEPUphysics.Threading.IThreadManager">
      <summary>
            Manages the engine's threads.
            </summary>
      <remarks>
            The thread manager is constructed with certain access assumptions in mind.
            When implementing custom thread managers, ensure that the requirements are met
            or exceeded with regard to concurrent access.
            </remarks>
    </member>
    <member name="M:BEPUphysics.Threading.IThreadManager.AddThread">
      <summary>
            Adds a new worker thread to the engine.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.IThreadManager.AddThread(System.Action{System.Object},System.Object)">
      <summary>
            Adds a new worker thread to the engine.
            </summary>
      <param name="initialization">Function that the new thread will call before entering its work loop.</param>
      <param name="initializationInformation">Data to give the initializer.</param>
    </member>
    <member name="M:BEPUphysics.Threading.IThreadManager.EnqueueTask(System.Action{System.Object},System.Object)">
      <summary>
            Enqueues a task to the thread manager.
            This should be safe to call from multiple threads and from other tasks.
            </summary>
      <param name="taskBody">Method to run.</param>
      <param name="taskInformation">Data to give to the task.</param>
    </member>
    <member name="M:BEPUphysics.Threading.IThreadManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
      <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
      <param name="startIndex">Inclusive starting index.</param>
      <param name="endIndex">Exclusive ending index.</param>
      <param name="loopBody">Function that handles an individual iteration of the loop.</param>
    </member>
    <member name="M:BEPUphysics.Threading.IThreadManager.RemoveThread">
      <summary>
            Removes a worker thread from the engine.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.IThreadManager.WaitForTaskCompletion">
      <summary>
            Waits until all tasks enqueued using enqueueTask are complete.
            </summary>
    </member>
    <member name="P:BEPUphysics.Threading.IThreadManager.ThreadCount">
      <summary>
            Gets the number of threads currently managed by the thread manager.
            </summary>
    </member>
    <member name="T:BEPUphysics.Threading.ThreadManagerTPL">
      <summary>
            Uses the .NET Task Parallel library to manage the engine's threads.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadManagerTPL.#ctor">
      <summary>
            Constructs the TPL thread manager.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadManagerTPL.AddThread">
      <summary>
            Notifies the thread manager that it should use another thread.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadManagerTPL.AddThread(System.Action{System.Object},System.Object)">
      <summary>
            Notifies the thread manager that it should use another thread.
            </summary>
      <param name="initialization">Function to use to initialize the thread.</param>
      <param name="initializationInformation">Information to provide to the initializer.</param>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadManagerTPL.RemoveThread">
      <summary>
            Notifies the thread manager that it should decrease the number of threads used.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadManagerTPL.EnqueueTask(System.Action{System.Object},System.Object)">
      <summary>
            Enqueues a task to the thread manager.
            This should be safe to call from multiple threads and from other tasks.
            </summary>
      <param name="taskBody">Method to run.</param>
      <param name="taskInformation">Data to give to the task.</param>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadManagerTPL.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
      <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
      <param name="startIndex">Inclusive starting index.</param>
      <param name="endIndex">Exclusive ending index.</param>
      <param name="loopBody">Function that handles an individual iteration of the loop.</param>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadManagerTPL.WaitForTaskCompletion">
      <summary>
            Waits until all tasks enqueued using enqueueTask are complete.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadManagerTPL.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:BEPUphysics.Threading.ThreadManagerTPL.TaskManager">
      <summary>
            Gets or sets the task manager used to supplement the TPL.
            </summary>
    </member>
    <member name="P:BEPUphysics.Threading.ThreadManagerTPL.ThreadCount">
      <summary>
            Gets the number of threads that the threadpool is targeting.
            </summary>
    </member>
    <member name="T:BEPUphysics.Threading.ParallelLoopManager">
      <summary>
            Manages parallel for loops.
            Cannot handle general task-based parallelism.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ParallelLoopManager.#ctor">
      <summary>
            Constructs a new parallel loop manager.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ParallelLoopManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
      <summary>
            Iterates over the interval.
            </summary>
      <param name="beginIndex">Starting index of the iteration.</param>
      <param name="endIndex">Ending index of the iteration.</param>
      <param name="loopBody">Function to call on each iteration.</param>
    </member>
    <member name="M:BEPUphysics.Threading.ParallelLoopManager.Dispose">
      <summary>
            Releases resources used by the object.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ParallelLoopManager.Finalize">
      <summary>
            Releases resources used by the object.
            </summary>
    </member>
    <member name="P:BEPUphysics.Threading.ParallelLoopManager.MinimumTasksPerThread">
      <summary>
            Gets or sets the minimum number of tasks to be allocated to each thread
            per loop.
            </summary>
    </member>
    <member name="P:BEPUphysics.Threading.ParallelLoopManager.MaximumIterationsPerTask">
      <summary>
            Gets or sets the maximum number of loop iterations
            per individual task.
            </summary>
    </member>
    <member name="T:BEPUphysics.ISpace">
      <summary>
             Defines the minimum interface required for a Space object which acts as the main simulation class.
            </summary>
    </member>
    <member name="M:BEPUphysics.ISpace.Add(BEPUphysics.ISpaceObject)">
      <summary>
             Adds a space object to the simulation.
            </summary>
      <param name="spaceObject">Space object to add.</param>
    </member>
    <member name="M:BEPUphysics.ISpace.Remove(BEPUphysics.ISpaceObject)">
      <summary>
             Removes a space object from the simulation.
            </summary>
      <param name="spaceObject">Space object to remove.</param>
    </member>
    <member name="M:BEPUphysics.ISpace.Update">
      <summary>
             Performs a single timestep.
            </summary>
    </member>
    <member name="M:BEPUphysics.ISpace.Update(System.Single)">
      <summary>
            Performs as many timesteps as necessary to get as close to the elapsed time as possible.
            </summary>
      <param name="dt">Elapsed time from the previous frame.</param>
    </member>
    <member name="M:BEPUphysics.ISpace.RayCast(Microsoft.Xna.Framework.Ray,BEPUphysics.RayCastResult@)">
      <summary>
            Tests a ray against the space.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="result">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.ISpace.RayCast(Microsoft.Xna.Framework.Ray,System.Func{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,System.Boolean},BEPUphysics.RayCastResult@)">
      <summary>
            Tests a ray against the space.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="filter">Delegate to prune out hit candidates before performing a ray cast against them.</param>
      <param name="result">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.ISpace.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayCastResult@)">
      <summary>
            Tests a ray against the space.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="result">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.ISpace.RayCast(Microsoft.Xna.Framework.Ray,System.Single,System.Func{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,System.Boolean},BEPUphysics.RayCastResult@)">
      <summary>
            Tests a ray against the space.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="filter">Delegate to prune out hit candidates before performing a ray cast against them.</param>
      <param name="result">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.ISpace.RayCast(Microsoft.Xna.Framework.Ray,System.Single,System.Collections.Generic.IList{BEPUphysics.RayCastResult})">
      <summary>
            Tests a ray against the space, possibly returning multiple hits.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="outputRayCastResults">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.ISpace.RayCast(Microsoft.Xna.Framework.Ray,System.Single,System.Func{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,System.Boolean},System.Collections.Generic.IList{BEPUphysics.RayCastResult})">
      <summary>
            Tests a ray against the space, possibly returning multiple hits.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="filter">Delegate to prune out hit candidates before performing a ray cast against them.</param>
      <param name="outputRayCastResults">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="P:BEPUphysics.ISpace.Entities">
      <summary>
             Gets the list of entities in the space.
            </summary>
    </member>
    <member name="T:BEPUphysics.Space">
      <summary>
             Main simulation class of BEPUphysics.  Contains various updating stages addition/removal methods for getting objects into the simulation.
            </summary>
    </member>
    <member name="M:BEPUphysics.Space.#ctor">
      <summary>
             Constructs a new space for things to live in.
            </summary>
    </member>
    <member name="M:BEPUphysics.Space.Add(BEPUphysics.ISpaceObject)">
      <summary>
             Adds a space object to the simulation.
            </summary>
      <param name="spaceObject">Space object to add.</param>
    </member>
    <member name="M:BEPUphysics.Space.Remove(BEPUphysics.ISpaceObject)">
      <summary>
             Removes a space object from the simulation.
            </summary>
      <param name="spaceObject">Space object to remove.</param>
    </member>
    <member name="M:BEPUphysics.Space.Update">
      <summary>
             Performs a single timestep.
            </summary>
    </member>
    <member name="M:BEPUphysics.Space.Update(System.Single)">
      <summary>
            Performs as many timesteps as necessary to get as close to the elapsed time as possible.
            </summary>
      <param name="dt">Elapsed time from the previous frame.</param>
    </member>
    <member name="M:BEPUphysics.Space.RayCast(Microsoft.Xna.Framework.Ray,BEPUphysics.RayCastResult@)">
      <summary>
            Tests a ray against the space.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="result">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.Space.RayCast(Microsoft.Xna.Framework.Ray,System.Func{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,System.Boolean},BEPUphysics.RayCastResult@)">
      <summary>
            Tests a ray against the space.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="filter">Delegate to prune out hit candidates before performing a ray cast against them.</param>
      <param name="result">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.Space.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayCastResult@)">
      <summary>
            Tests a ray against the space.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="result">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.Space.RayCast(Microsoft.Xna.Framework.Ray,System.Single,System.Func{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,System.Boolean},BEPUphysics.RayCastResult@)">
      <summary>
            Tests a ray against the space.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="filter">Delegate to prune out hit candidates before performing a ray cast against them.</param>
      <param name="result">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.Space.RayCast(Microsoft.Xna.Framework.Ray,System.Single,System.Collections.Generic.IList{BEPUphysics.RayCastResult})">
      <summary>
            Tests a ray against the space, possibly returning multiple hits.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="outputRayCastResults">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.Space.RayCast(Microsoft.Xna.Framework.Ray,System.Single,System.Func{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,System.Boolean},System.Collections.Generic.IList{BEPUphysics.RayCastResult})">
      <summary>
            Tests a ray against the space, possibly returning multiple hits.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="filter">Delegate to prune out hit candidates before performing a ray cast against them.</param>
      <param name="outputRayCastResults">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.Space.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:BEPUphysics.Space.TimeStepSettings">
      <summary>
             Gets or sets the time step settings used by the space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.ThreadManager">
      <summary>
             Gets or sets the thread manager used by the space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.SpaceObjectBuffer">
      <summary>
             Gets or sets the space object buffer used by the space.
             The space object buffer allows objects to be safely asynchronously
             added to and removed from the space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.EntityStateWriteBuffer">
      <summary>
             Gets or sets the entity state write buffer used by the space.
             The write buffer contains buffered writes to entity states that are
             flushed each frame when the buffer is updated.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.DeactivationManager">
      <summary>
             Gets or sets the deactivation manager used by the space.
             The deactivation manager controls the activity state objects, putting them
             to sleep and managing the connections between objects and simulation islands.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.ForceUpdater">
      <summary>
             Gets or sets the force updater used by the space.
             The force updater applies forces to all dynamic objects in the space each frame.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.BoundingBoxUpdater">
      <summary>
             Gets or sets the bounding box updater used by the space.
             The bounding box updater updates the bounding box of mobile collidables each frame.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.BroadPhase">
      <summary>
            Gets or sets the broad phase used by the space.
            The broad phase finds overlaps between broad phase entries and passes
            them off to the narrow phase for processing.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.NarrowPhase">
      <summary>
             Gets or sets the narrow phase used by the space.
             The narrow phase uses overlaps found by the broad phase
             to create pair handlers.  Those pair handlers can go on to 
             create things like contacts and constraints.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.Solver">
      <summary>
             Gets or sets the solver used by the space.
             The solver iteratively finds a solution to the constraints in the simulation.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.PositionUpdater">
      <summary>
             Gets or sets the position updater used by the space.
             The position updater moves everything around each frame.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.BufferedStates">
      <summary>
             Gets or sets the buffered states manager used by the space.
             The buffered states manager keeps track of read buffered entity states
             and also interpolated states based on the time remaining from internal
             time steps.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.DeferredEventDispatcher">
      <summary>
             Gets or sets the deferred event dispatcher used by the space.
             The event dispatcher gathers up deferred events created
             over the course of a timestep and dispatches them sequentially at the end.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.DuringForcesUpdateables">
      <summary>
             Gets or sets the updateable manager that handles updateables that update during force application.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.BeforeNarrowPhaseUpdateables">
      <summary>
             Gets or sets the updateable manager that handles updateables that update before the narrow phase.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.BeforeSolverUpdateables">
      <summary>
             Gets or sets the updateable manager that handles updateables that update before the solver
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.BeforePositionUpdateUpdateables">
      <summary>
             Gets or sets the updateable manager that handles updateables that update right before the position update phase.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.EndOfTimeStepUpdateables">
      <summary>
             Gets or sets the updateable manager that handles updateables that update at the end of a timestep.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.EndOfFrameUpdateables">
      <summary>
             Gets or sets the updateable manager that handles updateables that update at the end of a frame.
            </summary>
    </member>
    <member name="P:BEPUphysics.Space.Entities">
      <summary>
             Gets the list of entities in the space.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.PairCreatedEventHandler`1">
      <summary>
            Handles any special logic when two objects' bounding boxes overlap as determined by the broadphase system.
            </summary>
      <param name="sender">Entry sending the event.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.CreatingPairEventHandler`1">
      <summary>
            Handles any special logic when two objects' bounding boxes overlap as determined by the broadphase system.
            Unlike PairCreatedEventHandler, this will be called as soon as a pair is created instead of at the end of the frame.
            This allows the pair's data to be adjusted prior to any usage, but some actions are not supported due to the execution stage.
            </summary>
      <param name="sender">Entry sending the event.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.PairRemovedEventHandler`1">
      <summary>
            Handles any special logic when two objects' bounding boxes cease to overlap as determined by the broadphase system.
            </summary>
      <param name="sender">Entry sending the event.</param>
      <param name="other">The entry formerly interacting with the sender via the deleted pair.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.RemovingPairEventHandler`1">
      <summary>
            Handles any special logic when two objects' bounding boxes cease to overlap as determined by the broadphase system.
            Unlike PairRemovedEventHandler, this will trigger at the time of pair removal instead of at the end of the space's update.
            </summary>
      <param name="sender">Entry sending the event.</param>
      <param name="other">The entry formerly interacting with the sender via the deleted pair.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.ContactCreatedEventHandler`1">
      <summary>
            Handles any special logic when two bodies are touching and generate a contact point.
            </summary>
      <param name="sender">Entry sending the event.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
      <param name="contact">Created contact data.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.CreatingContactEventHandler`1">
      <summary>
            Handles any special logic when two bodies are touching and generate a contact point.
            Unlike ContactCreatedEventHandler, this will trigger at the time of contact generation instead of at the end of the space's update.
            This allows the contact's data to be adjusted prior to usage in the velocity solver, 
            but other actions such as altering the owning space's pair or entry listings are unsafe.
            </summary>
      <param name="sender">Entry sending the event.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
      <param name="contact">Newly generated contact point between the pair's two bodies.
            This reference cannot be safely kept outside of the scope of the handler; contacts can quickly return to the resource pool.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.InitialCollisionDetectedEventHandler`1">
      <summary>
            Handles any special logic when two bodies initally collide and generate a contact point.
            </summary>
      <param name="sender">Entry sending the event.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.DetectingInitialCollisionEventHandler`1">
      <summary>
            Handles any special logic when two bodies initally collide and generate a contact point.
            Unlike InitialCollisionDetectedEventHandler, this will trigger at the time of contact creation instead of at the end of the space's update.
            Performing operations outside of the scope of the pair is unsafe.
            </summary>
      <param name="sender">Entry sending the event.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.ContactRemovedEventHandler`1">
      <summary>
            Handles any special logic when a contact point between two bodies is removed.
            </summary>
      <param name="sender">Entry sending the event.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair presiding over the interaction of the two involved bodies and data about the removed contact.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
      <param name="contact">Removed contact data.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.RemovingContactEventHandler`1">
      <summary>
            Handles any special logic when a contact point between two bodies is removed.
            Unlike ContactRemovedEventHandler, this will trigger at the time of contact removal instead of at the end of the space's update.
            Performing operations outside of the scope of the controller is unsafe.
            </summary>
      <param name="sender">Entry sending the event.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair presiding over the interaction of the two involved bodies and data about the removed contact.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
      <param name="contact">Contact between the two entries.  This reference cannot be safely kept outside of the scope of the handler;
            it will be immediately returned to the resource pool after the event handler completes.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.CollisionEndedEventHandler`1">
      <summary>
            Handles any special logic when two bodies go from a touching state to a separated state.
            </summary>
      <param name="sender">Entry sending the event.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair overseeing the collision.  Note that this instance may be invalid if the entries' bounding boxes no longer overlap.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.CollisionEndingEventHandler`1">
      <summary>
            Handles any special logic when two bodies go from a touching state to a separated state.
            Unlike CollisionEndedEventHandler, this will trigger at the time of contact removal instead of at the end of the space's update.
            Performing operations outside of the scope of the controller is unsafe.
            </summary>
      <param name="sender">Entry sending the event.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair presiding over the interaction of the two involved bodies.
            This reference cannot be safely kept outside of the scope of the handler; pairs can quickly return to the resource pool.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.PairUpdatedEventHandler`1">
      <summary>
            Handles any special logic to perform at the end of a pair's UpdateContactManifold method.
            This is called every single update regardless if the process was quit early or did not complete due to interaction rules.
            </summary>
      <param name="sender">Entry involved in the pair monitored for events.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair that was updated.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.PairUpdatingEventHandler`1">
      <summary>
            Handles any special logic to perform at the end of a pair's UpdateContactManifold method.
            This is called every single update regardless if the process was quit early or did not complete due to interaction rules.
            Unlike PairUpdatedEventHandler, this is called at the time of the collision detection update rather than at the end of the space's update.
            Other entries' information may not be up to date, and operations acting on data outside of the character controller may be unsafe.
            </summary>
      <param name="sender">Entry involved in the pair monitored for events.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair that was updated.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.PairTouchedEventHandler`1">
      <summary>
            Handles any special logic to perform at the end of a pair's UpdateContactManifold method if the two objects are colliding.
            This is called every single update regardless if the process was quit early or did not complete due to interaction rules.
            </summary>
      <param name="sender">Entry involved in the pair monitored for events.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair that was updated.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.Events.PairTouchingEventHandler`1">
      <summary>
            Handles any special logic to perform at the end of a pair's UpdateContactManifold method if the two objects are colliding.
            This is called every single update regardless if the process was quit early or did not complete due to interaction rules.
            Unlike PairTouchedEventHandler, this is called at the time of the collision detection update rather than at the end of the space's update.
            Other entries' information may not be up to date, and operations acting on data outside of the character controller may be unsafe.
            </summary>
      <param name="sender">Entry involved in the pair monitored for events.</param>
      <param name="other">Other entry within the pair opposing the monitored entry.</param>
      <param name="pair">Pair that was updated.</param>
    </member>
    <member name="T:BEPUphysics.CollisionTests.ContactReducer">
      <summary>
             Helper class that reduces contact manifolds to reasonable numbers of contacts.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.ContactReducer.ReduceContacts(BEPUphysics.DataStructures.RawList{BEPUphysics.CollisionTests.Contact},BEPUphysics.DataStructures.RawValueList{BEPUphysics.CollisionTests.ContactData},BEPUphysics.DataStructures.RawList{System.Int32},BEPUphysics.DataStructures.RawValueList{BEPUphysics.CollisionTests.ContactData})">
      <summary>
             Reduces the contact manifold to a good subset.
            </summary>
      <param name="contacts">Contacts to reduce.</param>
      <param name="contactCandidates">Contact candidates to include in the reduction process.</param>
      <param name="contactsToRemove">Contacts that need to removed to reach the reduced state.</param>
      <param name="toAdd">Contact candidates that should be added to reach the reduced state.</param>
      <exception cref="T:System.InvalidOperationException">Thrown when the set being reduced is empty.</exception>
    </member>
    <member name="M:BEPUphysics.CollisionTests.ContactReducer.ReduceContacts(BEPUphysics.DataStructures.RawList{BEPUphysics.CollisionTests.Contact},BEPUphysics.CollisionTests.ContactData@,BEPUphysics.DataStructures.RawList{System.Int32},System.Boolean@)">
      <summary>
             Reduces a 4-contact manifold and contact candidate to 4 total contacts.
            </summary>
      <param name="contacts">Contacts to reduce.</param>
      <param name="contactCandidate">Contact candidate to include in the reduction process.</param>
      <param name="toRemove">Contacts that need to be removed to reduce the manifold.</param>
      <param name="addCandidate">Whether or not to add the contact candidate to reach the reduced manifold.</param>
      <exception cref="T:System.ArgumentException">Thrown when the contact manifold being reduced doesn't have 4 contacts.</exception>
    </member>
    <member name="T:BEPUphysics.CollisionRuleManagement.CollisionRule">
      <summary>
            Defines a set of rules that collisions can adhere to.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRule.Defer">
      <summary>
            Yields the interaction type's determination to a later stage.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRule.Normal">
      <summary>
            Uses all of collision detection, including creating a collision pair, creating contacts when appropriate, and responding to those contacts physically.
            If a collision pair is forced to use a 'normal' interaction but both entities in the pair are kinematic, the collision response will be skipped.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRule.NoSolver">
      <summary>
            Creates a collision pair and undergoes narrow phase testing, but does not collision response in the solver.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRule.NoNarrowPhaseUpdate">
      <summary>
            Creates a broad phase overlap and narrow phase pair but the collision is never updated.  It cannot generate contacts nor undergo solving.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRule.NoNarrowPhasePair">
      <summary>
            Creates a broad phase overlap but does not create any narrow phase pairs.  It cannot generate contacts nor undergo solving.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionRuleManagement.CollisionRule.NoBroadPhase">
      <summary>
            Does not create a broad phase overlap.  No further collision detection or response takes place.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.Terrain">
      <summary>
             Heightfield-based, unmovable collidable object.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.Terrain.#ctor(BEPUphysics.CollisionShapes.TerrainShape,BEPUphysics.MathExtensions.AffineTransform)">
      <summary>
             Constructs a new Terrain.
            </summary>
      <param name="shape">Shape to use for the terrain.</param>
      <param name="worldTransform">Transform to use for the terrain.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.Terrain.UpdateBoundingBox">
      <summary>
             Updates the bounding box of the terrain.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.Terrain.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Tests a ray against the entry.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
      <param name="rayHit">Hit location of the ray on the entry, if any.</param>
      <returns>Whether or not the ray hit the entry.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.Terrain.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.RayHit@)">
      <summary>
            Casts a convex shape against the collidable.
            </summary>
      <param name="castShape">Shape to cast.</param>
      <param name="startingTransform">Initial transform of the shape.</param>
      <param name="sweep">Sweep to apply to the shape.</param>
      <param name="hit">Hit data, if any.</param>
      <returns>Whether or not the cast hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.Terrain.GetNormal(System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the normal of a vertex at the given indices.
            </summary>
      <param name="i">First dimension index into the heightmap array.</param>
      <param name="j">Second dimension index into the heightmap array.</param>
      <param name="normal">Normal at the given indices.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.Terrain.GetPosition(System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the position of a vertex at the given indices.
            </summary>
      <param name="i">First dimension index into the heightmap array.</param>
      <param name="j">Second dimension index into the heightmap array.</param>
      <param name="position">Position at the given indices.</param>
    </member>
    <member name="P:BEPUphysics.Collidables.Terrain.Shape">
      <summary>
             Gets the shape of this collidable.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.Terrain.WorldTransform">
      <summary>
             Gets or sets the affine transform of the terrain.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.Terrain.ImproveBoundaryBehavior">
      <summary>
            Gets or sets whether or not the collision system should attempt to improve contact behavior at the boundaries between triangles.
            This has a slight performance cost, but prevents objects sliding across a triangle boundary from 'bumping,' and otherwise improves
            the robustness of contacts at edges and vertices.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.Terrain.Events">
      <summary>
             Gets the event manager used by the Terrain.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.Terrain.Material">
      <summary>
             Gets or sets the material of the terrain.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.Terrain.Thickness">
      <summary>
            Gets or sets the thickness of the terrain.  The thickness 
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.Terrain.Space">
      <summary>
            Gets the space that owns this terrain.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshPairHandler">
      <summary>
             Handles a static mesh-convex collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
      <summary>
             Updates the time of impact for the pair.
            </summary>
      <param name="requester">Collidable requesting the update.</param>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshPairHandler.ContactConstraint">
      <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshPairHandler.ContactManifold">
      <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection">
      <summary>
             Convenience collection of contacts and their associated data.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Enumerator">
      <summary>
             Enumerator for the contact collection.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Enumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Enumerator.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.GetEnumerator">
      <summary>
             Gets an enumerator for the collection.
            </summary>
      <returns>Enumerator for the contact collection.</returns>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Contains(BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.CopyTo(BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.IndexOf(BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.ContactCollection.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <returns>
            The element at the specified index.
            </returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="T:BEPUphysics.Entities.Prefabs.WrappedBody">
      <summary>
            A shape formed from the convex hull around its subbodies.  Can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.WrappedBody.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry},System.Single)">
      <exception cref="T:System.ArgumentException">Thrown when the subbodies list contains zero entities.</exception>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.WrappedBody.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry})">
      <exception cref="T:System.ArgumentException">Thrown when the subbodies list contains zero entities.</exception>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.WrappedBody.#ctor(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry},System.Single)">
      <summary>
            Constructs a physically simulated box.
            </summary>
      <param name="position">Position of the box.</param>
      <param name="subBodies">List of entities composing the body.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.WrappedBody.#ctor(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry})">
      <summary>
            Constructs a nondynamic wrapped body.
            </summary>
      <param name="position">Position of the box.</param>
      <param name="subBodies">List of entities composing the body.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.WrappedBody.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry},System.Single)">
      <summary>
            Constructs a dynamic wrapped body.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="subBodies">List of entities composing the body.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.WrappedBody.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry})">
      <summary>
            Constructs a nondynamic wrapped body.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="subBodies">List of entities composing the body.</param>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.WrappedBody.Shapes">
      <summary>
             Gets the list of shapes in the wrapped body.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.Prefabs.MobileMesh">
      <summary>
            Acts as a grouping of multiple other objects.  Can be used to form physically simulated concave shapes.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.MobileMesh.#ctor(Microsoft.Xna.Framework.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform,BEPUphysics.CollisionShapes.MobileMeshSolidity)">
      <summary>
            Creates a new kinematic MobileMesh.
            </summary>
      <param name="vertices">Vertices in the mesh.</param>
      <param name="indices">Indices of the mesh.</param>
      <param name="localTransform">Affine transform to apply to the vertices.</param>
      <param name="solidity">Solidity/sidedness of the mesh.  "Solid" is only permitted if the mesh is closed.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.MobileMesh.#ctor(Microsoft.Xna.Framework.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform,BEPUphysics.CollisionShapes.MobileMeshSolidity,System.Single)">
      <summary>
            Creates a new dynamic MobileMesh.
            </summary>
      <param name="vertices">Vertices in the mesh.</param>
      <param name="indices">Indices of the mesh.</param>
      <param name="localTransform">Affine transform to apply to the vertices.</param>
      <param name="solidity">Solidity/sidedness of the mesh.  "Solid" is only permitted if the mesh is closed.</param>
      <param name="mass">Mass of the mesh.</param>
    </member>
    <member name="T:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint">
      <summary>
            Prevents the target entity from moving faster than the specified speeds.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.#ctor">
      <summary>
            Constructs a maximum speed constraint.
            Set its Entity and MaximumSpeed to complete the configuration.
            IsActive also starts as false with this constructor.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.#ctor(BEPUphysics.Entities.Entity,System.Single)">
      <summary>
            Constructs a maximum speed constraint.
            </summary>
      <param name="e">Affected entity.</param>
      <param name="maxSpeed">Maximum linear speed allowed.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.SolveIteration">
      <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.Update(System.Single)">
      <summary>
            Calculates necessary information for velocity solving.
            Called automatically by space.
            </summary>
      <param name="dt">Time in seconds since the last update.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.MaximumForce">
      <summary>
            Gets and sets the maximum impulse that the constraint will attempt to apply when satisfying its requirements.
            This field can be used to simulate friction in a constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.MaximumSpeed">
      <summary>
            Gets or sets the maximum linear speed that this constraint allows.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.Softness">
      <summary>
            Gets and sets the softness of this constraint.
            Higher values of softness allow the constraint to be violated more.
            Must be greater than zero.
            Sometimes, if a joint system is unstable, increasing the softness of the involved constraints will make it settle down.
            For motors, softness can be used to implement damping.  For a damping constant k, the appropriate softness is 1/k.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumLinearSpeedConstraint.TotalImpulse">
      <summary>
            Gets the total impulse applied by the constraint.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.CollidablePair">
      <summary>
             Pair of collidables.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.CollidablePair.#ctor(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
      <summary>
             Constructs a new collidable pair.
            </summary>
      <param name="collidableA">First collidable in the pair.</param>
      <param name="collidableB">Second collidable in the pair.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.CollidablePair.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.Collidables.CollidablePair.Equals(BEPUphysics.Collidables.CollidablePair)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="P:BEPUphysics.Collidables.CollidablePair.CollidableA">
      <summary>
             First collidable in the pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.CollidablePair.CollidableB">
      <summary>
            Second collidable in the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.DataStructures.MeshBoundingBoxTree">
      <summary>
             Acceleration structure of triangles surrounded by axis aligned bounding boxes, supporting various speedy queries.
            </summary>
    </member>
    <member name="F:BEPUphysics.DataStructures.MeshBoundingBoxTree.LeafMargin">
      <summary>
            The tiny extra margin added to leaf bounding boxes that allow the volume cost metric to function properly even in degenerate cases.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.#ctor(BEPUphysics.DataStructures.MeshBoundingBoxTreeData)">
      <summary>
            Constructs a new tree.
            </summary>
      <param name="data">Data to use to construct the tree.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.Reconstruct">
      <summary>
            Reconstructs the tree based on the current data.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.Refit">
      <summary>
            Refits the tree based on the current data.
            This process is cheaper to perform than a reconstruction when the topology of the mesh
            does not change.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.GetOverlaps(Microsoft.Xna.Framework.BoundingBox,System.Collections.Generic.IList{System.Int32})">
      <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
      <param name="boundingBox">Shape to query against the tree.</param>
      <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
      <returns>Whether or not any elements were overlapped.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.GetOverlaps(Microsoft.Xna.Framework.BoundingSphere,System.Collections.Generic.IList{System.Int32})">
      <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
      <param name="boundingSphere">Shape to query against the tree.</param>
      <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
      <returns>Whether or not any elements were overlapped.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.GetOverlaps(Microsoft.Xna.Framework.BoundingFrustum,System.Collections.Generic.IList{System.Int32})">
      <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
      <param name="boundingFrustum">Shape to query against the tree.</param>
      <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
      <returns>Whether or not any elements were overlapped.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.GetOverlaps(Microsoft.Xna.Framework.Ray,System.Collections.Generic.IList{System.Int32})">
      <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
      <param name="ray">Shape to query against the tree.</param>
      <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
      <returns>Whether or not any elements were overlapped.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.MeshBoundingBoxTree.GetOverlaps(Microsoft.Xna.Framework.Ray,System.Single,System.Collections.Generic.IList{System.Int32})">
      <summary>
            Gets the triangles whose bounding boxes are overlapped by the query.
            </summary>
      <param name="ray">Shape to query against the tree.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray's length.</param>
      <param name="outputOverlappedElements">Indices of triangles in the index buffer with bounding boxes which are overlapped by the query.</param>
      <returns>Whether or not any elements were overlapped.</returns>
    </member>
    <member name="P:BEPUphysics.DataStructures.MeshBoundingBoxTree.BoundingBox">
      <summary>
            Gets the bounding box surrounding the tree.
            </summary>
    </member>
    <member name="P:BEPUphysics.DataStructures.MeshBoundingBoxTree.Data">
      <summary>
            Gets or sets the data used to construct the tree.
            When set, the tree will be reconstructed.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.MobileMeshContactManifold">
      <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.MobileMeshContactManifold.CleanUp">
      <summary>
             Cleans up the manifold.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.MobileMeshContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
      <summary>
             Initializes the manifold.
            </summary>
      <param name="newCollidableA">First collidable.</param>
      <param name="newCollidableB">Second collidable.</param>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.MobileMeshContactManifold.Mesh">
      <summary>
             Gets the mesh of the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.MobileMeshTriangleContactManifold">
      <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
    </member>
    <member name="T:BEPUphysics.Toolbox">
      <summary>
            Helper class with many algorithms for intersection testing and 3D math.
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.BigEpsilon">
      <summary>
            Large tolerance value.
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.Epsilon">
      <summary>
            Tolerance value.
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.NoVector">
      <summary>
            Represents an invalid Vector3.
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.BackVector">
      <summary>
            Reference for a vector with dimensions (0,0,1).
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.DownVector">
      <summary>
            Reference for a vector with dimensions (0,-1,0).
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.ForwardVector">
      <summary>
            Reference for a vector with dimensions (0,0,-1).
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.IdentityOrientation">
      <summary>
            Refers to the identity quaternion.
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.LeftVector">
      <summary>
            Reference for a vector with dimensions (-1,0,0).
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.RightVector">
      <summary>
            Reference for a vector with dimensions (1,0,0).
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.UpVector">
      <summary>
            Reference for a vector with dimensions (0,1,0).
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.ZeroMatrix">
      <summary>
            Matrix containing zeroes for every element.
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.ZeroVector">
      <summary>
            Reference for a vector with dimensions (0,0,0).
            </summary>
    </member>
    <member name="F:BEPUphysics.Toolbox.RigidIdentity">
      <summary>
            Refers to the rigid identity transformation.
            </summary>
    </member>
    <member name="M:BEPUphysics.Toolbox.FindRayTriangleIntersection(Microsoft.Xna.Framework.Ray@,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.RayHit@)">
      <summary>
            Determines the intersection between a ray and a triangle.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length to travel in units of the direction's length.</param>
      <param name="sidedness">Sidedness of the triangle to test.</param>
      <param name="a">First vertex of the triangle.</param>
      <param name="b">Second vertex of the triangle.</param>
      <param name="c">Third vertex of the triangle.</param>
      <param name="hit">Hit data of the ray, if any</param>
      <returns>Whether or not the ray and triangle intersect.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetSegmentPlaneIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Finds the intersection between the given segment and the given plane defined by three points.
            </summary>
      <param name="a">First endpoint of segment.</param>
      <param name="b">Second endpoint of segment.</param>
      <param name="d">First vertex of a triangle which lies on the plane.</param>
      <param name="e">Second vertex of a triangle which lies on the plane.</param>
      <param name="f">Third vertex of a triangle which lies on the plane.</param>
      <param name="q">Intersection point.</param>
      <returns>Whether or not the segment intersects the plane.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetSegmentPlaneIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Finds the intersection between the given segment and the given plane.
            </summary>
      <param name="a">First endpoint of segment.</param>
      <param name="b">Second enpoint of segment.</param>
      <param name="p">Plane for comparison.</param>
      <param name="q">Intersection point.</param>
      <returns>Whether or not the segment intersects the plane.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetSegmentPlaneIntersection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Plane,System.Single@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Finds the intersection between the given segment and the given plane.
            </summary>
      <param name="a">First endpoint of segment.</param>
      <param name="b">Second endpoint of segment.</param>
      <param name="p">Plane for comparison.</param>
      <param name="t">Interval along segment to intersection.</param>
      <param name="q">Intersection point.</param>
      <returns>Whether or not the segment intersects the plane.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetLinePlaneIntersection(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Plane@,System.Single@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Finds the intersection between the given line and the given plane.
            </summary>
      <param name="a">First endpoint of segment defining the line.</param>
      <param name="b">Second endpoint of segment defining the line.</param>
      <param name="p">Plane for comparison.</param>
      <param name="t">Interval along line to intersection (A + t * AB).</param>
      <param name="q">Intersection point.</param>
      <returns>Whether or not the line intersects the plane.  If false, the line is parallel to the plane's surface.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetRayPlaneIntersection(Microsoft.Xna.Framework.Ray@,Microsoft.Xna.Framework.Plane@,System.Single@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Finds the intersection between the given ray and the given plane.
            </summary>
      <param name="ray">Ray to test against the plane.</param>
      <param name="p">Plane for comparison.</param>
      <param name="t">Interval along line to intersection (A + t * AB).</param>
      <param name="q">Intersection point.</param>
      <returns>Whether or not the line intersects the plane.  If false, the line is parallel to the plane's surface.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTriangleToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p.
            </summary>
      <param name="a">First vertex of triangle.</param>
      <param name="b">Second vertex of triangle.</param>
      <param name="c">Third vertex of triangle.</param>
      <param name="p">Point for comparison.</param>
      <param name="closestPoint">Closest point on tetrahedron to point.</param>
      <returns>Voronoi region containing the closest point.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTriangleToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p and provides the subsimplex whose voronoi region contains the point.
            </summary>
      <param name="a">First vertex of triangle.</param>
      <param name="b">Second vertex of triangle.</param>
      <param name="c">Third vertex of triangle.</param>
      <param name="p">Point for comparison.</param>
      <param name="subsimplex">The source of the voronoi region which contains the point.</param>
      <param name="closestPoint">Closest point on tetrahedron to point.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTriangleToPoint(BEPUphysics.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3@,BEPUphysics.DataStructures.RawList{System.Int32},BEPUphysics.DataStructures.RawList{System.Single},Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p and provides the subsimplex whose voronoi region contains the point.
            </summary>
      <param name="q">Simplex containing triangle for testing.</param>
      <param name="i">Index of first vertex of triangle.</param>
      <param name="j">Index of second vertex of triangle.</param>
      <param name="k">Index of third vertex of triangle.</param>
      <param name="p">Point for comparison.</param>
      <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1, c = 2.</param>
      <param name="baryCoords">Barycentric coordinates of the point on the triangle.</param>
      <param name="closestPoint">Closest point on tetrahedron to point.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.IsPointInsideTriangle(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines if supplied point is within the triangle as defined by the provided vertices.
            </summary>
      <param name="vA">A vertex of the triangle.</param>
      <param name="vB">A vertex of the triangle.</param>
      <param name="vC">A vertex of the triangle.</param>
      <param name="p">The point for comparison against the triangle.</param>
      <returns>Whether or not the point is within the triangle.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.IsPointInsideTriangle(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
      <summary>
            Determines if supplied point is within the triangle as defined by the provided vertices.
            </summary>
      <param name="vA">A vertex of the triangle.</param>
      <param name="vB">A vertex of the triangle.</param>
      <param name="vC">A vertex of the triangle.</param>
      <param name="p">The point for comparison against the triangle.</param>
      <param name="margin">Extra area on the edges of the triangle to include.  Can be negative.</param>
      <returns>Whether or not the point is within the triangle.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetClosestPointOnSegmentToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
      <param name="a">First endpoint of segment.</param>
      <param name="b">Second endpoint of segment.</param>
      <param name="p">Point for comparison.</param>
      <param name="closestPoint">Closest point on the edge to p.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetClosestPointOnSegmentToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
      <param name="a">First endpoint of segment.</param>
      <param name="b">Second endpoint of segment.</param>
      <param name="p">Point for comparison.</param>
      <param name="subsimplex">The source of the voronoi region which contains the point.</param>
      <param name="closestPoint">Closest point on the edge to p.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetClosestPointOnSegmentToPoint(System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3@,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Single},Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
      <param name="q">List of points in the containing simplex.</param>
      <param name="i">Index of first endpoint of segment.</param>
      <param name="j">Index of second endpoint of segment.</param>
      <param name="p">Point for comparison.</param>
      <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1.</param>
      <param name="baryCoords">Barycentric coordinates of the point.</param>
      <param name="closestPoint">Closest point on the edge to p.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetSquaredDistanceFromPointToLine(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines the shortest squared distance from the point to the line.
            </summary>
      <param name="p">Point to check against the line.</param>
      <param name="a">First point on the line.</param>
      <param name="b">Second point on the line.</param>
      <returns>Shortest squared distance from the point to the line.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetClosestPointsBetweenSegments(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Computes closest points c1 and c2 betwen segments p1q1 and p2q2.
            </summary>
      <param name="p1">First point of first segment.</param>
      <param name="q1">Second point of first segment.</param>
      <param name="p2">First point of second segment.</param>
      <param name="q2">Second point of second segment.</param>
      <param name="c1">Closest point on first segment.</param>
      <param name="c2">Closest point on second segment.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetClosestPointsBetweenSegments(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,System.Single@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Computes closest points c1 and c2 betwen segments p1q1 and p2q2.
            </summary>
      <param name="p1">First point of first segment.</param>
      <param name="q1">Second point of first segment.</param>
      <param name="p2">First point of second segment.</param>
      <param name="q2">Second point of second segment.</param>
      <param name="s">Distance along the line to the point for first segment.</param>
      <param name="t">Distance along the line to the point for second segment.</param>
      <param name="c1">Closest point on first segment.</param>
      <param name="c2">Closest point on second segment.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetClosestPointsBetweenLines(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,System.Single@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Computes closest points c1 and c2 betwen lines p1q1 and p2q2.
            </summary>
      <param name="p1">First point of first segment.</param>
      <param name="q1">Second point of first segment.</param>
      <param name="p2">First point of second segment.</param>
      <param name="q2">Second point of second segment.</param>
      <param name="s">Distance along the line to the point for first segment.</param>
      <param name="t">Distance along the line to the point for second segment.</param>
      <param name="c1">Closest point on first segment.</param>
      <param name="c2">Closest point on second segment.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.ArePointsOnOppositeSidesOfPlane(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines if vectors o and p are on opposite sides of the plane defined by a, b, and c.
            </summary>
      <param name="o">First point for comparison.</param>
      <param name="p">Second point for comparison.</param>
      <param name="a">First vertex of the plane.</param>
      <param name="b">Second vertex of plane.</param>
      <param name="c">Third vertex of plane.</param>
      <returns>Whether or not vectors o and p reside on opposite sides of the plane.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetDistancePointToPlane(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines the distance between a point and a plane..
            </summary>
      <param name="point">Point to project onto plane.</param>
      <param name="normal">Normal of the plane.</param>
      <param name="pointOnPlane">Point located on the plane.</param>
      <returns>Distance from the point to the plane.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetPointProjectedOnPlane(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines the location of the point when projected onto the plane defined by the normal and a point on the plane.
            </summary>
      <param name="point">Point to project onto plane.</param>
      <param name="normal">Normal of the plane.</param>
      <param name="pointOnPlane">Point located on the plane.</param>
      <param name="projectedPoint">Projected location of point onto plane.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.IsPointWithinFaceExtrusion(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.List{Microsoft.Xna.Framework.Plane},Microsoft.Xna.Framework.Vector3)">
      <summary>
            Determines if a point is within a set of planes defined by the edges of a triangle.
            </summary>
      <param name="point">Point for comparison.</param>
      <param name="planes">Edge planes.</param>
      <param name="centroid">A point known to be inside of the planes.</param>
      <returns>Whether or not the point is within the edge planes.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTetrahedronToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
      <param name="a">First vertex of the tetrahedron.</param>
      <param name="b">Second vertex of the tetrahedron.</param>
      <param name="c">Third vertex of the tetrahedron.</param>
      <param name="d">Fourth vertex of the tetrahedron.</param>
      <param name="p">Point for comparison.</param>
      <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTetrahedronToPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
      <param name="a">First vertex of the tetrahedron.</param>
      <param name="b">Second vertex of the tetrahedron.</param>
      <param name="c">Third vertex of the tetrahedron.</param>
      <param name="d">Fourth vertex of the tetrahedron.</param>
      <param name="p">Point for comparison.</param>
      <param name="subsimplex">The source of the voronoi region which contains the point.</param>
      <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetClosestPointOnTetrahedronToPoint(BEPUphysics.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@,BEPUphysics.DataStructures.RawList{System.Int32},BEPUphysics.DataStructures.RawList{System.Single},Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
      <param name="tetrahedron">List of 4 points composing the tetrahedron.</param>
      <param name="p">Point for comparison.</param>
      <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1, c = 2, d = 3.</param>
      <param name="baryCoords">Barycentric coordinates of p on the tetrahedron.</param>
      <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetExtremePointOfSet(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Int32@)">
      <summary>
            Finds the vector that is furthest along the given direction within the list.
            </summary>
      <param name="direction">Direction to find the furthest point along.</param>
      <param name="pointIndices">Indices from the point set to test.</param>
      <param name="points">List of all points to be indexed from.</param>
      <returns>The point furthest along the direction in the list of points.</returns>
      <param name="maxIndex">Index of the maximum point in the list.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetExtremePointsOfSet(Microsoft.Xna.Framework.Vector3,System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Int32@,System.Int32@)">
      <summary>
            Finds the two points which are most extreme along the given direction within the list.
            </summary>
      <param name="direction">Direction to find the furthest points along.</param>
      <param name="points">List of points to test against.</param>
      <param name="minimum">Index of the point furthest back along the direction in the point list.</param>
      <param name="maximum">Index of the point furthest forward along the direction in the point list.</param>
      <returns>The point furthest along the direction in the list of points.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetConvexHull(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.IList{System.Int32})">
      <summary>
            Identifies the indices of points in a set which are on the outer convex hull of the set.
            </summary>
      <param name="points">List of points in the set.</param>
      <param name="indices">List of indices composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetConvexHull(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
      <summary>
            Identifies the points on the surface of hull.
            </summary>
      <param name="points">List of points in the set.</param>
      <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetConvexHull(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
      <summary>
            Identifies the points on the surface of hull.
            </summary>
      <param name="points">List of points in the set.</param>
      <param name="outputIndices">List of indices composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
      <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.RayCastSphere(Microsoft.Xna.Framework.Ray@,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,BEPUphysics.RayHit@)">
      <summary>
             Tests a ray against a sphere.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="spherePosition">Position of the sphere.</param>
      <param name="radius">Radius of the sphere.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="hit">Hit data of the ray, if any.</param>
      <returns>Whether or not the ray hits the sphere.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetExpandedBoundingBox(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape@,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Computes a bounding box and expands it.
            </summary>
      <param name="shape">Shape to compute the bounding box of.</param>
      <param name="transform">Transform to use to position the shape.</param>
      <param name="sweep">Extra to add to the bounding box.</param>
      <param name="boundingBox">Expanded bounding box.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.ExpandBoundingBox(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Expands a bounding box by the given sweep.
            </summary>
      <param name="boundingBox">Bounding box to expand.</param>
      <param name="sweep">Sweep to expand the bounding box with.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetTriangleBoundingBox(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Computes the bounding box of three points.
            </summary>
      <param name="a">First vertex of the triangle.</param>
      <param name="b">Second vertex of the triangle.</param>
      <param name="c">Third vertex of the triangle.</param>
      <param name="aabb">Bounding box of the triangle.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetAngleFromQuaternion(Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Computes the angle change represented by a normalized quaternion.
            </summary>
      <param name="q">Quaternion to be converted.</param>
      <returns>Angle around the axis represented by the quaternion.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetAxisAngleFromQuaternion(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>
            Computes the axis angle representation of a normalized quaternion.
            </summary>
      <param name="q">Quaternion to be converted.</param>
      <param name="axis">Axis represented by the quaternion.</param>
      <param name="angle">Angle around the axis represented by the quaternion.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetQuaternionBetweenNormalizedVectors(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Computes the quaternion rotation between two normalized vectors.
            </summary>
      <param name="v1">First unit-length vector.</param>
      <param name="v2">Second unit-length vector.</param>
      <param name="q">Quaternion representing the rotation from v1 to v2.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetVelocityOfPoint(Microsoft.Xna.Framework.Vector3,BEPUphysics.Entities.Entity)">
      <summary>
            Finds the velocity of a point as if it were connected to the given entity.
            </summary>
      <param name="p">Location of point.</param>
      <param name="obj">Collidable for connection.</param>
      <returns>Acceleration of the point.</returns>
    </member>
    <member name="M:BEPUphysics.Toolbox.UpdateOrientationRK4(Microsoft.Xna.Framework.Quaternion@,BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Updates the quaternion using RK4 integration.
            </summary>
      <param name="q">Quaternion to update.</param>
      <param name="localInertiaTensorInverse">Local-space inertia tensor of the object being updated.</param>
      <param name="angularMomentum">Angular momentum of the object.</param>
      <param name="dt">Time since last frame, in seconds.</param>
      <param name="newOrientation">New orientation quaternion.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.DifferentiateQuaternion(Microsoft.Xna.Framework.Quaternion@,BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Finds the change in the rotation state quaternion provided the local inertia tensor and angular velocity.
            </summary>
      <param name="orientation">Orienatation of the object.</param>
      <param name="localInertiaTensorInverse">Local-space inertia tensor of the object being updated.</param>
      <param name="angularMomentum">Angular momentum of the object.</param>
      <param name="orientationChange">Change in quaternion.</param>
    </member>
    <member name="M:BEPUphysics.Toolbox.GetBarycentricCoordinates(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,System.Single@,System.Single@)">
      <summary>
            Gets the barycentric coordinates of the point with respect to a triangle's vertices.
            </summary>
      <param name="p">Point to compute the barycentric coordinates of.</param>
      <param name="a">First vertex in the triangle.</param>
      <param name="b">Second vertex in the triangle.</param>
      <param name="c">Third vertex in the triangle.</param>
      <param name="aWeight">Weight of the first vertex.</param>
      <param name="bWeight">Weight of the second vertex.</param>
      <param name="cWeight">Weight of the third vertex.</param>
    </member>
    <member name="T:BEPUphysics.Threading.SpinLock">
      <summary>
            Synchronizes using a busy wait.  Take care when using this; if the critical section is long or there's any doubt about the use of a busy wait, consider using Monitor locks or other approaches instead.
            Replaces the .NET SpinLock on PC and provides its functionality on the Xbox360.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SpinLock.Enter">
      <summary>
            Enters the critical section.  A thread cannot attempt to enter the spinlock if it already owns the spinlock.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SpinLock.TryEnter">
      <summary>
            Attempts to enters the critical section.  A thread cannot attempt to enter the spinlock if it already owns the spinlock.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SpinLock.Exit">
      <summary>
            Exits the critical section.  This can only be safely called from the same
            thread of execution after a corresponding Enter.
            </summary>
    </member>
    <member name="T:BEPUphysics.Threading.SimpleThreadManager">
      <summary>
            Manages the engine's threads.
            </summary>
      <remarks>
            Uses a simple round-robin threadpool.
            It is recommended that other thread managers are used instead of this one;
            it is kept for compatability and a fallback in case of problems.
            </remarks>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.WorkerThread.Finalize">
      <summary>
            Shuts down any still living threads.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.WorkerThread.ThreadExecutionLoop">
      <exception cref="T:System.ArithmeticException">Thrown when the thread encounters an invalid state; generally propagated float.NaN's.</exception>
    </member>
    <member name="F:BEPUphysics.Threading.SimpleThreadManager.currentTaskAllocationIndex">
      <summary>
            Index into the thread loop lists, incremented after each task allocation.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.#ctor">
      <summary>
            Constructs the thread manager.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.Finalize">
      <summary>
            Releases resources used by the object.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.WaitForTaskCompletion">
      <summary>
            Blocks the current thread until all tasks have been completed.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.AddThread">
      <summary>
            Adds a thread to the manager.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.AddThread(System.Action{System.Object},System.Object)">
      <summary>
            Adds a thread to the manager.
            </summary>
      <param name="initialization">A function to run to perform any initialization on the new thread.</param>
      <param name="initializationInformation">Data to give the ParameterizedThreadStart for initialization.</param>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.RemoveThread">
      <summary>
            Removes a thread and blocks until success.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.EnqueueTask(System.Action{System.Object},System.Object)">
      <summary>
            Gives the thread manager a new task to run.
            </summary>
      <param name="task">Task to run.</param>
      <param name="taskInformation">Information to be used by the task.</param>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
      <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
      <param name="startIndex">Inclusive starting index.</param>
      <param name="endIndex">Exclusive ending index.</param>
      <param name="loopBody">Function that handles an individual iteration of the loop.</param>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.Dispose">
      <summary>
            Releases threads and resources used by the thread manager.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.EnqueueTaskSequentially(System.Action{System.Object},System.Object)">
      <summary>
            Enqueues a task.
            This method also does not perform any locking; it should only be called when all worker threads of the thread pool are idle and all calls to this method are from the same thread.
            </summary>
      <param name="task">Task to enqueue.</param>
      <param name="taskInformation">Information for the task.</param>
    </member>
    <member name="M:BEPUphysics.Threading.SimpleThreadManager.ShutDown">
      <summary>
            Tells every thread in the thread manager to shut down and waits until completion.
            </summary>
    </member>
    <member name="P:BEPUphysics.Threading.SimpleThreadManager.LoopTasksPerThread">
      <summary>
            Gets or sets the number of tasks to create per thread when doing forLoops.
            </summary>
    </member>
    <member name="P:BEPUphysics.Threading.SimpleThreadManager.ThreadCount">
      <summary>
            Gets the number of threads currently handled by the manager.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester">
      <summary>
             Tests convex shapes against other convex shapes for contact generation.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester.UseSimplexCaching">
      <summary>
             Whether or not to use simplex caching in general case convex-convex collisions.
             This will improve performance in simulations relying on the general case system, 
             but may decrease quality of behavior for curved shapes.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester.GenerateContactCandidate(BEPUphysics.CollisionTests.ContactData@)">
      <summary>
             Generates a contact between the objects, if possible.
            </summary>
      <param name="contact">Contact created between the pair, if possible.</param>
      <returns>Whether or not the objects were colliding.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
      <summary>
             Initializes the pair tester.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape in the pair.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester.CleanUp">
      <summary>
             Cleans up the pair tester.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester.CollidableA">
      <summary>
             Gets the first collidable in the pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.GeneralConvexPairTester.CollidableB">
      <summary>
             Gets the second collidable in the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness">
      <summary>
             Sidedness of a triangle or mesh.
             A triangle can be double sided, or allow one of its sides to let interacting objects through.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness.DoubleSided">
      <summary>
            The triangle will interact with objects coming from both directions.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness.Clockwise">
      <summary>
            The triangle will interact with objects from which the winding of the triangle appears to be clockwise.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness.Counterclockwise">
      <summary>
            The triangle will interact with objects from which the winding of the triangle appears to be counterclockwise..
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape">
      <summary>
             Triangle collision shape.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.#ctor">
      <summary>
             Constructs a triangle shape without initializing it.
             This is useful for systems that re-use a triangle shape repeatedly.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Constructs a triangle shape.
             The vertices will be recentered.
            </summary>
      <param name="vA">First vertex in the triangle.</param>
      <param name="vB">Second vertex in the triangle.</param>
      <param name="vC">Third vertex in the triangle.</param>
      <param name="center">Computed center of the triangle.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
             Constructs a triangle shape.
             The vertices will be recentered.  If the center is needed, use the other constructor.
            </summary>
      <param name="vA">First vertex in the triangle.</param>
      <param name="vB">Second vertex in the triangle.</param>
      <param name="vC">Third vertex in the triangle.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
      <param name="shapeTransform">Transform to use.</param>
      <param name="boundingBox">Bounding box of the transformed shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.GetLocalExtremePointWithoutMargin(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ComputeMaximumRadius">
      <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
      <returns>Maximum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ComputeMinimumRadius">
      <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
      <returns>Minimum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ComputeVolumeDistribution(System.Single@)">
      <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ComputeCenter">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ComputeCenter(System.Single@)">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ComputeVolume">
      <summary>
            Computes the volume of the shape.
            </summary>
      <returns>Volume of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.GetLocalNormal">
      <summary>
             Gets the normal of the triangle shape in its local space.
            </summary>
      <returns>The local normal.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.GetNormal(BEPUphysics.MathExtensions.RigidTransform)">
      <summary>
            Gets the normal of the triangle in world space.
            </summary>
      <param name="transform">World transform.</param>
      <returns>Normal of the triangle in world space.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.RayTest(Microsoft.Xna.Framework.Ray@,BEPUphysics.MathExtensions.RigidTransform@,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Gets the intersection between the triangle and the ray.
            </summary>
      <param name="ray">Ray to test against the triangle.</param>
      <param name="transform">Transform to apply to the triangle shape for the test.</param>
      <param name="maximumLength">Maximum distance to travel in units of the direction vector's length.</param>
      <param name="hit">Hit data of the ray cast, if any.</param>
      <returns>Whether or not the ray hit the target.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.GetCollidableInstance">
      <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
      <returns>EntityCollidable that uses this shape.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.VertexA">
      <summary>
             Gets or sets the first vertex of the triangle shape.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.VertexB">
      <summary>
             Gets or sets the second vertex of the triangle shape.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.VertexC">
      <summary>
             Gets or sets the third vertex of the triangle shape.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape.Sidedness">
      <summary>
             Gets or sets the sidedness of the triangle.
            </summary>
    </member>
    <member name="T:BEPUphysics.ProcessingStage">
      <summary>
             Superclass of singlethreaded update systems.
            </summary>
    </member>
    <member name="M:BEPUphysics.ProcessingStage.Update">
      <summary>
             Updates the stage.
            </summary>
    </member>
    <member name="P:BEPUphysics.ProcessingStage.Enabled">
      <summary>
             Gets or sets whether or not the stage should update.
            </summary>
    </member>
    <member name="E:BEPUphysics.ProcessingStage.Starting">
      <summary>
             Fires when the stage starts working.
            </summary>
    </member>
    <member name="E:BEPUphysics.ProcessingStage.Finishing">
      <summary>
             Fires when the stage finishes working.
            </summary>
    </member>
    <member name="T:BEPUphysics.OtherSpaceStages.DeferredEventDispatcher">
      <summary>
             Manages the deferred events spawned by IDeferredEventCreators and dispatches them on update.
            </summary>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.DeferredEventDispatcher.#ctor">
      <summary>
             Constructs the dispatcher.
            </summary>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.DeferredEventDispatcher.AddEventCreator(BEPUphysics.OtherSpaceStages.IDeferredEventCreator)">
      <summary>
             Adds an event creator.
            </summary>
      <param name="creator">Creator to add.</param>
      <exception cref="T:System.ArgumentException">Thrown when the creator is already managed by a dispatcher.</exception>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.DeferredEventDispatcher.RemoveEventCreator(BEPUphysics.OtherSpaceStages.IDeferredEventCreator)">
      <summary>
            Removes an event creator.
            </summary>
      <param name="creator">Creator to remove.</param>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.DeferredEventDispatcher.CreatorActivityChanged(BEPUphysics.OtherSpaceStages.IDeferredEventCreator)">
      <summary>
             Notifies the dispatcher that the event activity of a creator has changed.
            </summary>
      <param name="creator">Cretor whose activity has changed.</param>
      <exception cref="T:System.ArgumentException">Thrown when the event creator's state hasn't changed.</exception>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.ConvexConstraintPairHandler">
      <summary>
             Pair handler that manages a pair of two boxes.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.ConvexConstraintPairHandler.ContactConstraint">
      <summary>
            Gets the contact constraint used by the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.BoxPairHandler">
      <summary>
             Pair handler that manages a pair of two boxes.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.BoxPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.BoxPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.BoxPairHandler.ContactManifold">
      <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.IBeforePositionUpdateUpdateable">
      <summary>
             Defines an object which is updated by the space at the end of a time step.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.IBeforePositionUpdateUpdateable.Update(System.Single)">
      <summary>
             Updates the object at the end of a time step.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshInstancedMeshPairHandler">
      <summary>
             Handles a mobile mesh-mobile mesh collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshInstancedMeshPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshInstancedMeshPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.Prefabs.Box">
      <summary>
            Box-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Box.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a physically simulated box.
            </summary>
      <param name="pos">Position of the box.</param>
      <param name="width">Height of the box.</param>
      <param name="length">Length of the box.</param>
      <param name="height">Height of the box.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Box.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a nondynamic box.
            </summary>
      <param name="pos">Position of the box.</param>
      <param name="width">Height of the box.</param>
      <param name="length">Length of the box.</param>
      <param name="height">Height of the box.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Box.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a physically simulated box.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="width">Width of the box.</param>
      <param name="length">Length of the box.</param>
      <param name="height">Height of the box.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Box.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a nondynamic box.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="width">Height of the box.</param>
      <param name="length">Length of the box.</param>
      <param name="height">Height of the box.</param>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Box.HalfWidth">
      <summary>
            Width of the box divided by two.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Box.HalfHeight">
      <summary>
            Height of the box divided by two.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Box.HalfLength">
      <summary>
            Length of the box divided by two.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Box.Width">
      <summary>
            Width of the box.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Box.Height">
      <summary>
            Height of the box.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Box.Length">
      <summary>
            Length of the box.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SpringAdvancedSettings">
      <summary>
            Contains the error reduction factor and softness of a constraint.
            These can be used to make the same behaviors as the stiffness and damping constants,
            but may provide a more intuitive representation for rigid constraints.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SpringAdvancedSettings.ErrorReductionFactor">
      <summary>
            Gets or sets the error reduction parameter of the spring.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SpringAdvancedSettings.Softness">
      <summary>
            Gets or sets the softness of the joint.  Higher values allow the constraint to be violated more.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SpringAdvancedSettings.UseAdvancedSettings">
      <summary>
            Gets or sets whether or not to use the advanced settings.
            If this is set to true, the errorReductionFactor and softness will be used instead
            of the stiffness constant and damping constant.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SpringSettings">
      <summary>
            Specifies the way in which a constraint's spring component behaves.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SpringSettings.ComputeErrorReductionAndSoftness(System.Single,System.Single@,System.Single@)">
      <summary>
            Computes the error reduction parameter and softness of a constraint based on its constants.
            Automatically called by constraint presteps to compute their per-frame values.
            </summary>
      <param name="dt">Simulation timestep.</param>
      <param name="errorReduction">Error reduction factor to use this frame.</param>
      <param name="softness">Adjusted softness of the constraint for this frame.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.SpringSettings.Advanced">
      <summary>
            Gets an object containing the solver's direct view of the spring behavior.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SpringSettings.DampingConstant">
      <summary>
            Gets or sets the damping constant of this spring.  Higher values reduce oscillation more.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SpringSettings.StiffnessConstant">
      <summary>
            Gets or sets the spring constant of this spring.  Higher values make the spring stiffer.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint">
      <summary>
             Contact manifold constraint that is used by manifolds whose normals are assumed to be
             essentially the same.  This assumption can only be maintained between two convex objects.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.#ctor">
      <summary>
             Constructs a new convex contact manifold constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.CleanUp">
      <summary>
             Cleans up the constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.AddContact(BEPUphysics.CollisionTests.Contact)">
      <summary>
             Adds a contact to be managed by the constraint.
            </summary>
      <param name="contact">Contact to add.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.RemoveContact(BEPUphysics.CollisionTests.Contact)">
      <summary>
             Removes a contact from the constraint.
            </summary>
      <param name="contact">Contact to remove.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.TwistFriction">
      <summary>
             Gets the twist friction constraint used by the manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.SlidingFriction">
      <summary>
             Gets the sliding friction constraint used by the manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ConvexContactManifoldConstraint.ContactPenetrationConstraints">
      <summary>
             Gets the penetration constraints used by the manifold.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData">
      <summary>
            Stores basic data used by some collision systems.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData.Position">
      <summary>
            Position of the candidate contact.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData.Depth">
      <summary>
            Depth of the candidate contact.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData.Id">
      <summary>
            Id of the candidate contact.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData.Equals(BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData)">
      <summary>
            Returns true if the other data has the same id.
            </summary>
      <param name="other">Data to compare.</param>
      <returns>True if the other data has the same id, false otherwise.</returns>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactDataCache.Count">
      <summary>
            Number of elements in the cache.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactDataCache.RemoveAt(System.Int32)">
      <summary>
            Removes an item at the given index.
            </summary>
      <param name="index">Index to remove.</param>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider">
      <summary>
            Contains helper methods for testing collisions between boxes.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider.AreBoxesColliding(BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
      <summary>
            Determines if the two boxes are colliding.
            </summary>
      <param name="a">First box to collide.</param>
      <param name="b">Second box to collide.</param>
      <param name="transformA">Transform to apply to shape a.</param>
      <param name="transformB">Transform to apply to shape b.</param>
      <returns>Whether or not the boxes collide.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider.AreBoxesColliding(BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,System.Single@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines if the two boxes are colliding.
            </summary>
      <param name="a">First box to collide.</param>
      <param name="b">Second box to collide.</param>
      <param name="separationDistance">Distance of separation.</param>
      <param name="separatingAxis">Axis of separation.</param>
      <param name="transformA">Transform to apply to shape A.</param>
      <param name="transformB">Transform to apply to shape B.</param>
      <returns>Whether or not the boxes collide.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider.AreBoxesCollidingWithPenetration(BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,System.Single@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines if the two boxes are colliding, including penetration depth data.
            </summary>
      <param name="a">First box to collide.</param>
      <param name="b">Second box to collide.</param>
      <param name="distance">Distance of separation or penetration.</param>
      <param name="axis">Axis of separation or penetration.</param>
      <param name="transformA">Transform to apply to shape A.</param>
      <param name="transformB">Transform to apply to shape B.</param>
      <returns>Whether or not the boxes collide.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider.AreBoxesColliding(BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,System.Single@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.DataStructures.TinyStructList{BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactData}@)">
      <summary>
            Determines if the two boxes are colliding and computes contact data.
            </summary>
      <param name="a">First box to collide.</param>
      <param name="b">Second box to collide.</param>
      <param name="distance">Distance of separation or penetration.</param>
      <param name="axis">Axis of separation or penetration.</param>
      <param name="contactData">Computed contact data.</param>
      <param name="transformA">Transform to apply to shape A.</param>
      <param name="transformB">Transform to apply to shape B.</param>
      <returns>Whether or not the boxes collide.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider.AreBoxesColliding(BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,System.Single@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.CollisionTests.CollisionAlgorithms.BoxContactDataCache@)">
      <summary>
            Determines if the two boxes are colliding and computes contact data.
            </summary>
      <param name="a">First box to collide.</param>
      <param name="b">Second box to collide.</param>
      <param name="distance">Distance of separation or penetration.</param>
      <param name="axis">Axis of separation or penetration.</param>
      <param name="contactData">Contact positions, depths, and ids.</param>
      <param name="transformA">Transform to apply to shape A.</param>
      <param name="transformB">Transform to apply to shape B.</param>
      <returns>Whether or not the boxes collide.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxBoxCollider.GetClosestPointsBetweenSegments(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Computes closest points c1 and c2 betwen segments p1q1 and p2q2.
            </summary>
      <param name="p1">First point of first segment.</param>
      <param name="q1">Second point of first segment.</param>
      <param name="p2">First point of second segment.</param>
      <param name="q2">Second point of second segment.</param>
      <param name="c1">Closest point on first segment.</param>
      <param name="c2">Closest point on second segment.</param>
    </member>
    <member name="T:BEPUphysics.Vehicle.WheelShape">
      <summary>
            Superclass for the shape of the tires of a vehicle.
            Responsible for figuring out where the wheel touches the ground and
            managing graphical properties.
            </summary>
    </member>
    <member name="F:BEPUphysics.Vehicle.WheelShape.detector">
      <summary>
            Collects collision pairs from the environment.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.WheelShape.UpdateWorldTransform">
      <summary>
            Updates the wheel's world transform for graphics.
            Called automatically by the owning wheel at the end of each frame.
            If the engine is updating asynchronously, you can call this inside of a space read buffer lock
            and update the wheel transforms safely.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.WheelShape.UpdateSpin(System.Single)">
      <summary>
            Updates the spin velocity and spin angle for the shape.
            </summary>
      <param name="dt">Simulation timestep.</param>
    </member>
    <member name="M:BEPUphysics.Vehicle.WheelShape.FindSupport(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,BEPUphysics.Entities.Entity@,BEPUphysics.Materials.Material@)">
      <summary>
            Finds a supporting entity, the contact location, and the contact normal.
            </summary>
      <param name="location">Contact point between the wheel and the support.</param>
      <param name="normal">Contact normal between the wheel and the support.</param>
      <param name="suspensionLength">Length of the suspension at the contact.</param>
      <param name="entity">Supporting object.</param>
      <param name="material">Material of the support.</param>
      <returns>Whether or not any support was found.</returns>
    </member>
    <member name="M:BEPUphysics.Vehicle.WheelShape.Initialize">
      <summary>
            Initializes the detector entity and any other necessary logic.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.WheelShape.UpdateDetectorPosition">
      <summary>
            Updates the position of the detector before each step.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.Radius">
      <summary>
            Gets or sets the graphical radius of the wheel.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.AirborneWheelAcceleration">
      <summary>
            Gets or sets the rate at which the wheel's spinning velocity increases when accelerating and airborne.
            This is a purely graphical effect.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.AirborneWheelDeceleration">
      <summary>
            Gets or sets the rate at which the wheel's spinning velocity decreases when the wheel is airborne and its motor is idle.
            This is a purely graphical effect.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.BrakeFreezeWheelDeceleration">
      <summary>
            Gets or sets the rate at which the wheel's spinning velocity decreases when braking.
            This is a purely graphical effect.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.CollisionRules">
      <summary>
            Gets or sets the collision rules used to filter wheel supports.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.Detector">
      <summary>
            Gets the detector entity used by the wheelshape to collect collision pairs.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.FreezeWheelsWhileBraking">
      <summary>
            Gets or sets whether or not to halt the wheel spin while the WheelBrake is active.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.LocalGraphicTransform">
      <summary>
            Gets or sets the local graphic transform of the wheel shape.
            This transform is applied first when creating the shape's worldTransform.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.SpinAngle">
      <summary>
            Gets or sets the current spin angle of this wheel.
            This changes each frame based on the relative velocity between the
            support and the wheel.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.SpinVelocity">
      <summary>
            Gets or sets the graphical spin velocity of the wheel based on the relative velocity 
            between the support and the wheel.  Whenever the wheel is in contact with
            the ground, the spin velocity will be each frame.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.SteeringAngle">
      <summary>
            Gets or sets the current steering angle of this wheel.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.Wheel">
      <summary>
            Gets the wheel object associated with this shape.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelShape.WorldTransform">
      <summary>
            Gets the world matrix of the wheel for positioning a graphic.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.CombinedUpdateable">
      <summary>
             A class which is both a space updateable and a Solver Updateable.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.CombinedUpdateable.IsUpdatedSequentially">
      <summary>
            Gets and sets whether or not the updateable should be updated sequentially even in a multithreaded space.
            If this is true, the updateable can make use of the space's ThreadManager for internal multithreading.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.CombinedUpdateable.IsUpdating">
      <summary>
            Gets and sets whether or not the updateable should be updated by the space.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.CombinedUpdateable.Tag">
      <summary>
            Gets or sets the user data associated with this object.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.IBeforeNarrowPhaseUpdateable">
      <summary>
             Defines an object which is updated by the space before the narrow phase runs.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.IBeforeNarrowPhaseUpdateable.Update(System.Single)">
      <summary>
             Updates the updateable before the narrow phase.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.IEndOfTimeStepUpdateable">
      <summary>
             Defines an object which is updated by the space at the end of a time step.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.IEndOfTimeStepUpdateable.Update(System.Single)">
      <summary>
             Updates the object at the end of a time step.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.IEndOfFrameUpdateable">
      <summary>
             Defines an object which is updated by the space at the end of the frame.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.IEndOfFrameUpdateable.Update(System.Single)">
      <summary>
            Updates the object at the end of the frame.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="T:BEPUphysics.Vehicle.Vehicle">
      <summary>
            Simulates wheeled vehicles using a variety of constraints and shape casts.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.Vehicle.#ctor(BEPUphysics.Entities.Entity)">
      <summary>
            Constructs a vehicle.
            </summary>
      <param name="shape">Body of the vehicle.</param>
    </member>
    <member name="M:BEPUphysics.Vehicle.Vehicle.#ctor(BEPUphysics.Entities.Entity,System.Collections.Generic.IEnumerable{BEPUphysics.Vehicle.Wheel})">
      <summary>
            Constructs a vehicle.
            </summary>
      <param name="shape">Body of the vehicle.</param>
      <param name="wheelList">List of wheels of the vehicle.</param>
    </member>
    <member name="M:BEPUphysics.Vehicle.Vehicle.OnAdditionToSpace(BEPUphysics.ISpace)">
      <summary>
            Sets up the vehicle's information when being added to the space.
            Called automatically when the space adds the vehicle.
            </summary>
      <param name="newSpace">New owning space.</param>
    </member>
    <member name="M:BEPUphysics.Vehicle.Vehicle.OnRemovalFromSpace(BEPUphysics.ISpace)">
      <summary>
            Sets up the vehicle's information when being added to the space.
            Called automatically when the space adds the vehicle.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.Vehicle.AddWheel(BEPUphysics.Vehicle.Wheel)">
      <summary>
            Adds a wheel to the vehicle.
            </summary>
      <param name="wheel">WheelTest to add.</param>
    </member>
    <member name="M:BEPUphysics.Vehicle.Vehicle.RemoveWheel(BEPUphysics.Vehicle.Wheel)">
      <summary>
            Removes a wheel from the vehicle.
            </summary>
      <param name="wheel">WheelTest to remove.</param>
    </member>
    <member name="M:BEPUphysics.Vehicle.Vehicle.SolveIteration">
      <summary>
            Updates the vehicle.
            Called automatically when needed by the owning Space.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.Vehicle.CollectInvolvedEntities(BEPUphysics.DataStructures.RawList{BEPUphysics.Entities.Entity})">
      <summary>
            Adds entities associated with the solver item to the involved entities list.
            Ensure that sortInvolvedEntities() is called at the end of the function.
            This allows the non-batched multithreading system to lock properly.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.Vehicle.Update(System.Single)">
      <summary>
            Computes information required during the later update.
            Called once before the iteration loop.
            </summary>
      <param name="dt">Time since previous frame in simulation seconds.</param>
    </member>
    <member name="M:BEPUphysics.Vehicle.Vehicle.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.Vehicle.UpdateSolverActivity">
      <summary>
            Updates the activity state of the wheel constraints.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Vehicle.Body">
      <summary>
            Gets or sets the entity representing the shape of the car.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Vehicle.SupportedWheelCount">
      <summary>
            Number of wheels with supports.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Vehicle.Wheels">
      <summary>
            Gets the list of wheels supporting the vehicle.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ParallelLoopWorker.Finalize">
      <summary>
            Releases resources used by the object.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ParallelLoopWorker.Dispose">
      <summary>
            Disposes the worker.
            </summary>
    </member>
    <member name="T:BEPUphysics.Paths.ConstantAngularSpeedCurve">
      <summary>
            Wrapper around an orientation curve that specifies a specific velocity at which to travel.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.ConstantAngularSpeedCurve.#ctor(System.Single,BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Quaternion})">
      <summary>
            Constructs a new constant speed curve.
            </summary>
      <param name="speed">Speed to maintain while traveling around a curve.</param>
      <param name="curve">Curve to wrap.</param>
    </member>
    <member name="M:BEPUphysics.Paths.ConstantAngularSpeedCurve.#ctor(System.Single,BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Quaternion},System.Int32)">
      <summary>
            Constructs a new constant speed curve.
            </summary>
      <param name="speed">Speed to maintain while traveling around a curve.</param>
      <param name="curve">Curve to wrap.</param>
      <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
    </member>
    <member name="T:BEPUphysics.Materials.MaterialPair">
      <summary>
             A pair of materials.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.MaterialPair.MaterialA">
      <summary>
             First material in the pair.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.MaterialPair.MaterialB">
      <summary>
             Second material in the pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.Materials.MaterialPair.#ctor(BEPUphysics.Materials.Material,BEPUphysics.Materials.Material)">
      <summary>
             Constructs a new material pair.
            </summary>
      <param name="a">First material in the pair.</param>
      <param name="b">Second material in the pair.</param>
    </member>
    <member name="M:BEPUphysics.Materials.MaterialPair.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.Materials.MaterialPair.Equals(BEPUphysics.Materials.MaterialPair)">
      <summary>
            Determines if the two material pairs have the same materials.
            </summary>
      <param name="other">Other pair to compare against.</param>
      <returns>Whether or not the two pairs have the same materials.</returns>
    </member>
    <member name="T:BEPUphysics.DataStructures.ObservableDictionary`2">
      <summary>
             Dictionary that provides events when the inner dictionary is changed.
            </summary>
      <typeparam name="TKey">Type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">Type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableDictionary`2.Add(`0,`1)">
      <summary>
             Adds a pair to the dictionary.
            </summary>
      <param name="key">Key of the element.</param>
      <param name="value">Value of the element.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableDictionary`2.Remove(`0)">
      <summary>
             Removes a key and its associated value from the dictionary, if present.
            </summary>
      <param name="key">Key of the element to remove.</param>
      <returns>Whether or not the object was found.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableDictionary`2.Clear">
      <summary>
             Clears the dictionary of all elements.
            </summary>
    </member>
    <member name="P:BEPUphysics.DataStructures.ObservableDictionary`2.WrappedDictionary">
      <summary>
             Gets or sets the dictionary wrapped by the observable dictionary.
             While the inner dictionary can be changed, making modifications to it will
             not trigger any changed events.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.ContactData">
      <summary>
             Contact data created by collision detection.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.ContactData.PenetrationDepth">
      <summary>
            Amount of penetration between the two objects.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.ContactData.Id">
      <summary>
            Feature-based id used to match contacts from the previous frame to their current versions.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.ContactData.Normal">
      <summary>
            Normal direction of the surface at the contact point.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.ContactData.Position">
      <summary>
            Position of the contact point.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.ContactData.ToString">
      <summary>
            Returns the fully qualified type name of this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.StaticMeshShape">
      <summary>
             The local space information needed by a StaticMesh.
             Since the hierarchy is in world space and owned by the StaticMesh collidable,
             this is a pretty lightweight object.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.StaticMeshShape.#ctor(Microsoft.Xna.Framework.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform)">
      <summary>
             Constructs a new StaticMeshShape.
            </summary>
      <param name="vertices">Vertices of the mesh.</param>
      <param name="indices">Indices of the mesh.</param>
      <param name="worldTransform">World transform to use in the local space data.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.StaticMeshShape.#ctor(Microsoft.Xna.Framework.Vector3[],System.Int32[])">
      <summary>
             Constructs a new StaticMeshShape.
            </summary>
      <param name="vertices">Vertices of the mesh.</param>
      <param name="indices">Indices of the mesh.</param>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.StaticMeshShape.TriangleMeshData">
      <summary>
             Gets the triangle mesh data composing the StaticMeshShape.
            </summary>
    </member>
    <member name="T:BEPUphysics.OtherSpaceStages.ForceUpdater">
      <summary>
             Applies forces to managed objects.
            </summary>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.ForceUpdater.#ctor(BEPUphysics.TimeStepSettings)">
      <summary>
             Constructs the force updater.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.ForceUpdater.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs the force updater.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
      <param name="threadManager">Thread manager to use.</param>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.ForceUpdater.Add(BEPUphysics.OtherSpaceStages.IForceUpdateable)">
      <summary>
             Adds a force updateable to the force updater.
            </summary>
      <param name="forceUpdateable">Item to add.</param>
      <exception cref="T:System.Exception">Thrown when the item already belongs to a force updater.</exception>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.ForceUpdater.Remove(BEPUphysics.OtherSpaceStages.IForceUpdateable)">
      <summary>
             Removes a force updateable from the force updater.
            </summary>
      <param name="forceUpdateable">Item to remove.</param>
      <exception cref="T:System.Exception">Thrown when the item does not belong to this force updater or its state is corrupted.</exception>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.ForceUpdater.ForceUpdateableBecomingDynamic(BEPUphysics.OtherSpaceStages.IForceUpdateable)">
      <summary>
            Notifies the system that a force updateable is becoming dynamic.
            </summary>
      <param name="updateable">Updateable changing state.</param>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.ForceUpdater.ForceUpdateableBecomingKinematic(BEPUphysics.OtherSpaceStages.IForceUpdateable)">
      <summary>
            Notifies the system that a force updateable is becoming kinematic.
            </summary>
      <param name="updateable">Updateable changing state.</param>
    </member>
    <member name="P:BEPUphysics.OtherSpaceStages.ForceUpdater.Gravity">
      <summary>
             Gets or sets the gravity applied by the force updater.
            </summary>
    </member>
    <member name="P:BEPUphysics.OtherSpaceStages.ForceUpdater.TimeStepSettings">
      <summary>
             Gets or sets the time step settings used by the force updater.
            </summary>
    </member>
    <member name="T:BEPUphysics.RayCastResult">
      <summary>
             Contains information about a ray cast hit.
            </summary>
    </member>
    <member name="F:BEPUphysics.RayCastResult.HitData">
      <summary>
             Position, normal, and t paramater of the hit.
            </summary>
    </member>
    <member name="F:BEPUphysics.RayCastResult.HitObject">
      <summary>
            Object hit by the ray.
            </summary>
    </member>
    <member name="M:BEPUphysics.RayCastResult.#ctor(BEPUphysics.RayHit,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Constructs a new ray cast result.
            </summary>
      <param name="hitData">Ray cast hit data.</param>
      <param name="hitObject">Object hit by the ray.</param>
    </member>
    <member name="T:BEPUphysics.DataStructures.ObservableList`1">
      <summary>
             List of objects which fires events when it is changed.
            </summary>
      <typeparam name="T">Type of elements in the list.</typeparam>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
             Constructs a new observable list.
            </summary>
      <param name="list">List to copy into the internal wrapped list.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableList`1.#ctor">
      <summary>
             Constructs an empty observable list.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableList`1.#ctor(System.Int32)">
      <summary>
             Constructs an empty observable list with a given capacity.
            </summary>
      <param name="initialCapacity">Initial allocated storage in the list.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableList`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableList`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableList`1.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableList`1.Add(`0)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableList`1.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableList`1.Contains(`0)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableList`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableList`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.ObservableList`1.GetEnumerator">
      <summary>
             Gets an enumerator for the list.
            </summary>
      <returns>Enumerator for the list.</returns>
    </member>
    <member name="P:BEPUphysics.DataStructures.ObservableList`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <returns>
            The element at the specified index.
            </returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="P:BEPUphysics.DataStructures.ObservableList`1.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.GeneralConvexPairHandler">
      <summary>
             Handles a convex-convex collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GeneralConvexPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.GeneralConvexPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.GeneralConvexPairHandler.ContactManifold">
      <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundInstancedMeshPairHandler">
      <summary>
             Handles a compound-instanced mesh collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundInstancedMeshPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundInstancedMeshPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.FluidVolume">
      <summary>
            Volume in which physically simulated objects have a buoyancy force applied to them based on their density and volume.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.FluidVolume.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3[]},System.Single,System.Single,System.Single,System.Single,BEPUphysics.BroadPhaseSystems.IQueryAccelerator,BEPUphysics.Threading.IThreadManager)">
      <summary>
            Creates a fluid volume.
            </summary>
      <param name="upVector">Up vector of the fluid volume.</param>
      <param name="gravity">Strength of gravity for the purposes of the fluid volume.</param>
      <param name="surfaceTriangles">List of triangles composing the surface of the fluid.  Set up as a list of length 3 arrays of Vector3's.</param>
      <param name="depth">Depth of the fluid back along the surface normal.</param>
      <param name="fluidDensity">Density of the fluid represented in the volume.</param>
      <param name="linearDamping">Fraction by which to reduce the linear momentum of floating objects each update, in addition to any of the body's own damping.</param>
      <param name="angularDamping">Fraction by which to reduce the angular momentum of floating objects each update, in addition to any of the body's own damping.</param>
      <param name="queryAccelerator">System to accelerate queries to find nearby entities.</param>
      <param name="threadManager">Thread manager used by the fluid volume.</param>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.FluidVolume.RecalculateBoundingBox">
      <summary>
            Recalculates the bounding box of the fluid based on its depth, surface normal, and surface triangles.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.UpVector">
      <summary>
             Gets the up vector of the fluid volume.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.BoundingBox">
      <summary>
            Bounding box surrounding the surface tris and entire depth of the object.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.MaxDepth">
      <summary>
            Maximum depth of the fluid from the surface.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.Density">
      <summary>
            Density of the fluid represented in the volume.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.SamplePointsPerDimension">
      <summary>
            Number of locations along each of the horizontal axes from which to sample the shape.
            Defaults to 8.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.LinearDamping">
      <summary>
            Fraction by which to reduce the linear momentum of floating objects each update.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.AngularDamping">
      <summary>
            Fraction by which to reduce the angular momentum of floating objects each update.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.FlowDirection">
      <summary>
            Direction in which to exert force on objects within the fluid.
            flowForce and maxFlowSpeed must have valid values as well for the flow to work.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.FlowForce">
      <summary>
            Magnitude of the flow's force, in units of flow direction.
            flowDirection and maxFlowSpeed must have valid values as well for the flow to work.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.MaxFlowSpeed">
      <summary>
            Maximum speed of the flow; objects will not be accelerated by the flow force beyond this speed.
            flowForce and flowDirection must have valid values as well for the flow to work.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.ThreadManager">
      <summary>
             Gets or sets the thread manager used by the fluid volume.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.SurfaceTriangles">
      <summary>
            List of coplanar triangles composing the surface of the fluid.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.FluidVolume.Gravity">
      <summary>
             Gets or sets the gravity used by the fluid volume.
            </summary>
    </member>
    <member name="T:BEPUphysics.MathExtensions.AffineTransform">
      <summary>
             A transformation composed of a linear transformation and a translation.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.AffineTransform.Translation">
      <summary>
             Translation in the affine transform.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.AffineTransform.LinearTransform">
      <summary>
            Linear transform in the affine transform.
            </summary>
    </member>
    <member name="M:BEPUphysics.MathExtensions.AffineTransform.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>
             Constructs a new affine transform.
            </summary>
      <param name="translation">Translation to use in the transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.AffineTransform.#ctor(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Vector3)">
      <summary>
             Constructs a new affine tranform.
            </summary>
      <param name="orientation">Orientation to use as the linear transform.</param>
      <param name="translation">Translation to use in the transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.AffineTransform.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Vector3)">
      <summary>
             Constructs a new affine transform.
            </summary>
      <param name="scaling">Scaling to apply in the linear transform.</param>
      <param name="orientation">Orientation to apply in the linear transform.</param>
      <param name="translation">Translation to apply.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.AffineTransform.#ctor(BEPUphysics.MathExtensions.Matrix3X3,Microsoft.Xna.Framework.Vector3)">
      <summary>
             Constructs a new affine transform.
            </summary>
      <param name="linearTransform">The linear transform component.</param>
      <param name="translation">Translation component of the transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.AffineTransform.Transform(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.AffineTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Transforms a vector by an affine transform.
            </summary>
      <param name="position">Position to transform.</param>
      <param name="transform">Transform to apply.</param>
      <param name="transformed">Transformed position.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.AffineTransform.TransformInverse(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.AffineTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Transforms a vector by an affine transform's inverse.
            </summary>
      <param name="position">Position to transform.</param>
      <param name="transform">Transform to invert and apply.</param>
      <param name="transformed">Transformed position.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.AffineTransform.Invert(BEPUphysics.MathExtensions.AffineTransform@,BEPUphysics.MathExtensions.AffineTransform@)">
      <summary>
             Inverts an affine transform.
            </summary>
      <param name="transform">Transform to invert.</param>
      <param name="inverse">Inverse of the transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.AffineTransform.Multiply(BEPUphysics.MathExtensions.AffineTransform@,BEPUphysics.MathExtensions.AffineTransform@,BEPUphysics.MathExtensions.AffineTransform@)">
      <summary>
            Multiplies a transform by another transform.
            </summary>
      <param name="a">First transform.</param>
      <param name="b">Second transform.</param>
      <param name="transform">Combined transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.AffineTransform.Multiply(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.AffineTransform@,BEPUphysics.MathExtensions.AffineTransform@)">
      <summary>
             Multiplies a rigid transform by an affine transform.
            </summary>
      <param name="a">Rigid transform.</param>
      <param name="b">Affine transform.</param>
      <param name="transform">Combined transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.AffineTransform.Transform(Microsoft.Xna.Framework.Vector3,BEPUphysics.MathExtensions.AffineTransform)">
      <summary>
             Transforms a vector using an affine transform.
            </summary>
      <param name="position">Position to transform.</param>
      <param name="affineTransform">Transform to apply.</param>
      <returns>Transformed position.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.AffineTransform.CreateFromRigidTransform(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.AffineTransform@)">
      <summary>
            Creates an affine transform from a rigid transform.
            </summary>
      <param name="rigid">Rigid transform to base the affine transform on.</param>
      <param name="affine">Affine transform created from the rigid transform.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.AffineTransform.CreateFromRigidTransform(BEPUphysics.MathExtensions.RigidTransform)">
      <summary>
            Creates an affine transform from a rigid transform.
            </summary>
      <param name="rigid">Rigid transform to base the affine transform on.</param>
      <returns>Affine transform created from the rigid transform.</returns>
    </member>
    <member name="P:BEPUphysics.MathExtensions.AffineTransform.Matrix">
      <summary>
             Gets or sets the 4x4 matrix representation of the affine transform.
             The linear transform is the upper left 3x3 part of the 4x4 matrix.
             The translation is included in the matrix's Translation property.
            </summary>
    </member>
    <member name="P:BEPUphysics.MathExtensions.AffineTransform.Identity">
      <summary>
             Gets the identity affine transform.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundMobileMeshPairHandler">
      <summary>
             Handles a compound-instanced mesh collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundMobileMeshPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundMobileMeshPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.Prefabs.TransformableEntity">
      <summary>
            Ball-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.TransformableEntity.#ctor(Microsoft.Xna.Framework.Vector3,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
      <summary>
            Constructs a dynamic transformable entity.
            </summary>
      <param name="position">Position of the entity.</param>
      <param name="shape">Shape to transform.</param>
      <param name="transform">Transform to apply to the shape.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.TransformableEntity.#ctor(Microsoft.Xna.Framework.Vector3,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Constructs a kinematic transformable entity.
            </summary>
      <param name="position">Position of the entity.</param>
      <param name="shape">Shape to transform.</param>
      <param name="transform">Transform to apply to the shape.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.TransformableEntity.#ctor(BEPUphysics.EntityStateManagement.MotionState,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
      <summary>
            Constructs a dynamic transformable entity.
            </summary>
      <param name="motionState">Initial motion state of the entity.</param>
      <param name="shape">Shape to transform.</param>
      <param name="transform">Transform to apply to the shape.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.TransformableEntity.#ctor(BEPUphysics.EntityStateManagement.MotionState,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Constructs a kinematic transformable entity.
            </summary>
      <param name="motionState">Initial motion state of the entity.</param>
      <param name="shape">Shape to transform.</param>
      <param name="transform">Transform to apply to the shape.</param>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.TransformableEntity.Shape">
      <summary>
             Gets the shape on which the transformable shape is based.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.TransformableEntity.Transform">
      <summary>
             Gets the linear transform that the shape uses to transform its base shape.
            </summary>
    </member>
    <member name="T:BEPUphysics.DeactivationManagement.SimulationIslandMember">
      <summary>
            Object owned by an entity which lives in a simulation island.
            Can be considered the entity's deactivation system proxy, just as the CollisionInformation property stores the collision pipeline proxy.
            </summary>
    </member>
    <member name="F:BEPUphysics.DeactivationManagement.SimulationIslandMember.searchState">
      <summary>
             Gets or sets the current search state of the simulation island member.  This is used by the simulation island system
             to efficiently split islands.
            </summary>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMember.UpdateDeactivationCandidacy(System.Single)">
      <summary>
             Updates the member's deactivation state.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMember.Activate">
      <summary>
            Attempts to activate the entity.
            </summary>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMember.RemoveConnectionReference(BEPUphysics.DeactivationManagement.SimulationIslandConnection)">
      <summary>
             Removes a connection reference from the member.
            </summary>
      <param name="connection">Reference to remove.</param>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandMember.AddConnectionReference(BEPUphysics.DeactivationManagement.SimulationIslandConnection)">
      <summary>
             Adds a connection reference to the member.
            </summary>
      <param name="connection">Reference to add.</param>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.Owner">
      <summary>
            Gets the entity that owns this simulation island member.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.Connections">
      <summary>
             Gets the connections associated with this member.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.IsDeactivationCandidate">
      <summary>
             Gets or sets whether or not the object is a deactivation candidate.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.IsActive">
      <summary>
             Gets whether or not the member is active.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.IsAlwaysActive">
      <summary>
            Gets or sets whether or not this member is always active.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.AllowStabilization">
      <summary>
            Gets or sets whether or not the entity can be stabilized by the deactivation system.  This allows systems of objects to go to sleep faster.
            Defaults to true.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.SimulationIsland">
      <summary>
             Gets the simulation island that owns this member.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.DeactivationManager">
      <summary>
            Gets the deactivation manager that is managing this member.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandMember.IsDynamic">
      <summary>
             Gets whether or not the object is dynamic.
             Non-dynamic members act as dead-ends in connection graphs.
            </summary>
    </member>
    <member name="E:BEPUphysics.DeactivationManagement.SimulationIslandMember.Activated">
      <summary>
             Fired when the object activates.
            </summary>
    </member>
    <member name="E:BEPUphysics.DeactivationManagement.SimulationIslandMember.BecameDeactivationCandidate">
      <summary>
             Fired when the object becomes a deactivation candidate.
            </summary>
    </member>
    <member name="E:BEPUphysics.DeactivationManagement.SimulationIslandMember.BecameNonDeactivationCandidate">
      <summary>
             Fired when the object is no longer a deactivation candidate.
            </summary>
    </member>
    <member name="E:BEPUphysics.DeactivationManagement.SimulationIslandMember.Deactivated">
      <summary>
             Fired when the object deactivates.
            </summary>
    </member>
    <member name="T:BEPUphysics.DeactivationManagement.SimulationIslandSearchState">
      <summary>
             Defines the current state of a simulation island member in a split attempt.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint">
      <summary>
            Restricts linear motion while allowing one degree of angular freedom.
            Acts like a tablet pc monitor hinge.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.#ctor">
      <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and one degree of angular freedom between two entities.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and one degree of angular freedom between two entities.
            </summary>
      <param name="connectionA">First entity of the constraint pair.</param>
      <param name="connectionB">Second entity of the constraint pair.</param>
      <param name="anchor">Point around which both entities rotate.</param>
      <param name="hingeAxis">Axis of allowed rotation in world space to be attached to connectionA.  Will be kept perpendicular with the twist axis.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.AngularJoint">
      <summary>
            Gets the angular joint which removes one degree of freedom.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.BallSocketJoint">
      <summary>
            Gets the ball socket joint that restricts linear degrees of freedom.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.HingeLimit">
      <summary>
            Gets the rotational limit of the hinge.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.HingeMotor">
      <summary>
            Gets the motor of the hinge.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.TwistLimit">
      <summary>
            Gets the rotational limit of the swivel hinge.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.SwivelHingeJoint.TwistMotor">
      <summary>
            Gets the twist motor of the swivel hinge.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint">
      <summary>
            Prevents the target entity from moving faster than the specified speeds.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.#ctor">
      <summary>
            Constructs a maximum speed constraint.
            Set its Entity and MaximumSpeed to complete the configuration.
            IsActive also starts as false with this constructor.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.#ctor(BEPUphysics.Entities.Entity,System.Single)">
      <summary>
            Constructs a maximum speed constraint.
            </summary>
      <param name="e">Affected entity.</param>
      <param name="maxSpeed">Maximum angular speed allowed.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.SolveIteration">
      <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.Update(System.Single)">
      <summary>
            Calculates necessary information for velocity solving.
            Called automatically by space.
            </summary>
      <param name="dt">Time in seconds since the last update.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.MaximumForce">
      <summary>
            Gets and sets the maximum impulse that the constraint will attempt to apply when satisfying its requirements.
            This field can be used to simulate friction in a constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.MaximumSpeed">
      <summary>
            Gets or sets the maximum angular speed that this constraint allows.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.Softness">
      <summary>
            Gets and sets the softness of this constraint.
            Higher values of softness allow the constraint to be violated more.
            Must be greater than zero.
            Sometimes, if a joint system is unstable, increasing the softness of the involved constraints will make it settle down.
            For motors, softness can be used to implement damping.  For a damping constant k, the appropriate softness is 1/k.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.MaximumAngularSpeedConstraint.TotalImpulse">
      <summary>
            Gets the total impulse applied by the constraint.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.JointBasis3D">
      <summary>
            Defines a three dimensional orthonormal basis used by a constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.JointBasis3D.SetLocalAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
      <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
      <param name="xAxis">Second axis in the transform.</param>
      <param name="yAxis">Third axis in the transform.</param>
      <param name="rotationMatrix">Matrix to use to transform the local axes into world space.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.JointBasis3D.SetLocalAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
      <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
      <param name="xAxis">Second axis in the transform.</param>
      <param name="yAxis">Third axis in the transform.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.JointBasis3D.SetLocalAxes(BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
      <param name="matrix">Rotation matrix representing the three axes.
            The matrix's backward vector is used as the primary axis.  
            The matrix's right vector is used as the x axis.
            The matrix's up vector is used as the y axis.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.JointBasis3D.SetWorldAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
      <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
      <param name="xAxis">Second axis in the transform.</param>
      <param name="yAxis">Third axis in the transform.</param>
      <param name="rotationMatrix">Matrix to use to transform the local axes into world space.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.JointBasis3D.SetWorldAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
      <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
      <param name="xAxis">Second axis in the transform.</param>
      <param name="yAxis">Third axis in the transform.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.JointBasis3D.SetWorldAxes(BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
      <param name="matrix">Rotation matrix representing the three axes.
            The matrix's backward vector is used as the primary axis.  
            The matrix's right vector is used as the x axis.
            The matrix's up vector is used as the y axis.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis3D.LocalPrimaryAxis">
      <summary>
            Gets the primary axis of the transform in local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis3D.LocalTransform">
      <summary>
            Gets or sets the local transform of the basis.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis3D.LocalXAxis">
      <summary>
            Gets the X axis of the transform in local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis3D.LocalYAxis">
      <summary>
            Gets the Y axis of the transform in local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis3D.PrimaryAxis">
      <summary>
            Gets the primary axis of the transform.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis3D.RotationMatrix">
      <summary>
            Gets or sets the rotation matrix used by the joint transform to convert local space axes to world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis3D.WorldTransform">
      <summary>
            Gets or sets the world transform of the basis.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis3D.XAxis">
      <summary>
            Gets the X axis of the transform.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis3D.YAxis">
      <summary>
            Gets the Y axis of the transform.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.JointBasis2D">
      <summary>
            Defines a two axes which are perpendicular to each other used by a constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.JointBasis2D.SetLocalAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
      <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
      <param name="xAxis">Second axis in the transform.</param>
      <param name="rotationMatrix">Matrix to use to transform the local axes into world space.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.JointBasis2D.SetLocalAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
      <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
      <param name="xAxis">Second axis in the transform.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.JointBasis2D.SetLocalAxes(BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
      <param name="matrix">Rotation matrix representing the three axes.
            The matrix's backward vector is used as the primary axis.  
            The matrix's right vector is used as the x axis.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.JointBasis2D.SetWorldAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
      <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
      <param name="xAxis">Second axis in the transform.</param>
      <param name="rotationMatrix">Matrix to use to transform the local axes into world space.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.JointBasis2D.SetWorldAxes(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
      <param name="primaryAxis">First axis in the transform.  Usually aligned along the main axis of a joint, like the twist axis of a TwistLimit.</param>
      <param name="xAxis">Second axis in the transform.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.JointBasis2D.SetWorldAxes(BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Sets up the axes of the transform and ensures that it is an orthonormal basis.
            </summary>
      <param name="matrix">Rotation matrix representing the three axes.
            The matrix's backward vector is used as the primary axis.  
            The matrix's right vector is used as the x axis.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis2D.LocalPrimaryAxis">
      <summary>
            Gets the primary axis of the transform in local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis2D.LocalXAxis">
      <summary>
            Gets the X axis of the transform in local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis2D.PrimaryAxis">
      <summary>
            Gets the primary axis of the transform.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis2D.RotationMatrix">
      <summary>
            Gets or sets the rotation matrix used by the joint transform to convert local space axes to world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.JointBasis2D.XAxis">
      <summary>
            Gets the X axis of the transform.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper">
      <summary>
             Helper class used to compute volume distribution information, which is in turn used to compute inertia tensor information.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.InertiaTensorScale">
      <summary>
            Value to scale any created entities' inertia tensors by.
            Larger tensors (above 1) improve stiffness of constraints and contacts, while smaller values (towards 1) are closer to 'realistic' behavior.
            If MotionUpdateSettings.padInertiaTensors is enabled, this value can be reduced significantly or all the way to 1 while maintaining fairly good behavior.
            Defaults to 2.5.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.NumberOfSamplesPerDimension">
      <summary>
             Number of samples the system takes along a side of an object's AABB when voxelizing it.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.ComputeCenter(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
      <summary>
             Computes the center of a convex shape.
            </summary>
      <param name="shape">Shape to compute the center of.</param>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.ComputeCenter(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,System.Single@)">
      <summary>
             Computes the center and volume of a convex shape.
            </summary>
      <param name="shape">Shape to compute the center of.</param>
      <param name="volume">Volume of the shape.</param>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.AveragePoints(BEPUphysics.DataStructures.RawList{Microsoft.Xna.Framework.Vector3})">
      <summary>
             Averages together all the points in the point list.
            </summary>
      <param name="pointContributions">Point list to average.</param>
      <returns>Averaged point.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.ComputeVolumeDistribution(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,System.Single@)">
      <summary>
             Computes the volume and volume distribution of a shape.
            </summary>
      <param name="shape">Shape to compute the volume information of.</param>
      <param name="volume">Volume of the shape.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.ComputeVolumeDistribution(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>
             Computes the volume and volume distribution of a shape based on a given center.
            </summary>
      <param name="shape">Shape to compute the volume information of.</param>
      <param name="center">Location to use as the center of the shape when computing the volume distribution.</param>
      <param name="volume">Volume of the shape.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.ComputeVolumeDistribution(BEPUphysics.DataStructures.RawList{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Computes a volume distribution based on a bunch of point contributions.
            </summary>
      <param name="pointContributions">Point contributions to the volume distribution.</param>
      <param name="center">Location to use as the center for purposes of computing point contributions.</param>
      <returns>Volume distribution of the point contributions.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.GetPoints(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,System.Single@,BEPUphysics.DataStructures.RawList{Microsoft.Xna.Framework.Vector3})">
      <summary>
             Gets the point contributions within a convex shape.
            </summary>
      <param name="shape">Shape to compute the point contributions of.</param>
      <param name="volume">Volume of the shape.</param>
      <param name="outputPointContributions">Point contributions of the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.InertiaHelper.GetPointContribution(System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
             Computes the volume contribution of a point.
            </summary>
      <param name="pointWeight">Weight of the point.</param>
      <param name="center">Location to use as the center for the purposes of computing the contribution.</param>
      <param name="p">Point to compute the contribution of.</param>
      <param name="contribution">Contribution of the point.</param>
    </member>
    <member name="T:BEPUphysics.Collidables.MobileCollidables.CompoundHierarchy">
      <summary>
             Hierarchy of children used to accelerate queries and tests for compound collidables.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHierarchy.#ctor(BEPUphysics.Collidables.MobileCollidables.CompoundCollidable)">
      <summary>
             Constructs a new compound hierarchy.
            </summary>
      <param name="owner">Owner of the hierarchy.</param>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundHierarchy.Tree">
      <summary>
             Gets the bounding box tree of the hierarchy.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundHierarchy.Owner">
      <summary>
             Gets the CompoundCollidable that owns this hierarchy.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold">
      <summary>
             Manages persistent contact data between two boxes.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.#ctor">
      <summary>
             Constructs a new manifold.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.Update(System.Single)">
      <summary>
             Updates the manifold.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
      <summary>
             Initializes the manifold.
            </summary>
      <param name="newCollidableA">First collidable.</param>
      <param name="newCollidableB">Second collidable.</param>
      <exception cref="T:System.Exception">Thrown when the collidables being used are not of the proper type.</exception>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.CleanUp">
      <summary>
             Cleans up the manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.CollidableA">
      <summary>
             Gets the first collidable in the pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.SphereContactManifold.CollidableB">
      <summary>
            Gets the second collidable in the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.Vehicle.WheelBrake">
      <summary>
            Attempts to resist rolling motion of a vehicle.
            </summary>
    </member>
    <member name="F:BEPUphysics.Vehicle.WheelBrake.DefaultRollingFrictionBlender">
      <summary>
            Default blender used by WheelRollingFriction constraints.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.WheelBrake.BlendFriction(System.Single,System.Single,System.Object)">
      <summary>
            Computes the friction to use between the vehicle and support for a wheel.
            </summary>
      <param name="wheelFriction">Friction coefficient of the wheel.</param>
      <param name="supportFriction">Friction coefficient of the supporting entity.</param>
      <param name="extraInfo">Any extra information to be considered.</param>
      <returns>Blended friction coefficient.</returns>
    </member>
    <member name="M:BEPUphysics.Vehicle.WheelBrake.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Constructs a new rolling friction object for a wheel.
            </summary>
      <param name="dynamicBrakingFrictionCoefficient">Coefficient of dynamic friction of the wheel for friction when the brake is active.</param>
      <param name="staticBrakingFrictionCoefficient">Coefficient of static friction of the wheel for friction when the brake is active.</param>
      <param name="rollingFrictionCoefficient">Coefficient of friction of the wheel for rolling friction when the brake isn't active.</param>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelBrake.BlendedCoefficient">
      <summary>
            Gets the coefficient of rolling friction between the wheel and support.
            This coefficient is the blended result of the supporting entity's friction and the wheel's friction.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelBrake.DynamicBrakingFrictionCoefficient">
      <summary>
            Gets or sets the coefficient of braking dynamic friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            This coefficient is used instead of the rollingFrictionCoefficient when 
            isBraking is true.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelBrake.FrictionAxis">
      <summary>
            Gets the axis along which rolling friction is applied.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelBrake.FrictionBlender">
      <summary>
            Gets or sets the function used to blend the supporting entity's friction and the wheel's friction.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelBrake.IsBraking">
      <summary>
            Gets or sets whether or not the wheel is braking.
            When set to true, the brakingFrictionCoefficient is used.
            When false, the rollingFrictionCoefficient is used.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelBrake.RollingFrictionCoefficient">
      <summary>
            Gets or sets the coefficient of rolling friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            This coefficient is used instead of the brakingFrictionCoefficient when 
            isBraking is false.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelBrake.StaticBrakingFrictionCoefficient">
      <summary>
            Gets or sets the coefficient of static dynamic friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            This coefficient is used instead of the rollingFrictionCoefficient when 
            isBraking is true.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelBrake.StaticFrictionVelocityThreshold">
      <summary>
            Gets or sets the velocity under which the coefficient of static friction will be used instead of the dynamic one.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelBrake.TotalImpulse">
      <summary>
            Gets the force 
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelBrake.Wheel">
      <summary>
            Gets the wheel that this rolling friction applies to.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelBrake.SolverSettings">
      <summary>
            Gets the solver settings used by this wheel constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelBrake.RelativeVelocity">
      <summary>
             Gets the relative velocity along the braking direction at the wheel contact.
            </summary>
    </member>
    <member name="T:BEPUphysics.Vehicle.Wheel">
      <summary>
            Supports a Vehicle.
            </summary>
    </member>
    <member name="F:BEPUphysics.Vehicle.Wheel.isActiveInSolver">
      <summary>
            Used for solver early outing.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.Wheel.#ctor(BEPUphysics.Vehicle.WheelShape)">
      <summary>
            Constructs a new wheel.
            </summary>
      <param name="shape">Shape of the wheel.</param>
    </member>
    <member name="M:BEPUphysics.Vehicle.Wheel.#ctor(BEPUphysics.Vehicle.WheelShape,BEPUphysics.Vehicle.WheelSuspension,BEPUphysics.Vehicle.WheelDrivingMotor,BEPUphysics.Vehicle.WheelBrake,BEPUphysics.Vehicle.WheelSlidingFriction)">
      <summary>
            Constructs a new wheel.
            </summary>
      <param name="shape">Shape of the wheel.</param>
      <param name="suspension">Springy support of the vehicle.</param>
      <param name="motor">Driving force for the wheel.</param>
      <param name="rollingFriction">Friction force resisting the forward and backward motion of the wheel.</param>
      <param name="slidingFriction">Friction force resisting the side to side motion of the wheel.</param>
    </member>
    <member name="M:BEPUphysics.Vehicle.Wheel.ApplyImpulse">
      <summary>
            Applies impulses and returns whether or not this wheel should be updated more.
            </summary>
      <returns>Whether not the wheel is done updating for the frame.</returns>
    </member>
    <member name="P:BEPUphysics.Vehicle.Wheel.Brake">
      <summary>
            Gets the brake for this wheel.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Wheel.DrivingMotor">
      <summary>
            Gets the motor that turns the wheel.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Wheel.HasSupport">
      <summary>
            Gets whether or not this wheel is sitting on anything.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Wheel.LocalForwardDirection">
      <summary>
            Gets or sets the local space forward direction of the wheel.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Wheel.Shape">
      <summary>
            Gets or sets the shape of this wheel used to find collisions with the ground.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Wheel.SlidingFriction">
      <summary>
            Gets the sliding friction settings for this wheel.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Wheel.SupportLocation">
      <summary>
            Gets the current support location of this wheel.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Wheel.SupportNormal">
      <summary>
            Gets the normal 
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Wheel.SupportingEntity">
      <summary>
            Gets the entity currently supporting the wheel.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Wheel.Suspension">
      <summary>
            Gets the suspension supporting this wheel.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Wheel.Vehicle">
      <summary>
            Gets the vehicle this wheel is attached to.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.Wheel.WorldForwardDirection">
      <summary>
            Gets or sets the world space forward direction of the wheel.
            </summary>
    </member>
    <member name="T:BEPUphysics.SolverSystems.Solver">
      <summary>
             Iteratively solves solver updateables, converging to a solution for simulated joints and collision pair contact constraints.
            </summary>
    </member>
    <member name="M:BEPUphysics.SolverSystems.Solver.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.DeactivationManagement.DeactivationManager)">
      <summary>
             Constructs a Solver.
            </summary>
      <param name="timeStepSettings">Time step settings used by the solver.</param>
      <param name="deactivationManager">Deactivation manager used by the solver.</param>
    </member>
    <member name="M:BEPUphysics.SolverSystems.Solver.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.DeactivationManagement.DeactivationManager,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs a Solver.
            </summary>
      <param name="timeStepSettings">Time step settings used by the solver.</param>
      <param name="deactivationManager">Deactivation manager used by the solver.</param>
      <param name="threadManager">Thread manager used by the solver.</param>
    </member>
    <member name="M:BEPUphysics.SolverSystems.Solver.Add(BEPUphysics.SolverSystems.SolverUpdateable)">
      <summary>
             Adds a solver updateable to the solver.
            </summary>
      <param name="item">Updateable to add.</param>
      <exception cref="T:System.ArgumentException">Thrown when the item already belongs to a solver.</exception>
    </member>
    <member name="M:BEPUphysics.SolverSystems.Solver.Remove(BEPUphysics.SolverSystems.SolverUpdateable)">
      <summary>
             Removes a solver updateable from the solver.
            </summary>
      <param name="item">Updateable to remove.</param>
      <exception cref="T:System.ArgumentException">Thrown when the item does not belong to the solver.</exception>
    </member>
    <member name="P:BEPUphysics.SolverSystems.Solver.IterationLimit">
      <summary>
             Gets or sets the maximum number of iterations the solver will attempt to use to solve the simulation's constraints.
            </summary>
    </member>
    <member name="P:BEPUphysics.SolverSystems.Solver.SolverUpdateables">
      <summary>
             Gets the list of solver updateables in the solver.
            </summary>
    </member>
    <member name="P:BEPUphysics.SolverSystems.Solver.TimeStepSettings">
      <summary>
             Gets or sets the time step settings used by the solver.
            </summary>
    </member>
    <member name="P:BEPUphysics.SolverSystems.Solver.DeactivationManager">
      <summary>
             Gets or sets the deactivation manager used by the solver.
             When constraints are added and removed, the deactivation manager
             gains and loses simulation island connections that affect simulation islands
             and activity states.
            </summary>
    </member>
    <member name="P:BEPUphysics.SolverSystems.Solver.PermutationIndex">
      <summary>
            Gets or sets the permutation index used by the solver.  If the simulation is restarting from a given frame,
            setting this index to be consistent is required for deterministic results.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.ForceFields.ForceFieldShape">
      <summary>
            Superclass of force field shapes that test whether or not entities are affected by a forcefield.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceFieldShape.GetPossiblyAffectedEntities">
      <summary>
            Uses an efficient query to see what entities may be affected.
            Usually uses a broadphase bounding box query.
            </summary>
      <returns>Possibly affected entities.</returns>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.ForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
      <summary>
            Performs a narrow-phase test to see if an entity is affected by the force field.
            </summary>
      <param name="entity">Entity to test.</param>
      <returns>Whether or not the entity is affected.</returns>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.ForceFields.ForceFieldShape.ForceField">
      <summary>
            Force field associated with this shape.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.ForceFields.VolumeForceFieldShape">
      <summary>
            Defines the area in which a force field works using an entity's shape.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.VolumeForceFieldShape.#ctor(BEPUphysics.UpdateableSystems.DetectorVolume)">
      <summary>
            Constructs a new force field shape using a detector volume.
            </summary>
      <param name="volume">Volume to use.</param>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.VolumeForceFieldShape.GetPossiblyAffectedEntities">
      <summary>
            Determines the possibly involved entities.
            </summary>
      <returns>Possibly involved entities.</returns>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.VolumeForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
      <summary>
            Determines if the entity is affected by the force field.
            </summary>
      <param name="testEntity">Entity to test.</param>
      <returns>Whether the entity is affected.</returns>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.ForceFields.VolumeForceFieldShape.Volume">
      <summary>
            Gets or sets the volume used by the shape.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.ForceFields.BoundingBoxForceFieldShape">
      <summary>
            Defines the area in which a force field works using an entity's shape.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.BoundingBoxForceFieldShape.#ctor(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
            Constructs a new force field shape using a bounding box.
            </summary>
      <param name="box">Bounding box to use.</param>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.BoundingBoxForceFieldShape.GetPossiblyAffectedEntities">
      <summary>
            Determines the possibly involved entities.
            </summary>
      <returns>Possibly involved entities.</returns>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.BoundingBoxForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
      <summary>
            Determines if the entity is affected by the force field.
            </summary>
      <param name="testEntity">Entity to test.</param>
      <returns>Whether the entity is affected.</returns>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.ForceFields.BoundingBoxForceFieldShape.BoundingBox">
      <summary>
            Gets or sets the bounding box used by the shape.
            </summary>
    </member>
    <member name="T:BEPUphysics.EntityStateManagement.EntityStateWriteBuffer">
      <summary>
             Buffer containing pending writes to entity states.
            </summary>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.EntityStateWriteBuffer.#ctor">
      <summary>
             Constructs the write buffer.
            </summary>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.EntityStateWriteBuffer.EnqueuePosition(BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Enqueues a change to an entity's position.
            </summary>
      <param name="entity">Entity to target.</param>
      <param name="newPosition">New position of the entity.</param>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.EntityStateWriteBuffer.EnqueueOrientation(BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
             Enqueues a change to an entity's orientation.
            </summary>
      <param name="entity">Entity to target.</param>
      <param name="newOrientationQuaternion">New orientation of the entity.</param>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.EntityStateWriteBuffer.EnqueueLinearVelocity(BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Enqueues a change to an entity's linear velocity.
            </summary>
      <param name="entity">Entity to target.</param>
      <param name="newLinearVelocity">New linear velocity of the entity.</param>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.EntityStateWriteBuffer.EnqueueAngularVelocity(BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Enqueues a change to an entity's angular velocity.
            </summary>
      <param name="entity">Entity to target.</param>
      <param name="newAngularVelocity">New angular velocity of the entity.</param>
    </member>
    <member name="T:BEPUphysics.EntityStateManagement.StateReadBuffers">
      <summary>
             Manages the buffered states of entities.
            </summary>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.StateReadBuffers.#ctor(BEPUphysics.EntityStateManagement.BufferedStatesManager)">
      <summary>
             Constructs a read buffer manager.
            </summary>
      <param name="manager">Owning buffered states manager.</param>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.StateReadBuffers.#ctor(BEPUphysics.EntityStateManagement.BufferedStatesManager,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs a read buffer manager.
            </summary>
      <param name="manager">Owning buffered states manager.</param>
      <param name="threadManager">Thread manager to use.</param>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.StateReadBuffers.FlipBuffers">
      <summary>
             Acquires a lock on the FlipLocker and forces the internal buffers to flip.
            </summary>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.StateReadBuffers.GetState(System.Int32)">
      <summary>
             Gets the state of the entity associated with the given index.
             Does not lock the FlipLocker.
            </summary>
      <param name="motionStateIndex">Index of the entity.</param>
      <returns>MotionState of the entity at the index.</returns>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.StateReadBuffers.GetStates(BEPUphysics.EntityStateManagement.MotionState[])">
      <summary>
             Gets the states of all entities atomically.
            </summary>
      <param name="states">Entity states.</param>
      <exception cref="T:System.InvalidOperationException">Thrown when the array is too small.</exception>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.StateReadBuffers.Enabled">
      <summary>
             Gets or sets whether or not the buffers are active.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown if the read buffers are disabled while the interpolated states are enabled.</exception>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.StateReadBuffers.FlipLocker">
      <summary>
             Gets the synchronization object which is locked during internal buffer flips.
             Acquiring a lock on this object will prevent the manager from flipping the buffers
             for the duration of the lock.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.CompoundShapeEntry">
      <summary>
             Contains a shape and its local transform relative to its owning compound shape.
             This is used to construct compound shapes.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.CompoundShapeEntry.LocalTransform">
      <summary>
             Local transform of the shape relative to its owning compound shape.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.CompoundShapeEntry.Shape">
      <summary>
            Shape used by the compound.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.CompoundShapeEntry.Weight">
      <summary>
            Weight of the entry.  This defines how much the entry contributes to its owner
            for the purposes of center of rotation computation.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,BEPUphysics.MathExtensions.RigidTransform,System.Single)">
      <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
      <param name="shape">Shape to use.</param>
      <param name="localTransform">Local transform of the shape.</param>
      <param name="weight">Weight of the entry.  This defines how much the entry contributes to its owner
             for the purposes of center of rotation computation.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
      <param name="shape">Shape to use.</param>
      <param name="position">Local position of the shape.</param>
      <param name="weight">Weight of the entry.  This defines how much the entry contributes to its owner
             for the purposes of center of mass and inertia computation.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
      <param name="shape">Shape to use.</param>
      <param name="orientation">Local orientation of the shape.</param>
      <param name="weight">Weight of the entry.  This defines how much the entry contributes to its owner
             for the purposes of center of rotation computation.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single)">
      <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
      <param name="shape">Shape to use.</param>
      <param name="weight">Weight of the entry.  This defines how much the entry contributes to its owner
             for the purposes of center of rotation computation.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,BEPUphysics.MathExtensions.RigidTransform)">
      <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
      <param name="shape">Shape to use.</param>
      <param name="localTransform">Local transform of the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,Microsoft.Xna.Framework.Vector3)">
      <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
      <param name="shape">Shape to use.</param>
      <param name="position">Local position of the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape,Microsoft.Xna.Framework.Quaternion)">
      <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
      <param name="shape">Shape to use.</param>
      <param name="orientation">Local orientation of the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShapeEntry.#ctor(BEPUphysics.CollisionShapes.EntityShape)">
      <summary>
             Constructs a new compound shape entry using the volume of the shape as a weight.
            </summary>
      <param name="shape">Shape to use.</param>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.CompoundShape">
      <summary>
             Shape composed of multiple other shapes.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.CompoundShapeEntry},Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Constructs a compound shape.
            </summary>
      <param name="shapes">Shape entries used to create the compound.</param>
      <param name="center">Computed center of the compound shape, using the entry weights.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.CompoundShapeEntry})">
      <summary>
             Constructs a compound shape.
            </summary>
      <param name="shapes">Shape entries used to create the compound.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeCenter">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass, based on the weightings of entries in the shape.
            For properly calibrated compound shapes, this will return a zero vector,
            since the shape recenters itself on construction.
            </summary>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeCenter(System.Collections.Generic.IList{BEPUphysics.Collidables.MobileCollidables.CompoundChildData})">
      <summary>
             Computes the center of a compound using its child data.
             Children are weighted using their volumes for contribution to the center of 'mass.'
            </summary>
      <param name="childData">Child data to use to compute the center.</param>
      <returns>Center of the children.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeCenter(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.CompoundShapeEntry})">
      <summary>
             Computes the center of a compound using its child data.
             Children are weighted using their volumes for contribution to the center of 'mass.'
            </summary>
      <param name="childData">Child data to use to compute the center.</param>
      <returns>Center of the children.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeVolume">
      <summary>
            Computes the volume of the shape.
            </summary>
      <returns>Volume of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeVolumeDistribution(System.Single@)">
      <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeVolumeDistribution">
      <summary>
            Computes the volume distribution of the shape.
            </summary>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeVolumeDistribution(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.CompoundShapeEntry},Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Computes the volume distribution and center of the shape.
            </summary>
      <param name="entries">Mass-weighted entries of the compound.</param>
      <param name="center">Center of the compound.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.GetContribution(BEPUphysics.CollisionShapes.EntityShape,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
             Gets the volume distribution contributed by a single shape.
            </summary>
      <param name="shape">Shape to use to compute a contribution.</param>
      <param name="transform">Transform of the shape.</param>
      <param name="center">Center to use when computing the distribution.</param>
      <param name="weight">Weighting to apply to the contribution.</param>
      <param name="contribution">Volume distribution of the contribution.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.TransformContribution(BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@,System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Modifies a contribution using a transform, position, and weight.
            </summary>
      <param name="transform">Transform to use to modify the contribution.</param>
      <param name="center">Center to use to modify the contribution.</param>
      <param name="baseContribution">Original unmodified contribution.</param>
      <param name="weight">Weight of the contribution.</param>
      <param name="contribution">Transformed contribution.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.GetCollidableInstance">
      <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
      <returns>EntityCollidable that uses this shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeCenter(System.Single@)">
      <summary>
            Computes the center of the shape and its volume.
            </summary>
      <param name="volume">Volume of the compound.</param>
      <returns>Volume of the compound.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeDistributionInformation(BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
      <summary>
            Computes a variety of shape information all at once.
            </summary>
      <param name="shapeInfo">Properties of the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.CompoundShape.ComputeChildContributions">
      <summary>
            Computes and returns the volume, volume distribution, and center contributions from each child shape in the compound shape.
            </summary>
      <returns>Volume, volume distribution, and center contributions from each child shape in the compound shape.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.CompoundShape.Shapes">
      <summary>
             Gets the list of shapes in the compound shape.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.InstancedMeshConvexPairHandler">
      <summary>
             Handles a instanced mesh-convex collision pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshSpherePairHandler">
      <summary>
             Handles a static mesh-sphere collision pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation">
      <summary>
             Contact and some associated data used by the convenience ContactCollection.
            </summary>
    </member>
    <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation.Contact">
      <summary>
            Contact point in the pair.
            </summary>
    </member>
    <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation.Pair">
      <summary>
            Pair that most directly generated the contact.
            The pair may have parents, accessible through the pair's Parent property.
            </summary>
    </member>
    <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation.NormalForce">
      <summary>
            Normal force applied between the objects at the contact point.
            </summary>
    </member>
    <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation.FrictionForce">
      <summary>
            Friction force applied between the objects at the contact point.
            This is sometimes an approximation due to the varying ways in which
            friction is calculated.
            </summary>
    </member>
    <member name="F:BEPUphysics.NarrowPhaseSystems.Pairs.ContactInformation.RelativeVelocity">
      <summary>
             Relative velocity of the colliding objects at the position of the contact.
            </summary>
    </member>
    <member name="T:BEPUphysics.DeactivationManagement.SimulationIslandConnection">
      <summary>
            Connects simulation island members together.
            </summary>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandConnection.AddReferencesToConnectedMembers">
      <summary>
            Adds the connection to the connected members.
            </summary>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.SimulationIslandConnection.RemoveReferencesFromConnectedMembers">
      <summary>
            Removes the connection from the connected members.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandConnection.Members">
      <summary>
            Gets a list of members connected by the connection.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandConnection.Owner">
      <summary>
            Gets or sets the owner of the connection.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandConnection.SlatedForRemoval">
      <summary>
            Gets whether or not this connection is going to be removed
            by the next DeactivationManager stage run.  Connections
            slated for removal should not be considered to be part of
            a member's 'real' connections.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIslandConnection.DeactivationManager">
      <summary>
            Gets or sets the deactivation manager that owns the connection.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.MotorMode">
      <summary>
            Defines the behavior style of a motor.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.MotorMode.VelocityMotor">
      <summary>
            Velocity motors only work to try to reach some relative velocity.
            They have no position goal.
            
            When this type is selected, the motor settings' velocityMotor data will be used.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.MotorMode.Servomechanism">
      <summary>
            Servomechanisms change their velocity in order to reach some position goal.
            
            When this type is selected, the motor settings' servo data will be used.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings">
      <summary>
            Contains genereal settings for motors.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings.MaximumForce">
      <summary>
            Gets and sets the maximum impulse that the constraint will attempt to apply when satisfying its requirements.
            This field can be used to simulate friction in a constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings.Mode">
      <summary>
            Gets or sets what kind of motor this is.
            
            If velocityMotor is chosen, the motor will try to achieve some velocity using the VelocityMotorSettings.
            If servomechanism is chosen, the motor will try to reach some position using the ServoSettings.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings1D">
      <summary>
            Contains settings for motors which act on one degree of freedom.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings1D.Servo">
      <summary>
            Gets the settings that govern the behavior of this motor if it is a servomechanism.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings1D.VelocityMotor">
      <summary>
            Gets the settings that govern the behavior of this motor if it is a velocity motor.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings3D">
      <summary>
            Contains settings for motors which act on three degrees of freedom.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings3D.Servo">
      <summary>
            Gets the settings that govern the behavior of this motor if it is a servomechanism.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettings3D.VelocityMotor">
      <summary>
            Gets the settings that govern the behavior of this motor if it is a velocity motor.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettingsOrientation">
      <summary>
            Contains settings for motors which act on two entities' relative orientation.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettingsOrientation.Servo">
      <summary>
            Gets the settings that govern the behavior of this motor if it is a servomechanism.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.MotorSettingsOrientation.VelocityMotor">
      <summary>
            Gets the settings that govern the behavior of this motor if it is a velocity motor.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings">
      <summary>
            Defines the behavior of a servo.
            Used when the MotorSettings' motorType is set to servomechanism.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.baseCorrectiveSpeed">
      <summary>
            Speed at which the servo will try to achieve its goal.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.maxCorrectiveVelocity">
      <summary>
            Maximum extra velocity that the constraint will apply in an effort to correct constraint error.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.maxCorrectiveVelocitySquared">
      <summary>
            Squared maximum extra velocity that the constraint will apply in an effort to correct constraint error.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.springSettings">
      <summary>
            Spring settings define how a constraint responds to velocity and position error.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.BaseCorrectiveSpeed">
      <summary>
            Gets and sets the speed at which the servo will try to achieve its goal.
            This is inactive if the constraint is not in servo mode.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.MaxCorrectiveVelocity">
      <summary>
            Gets or sets the maximum extra velocity that the constraint will apply in an effort to correct any constraint error.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings.SpringSettings">
      <summary>
            Gets the spring settings used by the constraint.
            Spring settings define how a constraint responds to velocity and position error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings1D">
      <summary>
            Defines the behavior of a servo that works on one degree of freedom.
            Used when the MotorSettings' motorType is set to servomechanism.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings1D.Goal">
      <summary>
            Gets or sets the goal position of the servo.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings3D">
      <summary>
            Defines the behavior of a servo that works on three degrees of freedom.
            Used when the MotorSettings' motorType is set to servomechanism.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettings3D.Goal">
      <summary>
            Gets or sets the goal position of the servo.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettingsOrientation">
      <summary>
            Defines the behavior of a servo that works on the relative orientation of two entities.
            Used when the MotorSettings' motorType is set to servomechanism.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.ServoSettingsOrientation.Goal">
      <summary>
            Gets or sets the goal orientation of the servo.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings">
      <summary>
            Defines the behavior of a velocity motor.
            Used when the MotorSettings' motorType is set to velocityMotor.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings.softness">
      <summary>
            Softness of this constraint.
            Higher values of softness allow the constraint to be violated more.
            Must be greater than zero.
            Sometimes, if a joint system is unstable, increasing the softness of the involved constraints will make it settle down.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings.Softness">
      <summary>
            Gets and sets the softness of this constraint.
            Higher values of softness allow the constraint to be violated more.
            Must be greater than zero.
            Sometimes, if a joint system is unstable, increasing the softness of the involved constraints will make it settle down.
            For motors, softness can be used to implement damping.  For a damping constant k, the appropriate softness is 1/k.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings1D">
      <summary>
            Defines the behavior of a velocity motor that works on one degree of freedom.
            Used when the MotorSettings' motorType is set to velocityMotor.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings1D.GoalVelocity">
      <summary>
            Gets or sets the goal velocity of the motor.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings3D">
      <summary>
            Defines the behavior of a velocity motor that works on three degrees of freedom.
            Used when the MotorSettings' motorType is set to velocityMotor.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.VelocityMotorSettings3D.GoalVelocity">
      <summary>
            Gets or sets the goal position of the servo.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor">
      <summary>
            Constrains anchors on two entities to move relative to each other on a line.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.#ctor">
      <summary>
            Constrains anchors on two entities to move relative to each other on a line.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the AnchorA, AnchorB and the Axis (or their entity-local versions).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constrains anchors on two entities to move relative to each other on a line.
            </summary>
      <param name="connectionA">First connection of the pair.</param>
      <param name="connectionB">Second connection of the pair.</param>
      <param name="anchorA">World space point to attach to connection A that will be constrained.</param>
      <param name="anchorB">World space point to attach to connection B that will be constrained.</param>
      <param name="axis">Limited axis in world space to attach to connection A.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.AnchorA">
      <summary>
            Gets or sets the anchor point attached to entity A in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.AnchorB">
      <summary>
            Gets or sets the anchor point attached to entity A in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.Axis">
      <summary>
            Gets or sets the motorized axis in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.LocalAxis">
      <summary>
            Gets or sets the limited axis in the local space of connection A.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.LocalOffsetA">
      <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in its local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.LocalOffsetB">
      <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in its local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.OffsetA">
      <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.OffsetB">
      <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.Settings">
      <summary>
            Gets the motor's velocity and servo settings.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.LinearAxisMotor.Error">
      <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, the error will be zero.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SolverGroups.RevoluteJoint">
      <summary>
            Restricts linear motion while allowing one degree of angular freedom.
            Acts like a normal door hinge.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.RevoluteJoint.#ctor">
      <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and two degrees of angular freedom between two entities.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.RevoluteJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new constraint which restricts three degrees of linear freedom and two degrees of angular freedom between two entities.
            </summary>
      <param name="connectionA">First entity of the constraint pair.</param>
      <param name="connectionB">Second entity of the constraint pair.</param>
      <param name="anchor">Point around which both entities rotate.</param>
      <param name="freeAxis">Axis around which the hinge can rotate.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.RevoluteJoint.AngularJoint">
      <summary>
            Gets the angular joint which removes two degrees of freedom.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.RevoluteJoint.BallSocketJoint">
      <summary>
            Gets the ball socket joint that restricts linear degrees of freedom.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.RevoluteJoint.Limit">
      <summary>
            Gets the rotational limit of the hinge.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.RevoluteJoint.Motor">
      <summary>
            Gets the motor of the hinge.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry">
      <summary>
             A shape associated with an orientation.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry.CollisionShape">
      <summary>
             The entry's shape.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry.Orientation">
      <summary>
             The entry's orientation.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry.#ctor(Microsoft.Xna.Framework.Quaternion,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
      <summary>
             Constructs a new entry.
            </summary>
      <param name="orientation">Orientation of the entry.</param>
      <param name="shape">Shape of the entry.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
      <summary>
             Constructs a new entry with identity orientation.
            </summary>
      <param name="shape">Shape of the entry.</param>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape">
      <summary>
             A shape composed of the pointwise summation of all points in child shapes.
             For example, the minkowski sum of two spheres would be a sphere with the radius of both spheres combined.
             The minkowski sum of a box and a sphere would be a rounded box.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Constructs a minkowski sum shape.
            A minkowski sum can be created from more than two objects; use the other constructors.
            The sum will be recentered on its local origin.
            </summary>
      <param name="firstShape">First entry in the sum.</param>
      <param name="secondShape">Second entry in the sum.</param>
      <param name="center">Center of the minkowski sum computed pre-recentering.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry},Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Constructs a minkowski sum shape.
            The sum will be recentered on its local origin.
            </summary>
      <param name="shapeEntries">Entries composing the minkowski sum.</param>
      <param name="center">Center of the minkowski sum computed pre-recentering.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry)">
      <summary>
            Constructs a minkowski sum shape.
            A minkowski sum can be created from more than two objects; use the other constructors.
            The sum will be recentered on its local origin.  The computed center is outputted by the other constructor.
            </summary>
      <param name="firstShape">First entry in the sum.</param>
      <param name="secondShape">Second entry in the sum.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry})">
      <summary>
            Constructs a minkowski sum shape.
            The sum will be recentered on its local origin.  The computed center is outputted by the other constructor.
            </summary>
      <param name="shapeEntries">Entries composing the minkowski sum.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.GetLocalExtremePointWithoutMargin(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.ComputeMinimumRadius">
      <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
      <returns>Minimum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.ComputeMaximumRadius">
      <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
      <returns>Maximum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.GetCollidableInstance">
      <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
      <returns>EntityCollidable that uses this shape.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.Shapes">
      <summary>
             Gets the list of shapes in the minkowski sum.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.MinkowskiSumShape.LocalOffset">
      <summary>
             Gets the local offset of the elements in the minkowski sum.
             This is required because convex shapes need to be centered on their local origin.
            </summary>
    </member>
    <member name="T:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchy">
      <summary>
            Broad phase that incrementally updates the internal tree acceleration structure.
            </summary>
      <remarks>
            This is a good all-around broad phase; its performance is consistent and all queries are supported and speedy.
            The memory usage is higher than simple one-axis sort and sweep, but a bit lower than the Grid2DSortAndSweep option.
            </remarks>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchy.#ctor">
      <summary>
            Constructs a new dynamic hierarchy broad phase.
            </summary>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchy.#ctor(BEPUphysics.Threading.IThreadManager)">
      <summary>
            Constructs a new dynamic hierarchy broad phase.
            </summary>
      <param name="threadManager">Thread manager to use in the broad phase.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchy.Add(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Adds an entry to the hierarchy.
            </summary>
      <param name="entry">Entry to remove.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.Hierarchies.DynamicHierarchy.Remove(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Removes an entry from the hierarchy.
            </summary>
      <param name="entry">Entry to remove.</param>
    </member>
    <member name="T:BEPUphysics.Vehicle.WheelDrivingMotor">
      <summary>
            Handles a wheel's driving force for a vehicle.
            </summary>
    </member>
    <member name="F:BEPUphysics.Vehicle.WheelDrivingMotor.DefaultGripFrictionBlender">
      <summary>
            Default blender used by WheelSlidingFriction constraints.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.WheelDrivingMotor.BlendFriction(System.Single,System.Single,System.Object)">
      <summary>
            Computes the friction to use between the vehicle and support for a wheel.
            </summary>
      <param name="wheelFriction">Friction coefficient of the wheel.</param>
      <param name="supportFriction">Friction coefficient of the supporting entity.</param>
      <param name="extraInfo">Any extra information to be considered.</param>
      <returns>Blended friction coefficient.</returns>
    </member>
    <member name="M:BEPUphysics.Vehicle.WheelDrivingMotor.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Constructs a new wheel motor.
            </summary>
      <param name="gripFriction">Friction coefficient of the wheel.  Blended with the ground's friction coefficient and normal force to determine a maximum force.</param>
      <param name="maximumForwardForce">Maximum force that the wheel motor can apply when driving forward (a target speed greater than zero).</param>
      <param name="maximumBackwardForce">Maximum force that the wheel motor can apply when driving backward (a target speed less than zero).</param>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.BlendedCoefficient">
      <summary>
            Gets the coefficient of grip friction between the wheel and support.
            This coefficient is the blended result of the supporting entity's friction and the wheel's friction.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.ForceAxis">
      <summary>
            Gets the axis along which the driving forces are applied.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.GripFriction">
      <summary>
            Gets or sets the coefficient of forward-backward gripping friction for this wheel.
            This coefficient and the supporting entity's coefficient of friction will be 
            taken into account to determine the used coefficient at any given time.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.GripFrictionBlender">
      <summary>
            Gets or sets the function used to blend the supporting entity's friction and the wheel's friction.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.MaximumBackwardForce">
      <summary>
            Gets or sets the maximum force that the wheel motor can apply when driving backward (a target speed less than zero).
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.MaximumForwardForce">
      <summary>
            Gets or sets the maximum force that the wheel motor can apply when driving forward (a target speed greater than zero).
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.TargetSpeed">
      <summary>
            Gets or sets the target speed of this wheel.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.TotalImpulse">
      <summary>
            Gets the force this wheel's motor is applying.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.Wheel">
      <summary>
            Gets the wheel that this motor applies to.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.SolverSettings">
      <summary>
            Gets the solver settings used by this wheel constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelDrivingMotor.RelativeVelocity">
      <summary>
            Gets the relative velocity between the ground and wheel.
            </summary>
      <returns>Relative velocity between the ground and wheel.</returns>
    </member>
    <member name="T:BEPUphysics.OtherSpaceStages.SpaceObjectBuffer">
      <summary>
             Thead-safely buffers up space objects for addition and removal.
            </summary>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.SpaceObjectBuffer.#ctor(BEPUphysics.ISpace)">
      <summary>
             Constructs the buffer.
            </summary>
      <param name="space">Space that owns the buffer.</param>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.SpaceObjectBuffer.Add(BEPUphysics.ISpaceObject)">
      <summary>
             Adds a space object to the buffer.
             It will be added to the space the next time the buffer is flushed.
            </summary>
      <param name="spaceObject">Space object to add.</param>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.SpaceObjectBuffer.Remove(BEPUphysics.ISpaceObject)">
      <summary>
            Enqueues a removal request to the buffer.
            It will be processed the next time the buffer is flushed.
            </summary>
      <param name="spaceObject">Space object to remove.</param>
    </member>
    <member name="P:BEPUphysics.OtherSpaceStages.SpaceObjectBuffer.Space">
      <summary>
             Gets the space which owns this buffer.
            </summary>
    </member>
    <member name="T:BEPUphysics.Materials.Material">
      <summary>
             Material properties for collidable objects.
            </summary>
    </member>
    <member name="M:BEPUphysics.Materials.Material.#ctor">
      <summary>
             Constructs a new material.
            </summary>
    </member>
    <member name="M:BEPUphysics.Materials.Material.#ctor(System.Single,System.Single,System.Single)">
      <summary>
             Constructs a new material.
            </summary>
      <param name="staticFriction">Static friction to use.</param>
      <param name="kineticFriction">Kinetic friction to use.</param>
      <param name="bounciness">Bounciness to use.</param>
    </member>
    <member name="M:BEPUphysics.Materials.Material.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:BEPUphysics.Materials.Material.KineticFriction">
      <summary>
             Gets or sets the friction coefficient used when the object is sliding quickly and
             no special material relationship is defined between the colliding objects.
            </summary>
    </member>
    <member name="P:BEPUphysics.Materials.Material.StaticFriction">
      <summary>
             Gets or sets the friction coefficient used when the object is sliding slowly and
             no special material relationship is defined between the colliding objects.
            </summary>
    </member>
    <member name="P:BEPUphysics.Materials.Material.Bounciness">
      <summary>
             Gets or sets the coefficient of restitution between the objects when
             no special material relationship is defined between the colliding objects.
            </summary>
    </member>
    <member name="P:BEPUphysics.Materials.Material.Tag">
      <summary>
             Gets or sets user data associated with the material.
            </summary>
    </member>
    <member name="E:BEPUphysics.Materials.Material.MaterialChanged">
      <summary>
             Fires when the material properties change.
            </summary>
    </member>
    <member name="T:BEPUphysics.DataStructures.TinyList`1">
      <summary>
            Special datatype used for heapless lists without unsafe/stackalloc.
            Designed for object types or reference-sized structs (int, float...).
            Stores a maximum of 8 entries.
            </summary>
      <typeparam name="T">Struct type to use.</typeparam>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyList`1.ToString">
      <summary>
            Creates a string representation of the list.
            </summary>
      <returns>String representation of the list.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyList`1.Add(`0)">
      <summary>
            Tries to add an element to the list.
            </summary>
      <param name="item">Item to add.</param>
      <returns>Whether or not the item could be added.
            Will return false when the list is full.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyList`1.Clear">
      <summary>
            Clears the list.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyList`1.IndexOf(`0)">
      <summary>
            Gets the index of the item in the list, if it is present.
            </summary>
      <param name="item">Item to look for.</param>
      <returns>Index of the item, if present.  -1 otherwise.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyList`1.Remove(`0)">
      <summary>
            Tries to remove an element from the list.
            </summary>
      <param name="item">Item to remove.</param>
      <returns>Whether or not the item existed in the list.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyList`1.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">Index of the element to remove.</param>
      <returns>Whether or not the item could be removed.
            Returns false if the index is out of bounds.</returns>
    </member>
    <member name="P:BEPUphysics.DataStructures.TinyList`1.Count">
      <summary>
            Gets the current number of elements in the list.
            </summary>
    </member>
    <member name="P:BEPUphysics.DataStructures.TinyList`1.Item(System.Int32)">
      <summary>
            Gets the item at the specified index.
            </summary>
      <param name="index">Index to retrieve.</param>
      <returns>Retrieved item.</returns>
    </member>
    <member name="T:BEPUphysics.DataStructures.ReadOnlyEnumerable`1">
      <summary>
             WRaps an enumerable in a temporary enumeration struct.
            </summary>
      <typeparam name="T">Type of the enumerable being iterated.</typeparam>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
             Constructs a new read only enumerable.
            </summary>
      <param name="enumerable">Enumerable to wrap.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:BEPUphysics.DataStructures.ReadOnlyDictionary`2">
      <summary>
             Wraps a dictionary in a read only collection.
            </summary>
      <typeparam name="TKey">Type of keys in the dictionary.</typeparam>
      <typeparam name="TValue">Type of values in the dictionary.</typeparam>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
            Constructs a new read-only wrapper dictionary.
            </summary>
      <param name="dictionary">Internal dictionary to use.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
            Determines if the dictionary contains a key-value pair.
            </summary>
      <param name="item">Key-value pair to look for.</param>
      <returns>Whether or not the key-value pair is present.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>
            Determines if the dictionary contains a given key.
            </summary>
      <param name="key">Key to check for.</param>
      <returns>Whether or not the key is contained.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
            Copies the key-value pairs of the dictionary into an array.
            </summary>
      <param name="array">Target array.</param>
      <param name="arrayIndex">The zero-based index at which copying begins.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>
            Tries to retrieve a value from the dictionary using a key.
            </summary>
      <param name="key">Key to look for.</param>
      <param name="value">Value associated with the key.</param>
      <returns>Whether or not the key exists.</returns>
    </member>
    <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Count">
      <summary>
            Gets the number of elements in the dictionary.
            </summary>
    </member>
    <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.IsReadOnly">
      <summary>
            Gets whether or not this dictionary is read-only.
            </summary>
    </member>
    <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Item(`0)">
      <summary>
            Gets the value associated with the key in the dictionary.
            </summary>
      <param name="key">Key to look for in the dictionary.</param>
      <returns>Value associated with the key.</returns>
    </member>
    <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Keys">
      <summary>
            Gets an enumerable set of keys in the dictionary.
            </summary>
    </member>
    <member name="P:BEPUphysics.DataStructures.ReadOnlyDictionary`2.Values">
      <summary>
            Gets an enumerable set of values in the dictionary.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex">
      <summary>
             GJK simplex supporting boolean intersection tests.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.A">
      <summary>
             First vertex of the simplex.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.B">
      <summary>
             Second vertex of the simplex.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.C">
      <summary>
             Third vertex of the simplex.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.D">
      <summary>
             Fourth vertex of the simplex.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.State">
      <summary>
             Current state of the simplex.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.GetPointClosestToOrigin(Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the point on the simplex closest to the origin.
            </summary>
      <param name="point">Closest point to the origin.</param>
      <returns>Whether or not the simplex encloses the origin.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.GetPointOnSegmentClosestToOrigin(Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the closest point on the segment to the origin.
            </summary>
      <param name="point">Closest point.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.GetPointOnTriangleClosestToOrigin(Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the closest point on the triangle to the origin.
            </summary>
      <param name="point">Closest point.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.GetPointOnTetrahedronClosestToOrigin(Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the closest point on the tetrahedron to the origin.
            </summary>
      <param name="point">Closest point.</param>
      <returns>Whether or not the simplex encloses the origin.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.AddNewSimplexPoint(Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Adds a new point to the simplex.
            </summary>
      <param name="point">Point to add.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimpleSimplex.GetErrorTolerance">
      <summary>
             Gets the error tolerance of the simplex.
            </summary>
      <returns>Error tolerance of the simplex.</returns>
    </member>
    <member name="T:BEPUphysics.EntityStateManagement.BufferedStatesManager">
      <summary>
             Manages the buffered and interpolated states of entities.
            </summary>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.BufferedStatesManager.#ctor">
      <summary>
             Constructs a new manager.
            </summary>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.BufferedStatesManager.#ctor(BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs a new manager.
            </summary>
      <param name="threadManager">Thread manager to be used by the manager.</param>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.BufferedStatesManager.Add(BEPUphysics.Entities.Entity)">
      <summary>
             Adds an entity to the manager.
            </summary>
      <param name="e">Entity to add.</param>
      <exception cref="T:System.InvalidOperationException">Thrown if the entity already belongs to a states manager.</exception>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.BufferedStatesManager.Remove(BEPUphysics.Entities.Entity)">
      <summary>
             Removes an entity from the manager.
            </summary>
      <param name="e">Entity to remove.</param>
      <exception cref="T:System.InvalidOperationException">Thrown if the entity does not belong to this manager.</exception>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesManager.ReadBuffers">
      <summary>
             Gets the buffers of last known entity states.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesManager.InterpolatedStates">
      <summary>
             Gets the entity states blended between the current frame and previous frame based on
             the time remaining in internal time stepping.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesManager.Entities">
      <summary>
             Gets the list of entities in the manager.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesManager.Enabled">
      <summary>
             Gets or sets whether or not the buffered states manager and its submanagers are updating.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Factories">
      <summary>
            Contains the various factories that are used by default in the engine.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Factories.#ctor">
      <summary>
            Constructs all factories.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.BoxBox">
      <summary>
            Gets the factory for the box-box case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.BoxSphere">
      <summary>
            Gets the factory for the box-sphere case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.SphereSphere">
      <summary>
            Gets the factory for the sphere-sphere case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.ConvexConvex">
      <summary>
            Gets the factory for the convex-convex case.  This works for any two convexes, though some other special cases (e.g. box-box) supersede it.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.TriangleConvex">
      <summary>
            Gets the factory for the triangle-convex case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.CompoundConvex">
      <summary>
            Gets the factory for the compound-convex case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.CompoundCompound">
      <summary>
            Gets the factory for the compound-compound case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.CompoundStaticMesh">
      <summary>
            Gets the factory for the compound-static mesh case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.CompoundTerrain">
      <summary>
            Gets the factory for the compound-terrain case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.CompoundInstancedMesh">
      <summary>
            Gets the factory for the compound-instanced mesh case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.CompoundMobileMesh">
      <summary>
            Gets the factory for the compound-mobile mesh case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.StaticMeshConvex">
      <summary>
            Gets the factory for the static mesh-convex case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.StaticMeshSphere">
      <summary>
            Gets the factory for the static mesh-sphere case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.TerrainConvex">
      <summary>
            Gets the factory for the terrain-convex case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.TerrainSphere">
      <summary>
            Gets the factory for the terrain-sphere case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.InstancedMeshConvex">
      <summary>
            Gets the factory for the instanced mesh-convex case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.InstancedMeshSphere">
      <summary>
            Gets the factory for the instanced mesh-sphere case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshConvex">
      <summary>
            Gets the factory for the mobile mesh-convex case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshSphere">
      <summary>
            Gets the factory for the mobile mesh-sphere case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshTriangle">
      <summary>
            Gets the factory for the mobile mesh-triangle case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshStaticMesh">
      <summary>
            Gets the factory for the mobile mesh-static mesh case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshInstancedMesh">
      <summary>
            Gets the factory for the mobile mesh-instanced mesh case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshTerrain">
      <summary>
            Gets the factory for the mobile mesh-terrain case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.MobileMeshMobileMesh">
      <summary>
            Gets the factory for the mobile mesh-mobile mesh case.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Factories.All">
      <summary>
            Gets a collection of all the default factories.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper">
      <summary>
             Contains the collision managers dictionary and other helper methods for creating pairs.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.GetPair(BEPUphysics.BroadPhaseSystems.BroadPhaseOverlap@)">
      <summary>
             Gets a narrow phase pair for a given broad phase overlap.
            </summary>
      <param name="pair">Overlap to use to create the pair.</param>
      <returns>A INarrowPhasePair for the overlap.</returns>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.GetPair(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.CollisionRuleManagement.CollisionRule)">
      <summary>
             Gets a narrow phase pair for a given pair of entries.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
      <param name="rule">Collision rule governing the pair.</param>
      <returns>A INarrowPhasePair for the overlap.</returns>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.GetPair(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Gets a narrow phase pair for a given pair of entries.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
      <returns>A INarrowPhasePair for the overlap.</returns>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.GetPairHandler(BEPUphysics.Collidables.CollidablePair@,BEPUphysics.CollisionRuleManagement.CollisionRule)">
      <summary>
            Gets a collidable pair handler for a pair of collidables.
            </summary>
      <param name="pair">Pair of collidables to use to create the pair handler.</param>
      <param name="rule">Collision rule governing the pair.</param>
      <returns>CollidablePairHandler for the pair.</returns>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.GetPairHandler(BEPUphysics.Collidables.CollidablePair@)">
      <summary>
            Gets a collidable pair handler for a pair of collidables.
            </summary>
      <param name="pair">Pair of collidables to use to create the pair handler.</param>
      <returns>CollidablePairHandler for the pair.</returns>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.Intersecting(BEPUphysics.Collidables.CollidablePair@)">
      <summary>
            Tests the pair of collidables for intersection without regard for collision rules.
            </summary>
      <param name="pair">Pair to test.</param>
      <returns>Whether or not the pair is intersecting.</returns>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.Factories">
      <summary>
            Gets the factories used by default to construct various pair types in the narrow phase.
            These do not necessarily reflect the state of the narrow phase helper's CollisionManagers dictionary
            if changes are made to its entries.
            </summary>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.NarrowPhaseHelper.CollisionManagers">
      <summary>
             Gets or sets the dictionary that defines the factory to use for various type pairs.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshSpherePairHandler">
      <summary>
             Handles a mobile mesh-sphere collision pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit">
      <summary>
            Keeps the angle between the axes attached to two entities below some maximum value.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.#ctor">
      <summary>
            Constructs a new constraint which attempts to restrict the maximum relative angle of two entities to some value.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the WorldAxisA, WorldAxisB (or their entity-local versions) and the MaximumAngle.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Constructs a new constraint which attempts to restrict the maximum relative angle of two entities to some value.
            </summary>
      <param name="connectionA">First connection of the pair.</param>
      <param name="connectionB">Second connection of the pair.</param>
      <param name="axisA">Axis attached to the first connected entity.</param>
      <param name="axisB">Axis attached to the second connected entity.</param>
      <param name="maximumAngle">Maximum angle between the axes allowed.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.SolveIteration">
      <summary>
            Applies the sequential impulse.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.Update(System.Single)">
      <summary>
            Initializes the constraint for this frame.
            </summary>
      <param name="dt">Time since the last frame.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.LocalAxisA">
      <summary>
            Gets or sets the axis attached to the first connected entity in its local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.LocalAxisB">
      <summary>
            Gets or sets the axis attached to the first connected entity in its local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.MaximumAngle">
      <summary>
            Maximum angle allowed between the two axes, from 0 to pi.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.WorldAxisA">
      <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.WorldAxisB">
      <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.SwingLimit.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SolverGroups.CustomizableSolverGroup">
      <summary>
            Constraint made from other constraints.
            Putting constraints into a solver group can help with organization and, in some cases, performance.
            
            If you have multiple constraints between the same two entities, putting the constraints into a 
            CustomizableSolverGroup can lower lock contention.
            
            Be careful about overloading a single solvergroup; it should be kept relatively small to ensure that the multithreading loads stay balanced.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.CustomizableSolverGroup.Add(BEPUphysics.Constraints.EntitySolverUpdateable)">
      <summary>
            Adds a new solver updateable to the solver group.
            </summary>
      <param name="solverUpdateable">Solver updateable to add.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.CustomizableSolverGroup.Remove(BEPUphysics.Constraints.EntitySolverUpdateable)">
      <summary>
            Removes a solver updateable from the solver group.
            </summary>
      <param name="solverUpdateable">Solver updateable to remove.</param>
    </member>
    <member name="T:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint">
      <summary>
            Computes the forces necessary to keep two entities from going through each other at a contact point.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.#ctor">
      <summary>
             Constructs a new penetration constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.Setup(BEPUphysics.Constraints.Collision.ContactManifoldConstraint,BEPUphysics.CollisionTests.Contact)">
      <summary>
             Configures the penetration constraint.
            </summary>
      <param name="contactManifoldConstraint">Owning manifold constraint.</param>
      <param name="contact">Contact associated with the penetration constraint.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.CleanUp">
      <summary>
             Cleans up the constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.SolveIteration">
      <summary>
            Computes and applies an impulse to keep the colliders from penetrating.
            </summary>
      <returns>Impulse applied.</returns>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.Contact">
      <summary>
             Gets the contact associated with this penetration constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.NormalForce">
      <summary>
            Gets the total normal force applied by this penetration constraint to maintain the separation of the involved entities.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.Collision.ContactPenetrationConstraint.RelativeVelocity">
      <summary>
             Gets the relative velocity between the associated entities at the contact point along the contact normal.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry">
      <summary>
             Convex shape entry to a WrappedShape.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry.CollisionShape">
      <summary>
            Convex shape of the entry.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry.Transform">
      <summary>
            Local transform of the entry.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry.#ctor(Microsoft.Xna.Framework.Vector3,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
      <summary>
            Constructs a convex shape entry.
            </summary>
      <param name="position">Local position of the entry.</param>
      <param name="shape">Shape of the entry.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry.#ctor(Microsoft.Xna.Framework.Quaternion,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
      <summary>
            Constructs a convex shape entry.
            </summary>
      <param name="orientation">Local orientation of the entry.</param>
      <param name="shape">Shape of the entry.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry.#ctor(BEPUphysics.MathExtensions.RigidTransform,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
      <summary>
            Constructs a convex shape entry.
            </summary>
      <param name="transform">Local transform of the entry.</param>
      <param name="shape">Shape of the entry.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape)">
      <summary>
             Constructs a convex shape entry with identity transformation.
            </summary>
      <param name="shape">Shape of the entry.</param>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape">
      <summary>
             Shape that wraps other convex shapes in a convex hull.
             One way to think of it is to collect a bunch of items and wrap shrinkwrap around them.
             That surface is the shape of the WrappedShape.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry)">
      <summary>
             Constructs a wrapped shape.
             A constructor is also available which takes a list of objects rather than just a pair.
             The shape will be recentered.  If the center is needed, use the other constructor.
            </summary>
      <param name="firstShape">First shape in the wrapped shape.</param>
      <param name="secondShape">Second shape in the wrapped shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Constructs a wrapped shape.
             A constructor is also available which takes a list of objects rather than just a pair.
             The shape will be recentered.
            </summary>
      <param name="firstShape">First shape in the wrapped shape.</param>
      <param name="secondShape">Second shape in the wrapped shape.</param>
      <param name="center">Center of the shape before recentering..</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry})">
      <summary>
             Constructs a wrapped shape.
             The shape will be recentered; if the center is needed, use the other constructor.
            </summary>
      <param name="shapeEntries">Shape entries used to construct the shape.</param>
      <exception cref="T:System.Exception">Thrown when the shape list is empty.</exception>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.ConvexShapeEntry},Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Constructs a wrapped shape.
             The shape will be recentered.
            </summary>
      <param name="shapeEntries">Shape entries used to construct the shape.</param>
      <param name="center">Center of the shape before recentering.</param>
      <exception cref="T:System.Exception">Thrown when the shape list is empty.</exception>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
      <param name="shapeTransform">Transform to use.</param>
      <param name="boundingBox">Bounding box of the transformed shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.GetLocalExtremePointWithoutMargin(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.ComputeMaximumRadius">
      <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
      <returns>Maximum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.GetCollidableInstance">
      <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
      <returns>EntityCollidable that uses this shape.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.WrappedShape.Shapes">
      <summary>
             Gets the shapes in wrapped shape.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.InstancedMeshContactManifold">
      <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.InstancedMeshContactManifold.CleanUp">
      <summary>
             Cleans up the manifold.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.InstancedMeshContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
      <summary>
             Initializes the manifold.
            </summary>
      <param name="newCollidableA">First collidable.</param>
      <param name="newCollidableB">Second collidable.</param>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.InstancedMeshContactManifold.Mesh">
      <summary>
             Gets the mesh of the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.InstancedMeshSphereContactManifold">
      <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
    </member>
    <member name="T:BEPUphysics.Settings.CollisionDetectionSettings">
      <summary>
             Settings class containing global information about collision detection.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.CollisionDetectionSettings.ContactInvalidationLengthSquared">
      <summary>
            For persistent manifolds, contacts are represented by an offset in local space of two colliding bodies.
            The distance between these offsets transformed into world space and projected onto a plane defined by the contact normal squared is compared against this value.
            If this value is exceeded, the contact is removed from the contact manifold.
            
            If the world is smaller or larger than 'normal' for the engine, adjusting this value proportionally can improve contact caching behavior.
            The default value of .01f works well for worlds that operate on the order of 1 unit.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.CollisionDetectionSettings.ContactMinimumSeparationDistanceSquared">
      <summary>
            In persistent manifolds, if two contacts are too close together, then 
            the system will not use one of them.  This avoids redundant constraints.
            Defaults to .01f.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.CollisionDetectionSettings.AllowedPenetration">
      <summary>
            The default amount of allowed penetration into the margin before position correcting impulses will be applied.
            Defaults to .01f.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.CollisionDetectionSettings.DefaultMargin">
      <summary>
            Default collision margin around objects.  Margins help prevent objects from interpenetrating and improve stability.
            Defaults to .04f.
            </summary>
    </member>
    <member name="P:BEPUphysics.Settings.CollisionDetectionSettings.NonconvexNormalAngleDifferenceMinimum">
      <summary>
            In regular convex manifolds, two contacts are considered redundant if their positions are too close together.  
            In nonconvex manifolds, the normal must also be tested, since a contact in the same location could have a different normal.
            This property is the minimum angle in radians between normals below which contacts are considered redundant.
            </summary>
    </member>
    <member name="P:BEPUphysics.Settings.CollisionDetectionSettings.MaximumContactDistance">
      <summary>
            Maximum distance between the surfaces defining a contact point allowed before removing the contact.
            Defaults to .1f.
            </summary>
    </member>
    <member name="T:BEPUphysics.Materials.InteractionProperties">
      <summary>
             Contains the blended friction and bounciness of a pair of objects.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.InteractionProperties.KineticFriction">
      <summary>
             Kinetic friction between the pair of objects.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.InteractionProperties.StaticFriction">
      <summary>
             Static friction between the pair of objects.
            </summary>
    </member>
    <member name="F:BEPUphysics.Materials.InteractionProperties.Bounciness">
      <summary>
             Bounciness between the pair of objects.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.ForceFields.InfiniteForceFieldShape">
      <summary>
            Defines the area in which a force field works using an entity's shape.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.InfiniteForceFieldShape.GetPossiblyAffectedEntities">
      <summary>
            Determines the possibly involved entities.
            </summary>
      <returns>Possibly involved entities.</returns>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ForceFields.InfiniteForceFieldShape.IsEntityAffected(BEPUphysics.Entities.Entity)">
      <summary>
            Determines if the entity is affected by the force field.
            </summary>
      <param name="testEntity">Entity to test.</param>
      <returns>Whether the entity is affected.</returns>
    </member>
    <member name="T:BEPUphysics.EntityStateManagement.BufferedStatesAccessor">
      <summary>
             Acts as an entity's view into the buffered states system.
             Buffered states are updated each frame and contain the latest known states.
             These states can also be written to.  Writes will not be immediately visible;
             the next frame's write buffer flush will write the changes to the entities.
            </summary>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.#ctor(BEPUphysics.EntityStateManagement.EntityBufferedStates)">
      <summary>
             Constructs a new accessor.
            </summary>
      <param name="bufferedStates">The owning states system.</param>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.WriteBuffer">
      <summary>
             Gets and sets the states write buffer used when buffered properties are written.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.Position">
      <summary>
             Gets or sets the buffered position of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.Orientation">
      <summary>
             Gets or sets the buffered orientation quaternion of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.OrientationMatrix">
      <summary>
             Gets or sets the buffered orientation matrix of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.LinearVelocity">
      <summary>
             Gets or sets the buffered linear velocity of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.AngularVelocity">
      <summary>
             Gets or sets the buffered angular velocity of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.WorldTransform">
      <summary>
             Gets or sets the buffered world transform of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.BufferedStatesAccessor.MotionState">
      <summary>
             Gets or sets the buffered motion state of the entity.
            </summary>
    </member>
    <member name="T:BEPUphysics.RayHit">
      <summary>
             Contains ray hit data.
            </summary>
    </member>
    <member name="F:BEPUphysics.RayHit.Location">
      <summary>
             Location of the ray hit.
            </summary>
    </member>
    <member name="F:BEPUphysics.RayHit.Normal">
      <summary>
             Normal of the ray hit.
            </summary>
    </member>
    <member name="F:BEPUphysics.RayHit.T">
      <summary>
             T parameter of the ray hit.  
             The ray hit location is equal to the ray origin added to the ray direction multiplied by T.
            </summary>
    </member>
    <member name="T:BEPUphysics.Settings.MotionSettings">
      <summary>
             Contains global settings about motion updating.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.MotionSettings.UseRk4AngularIntegration">
      <summary>
             Whether or not to use RK4 angular integration.  This can improve simulation quality sometimes, but not always.
             It has a slight performance impact.  Enabling this when ConserveAngularMomentum is set to true may be helpful.
             Defaults to false.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.MotionSettings.ConserveAngularMomentum">
      <summary>
             Whether or not to conserve angular momentum.
             This produces slightly more realistic angular behavior, but can reduce stability.
             Consider using a smaller timestep, enabling RK4 angular integration, or both.
             Do not use singular inertia tensors while momentum conservation is enabled.
             Defaults to false.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.MotionSettings.DefaultPositionUpdateMode">
      <summary>
            The default position updating mode used by position updateables.
            Defaults to Discrete.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.MotionSettings.UseExtraExpansionForContinuousBoundingBoxes">
      <summary>
            It is possible for an object in danger of being hit by a moving object to have a bounding box which
            does not contain the resulting motion, and CCD will fail to detect a secondary collision.
            Setting this to true will take into account nearby objects' velocities and use them to enlarge the 
            bounding box so that secondary collisions are not missed.
            The larger size of bounding boxes can cause an increase in collision pairs during stressful situations,
            which can harm performance.
            Defaults to false.
            </summary>
    </member>
    <member name="P:BEPUphysics.Settings.MotionSettings.CoreShapeScaling">
      <summary>
             The scaling to apply to the core shapes used for continuous collision detection tests.
             Values should be between 0 and 0.99f.  The smaller the value, the smaller the shapes used
             to perform CCD are, and more collisions are missed.
             Defaults to .8f.
            </summary>
    </member>
    <member name="T:BEPUphysics.Settings.CollisionResponseSettings">
      <summary>
             Contains global settings relating to the collision response system.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.CollisionResponseSettings.BouncinessVelocityThreshold">
      <summary>
            Impact velocity above which the bouciness of the object pair is taken into account.  Below the threshold, no extra energy is added.
            Defaults to 1.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.CollisionResponseSettings.MaximumPositionCorrectionSpeed">
      <summary>
            Maximum speed at which interpenetrating objects or out of alignment joints will attempt to correct.
            Only applies when the Baumgarte method is used when useSplitImpulsePositionCorrection is set to false for contacts.
            Defaults to 2.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.CollisionResponseSettings.PenetrationRecoveryStiffness">
      <summary>
            Fraction of position error to convert into corrective momentum when using the Baumgarte position correction method,
            active when useSplitImpulsePositionCorrection is set to false.
            Defaults to .2.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.CollisionResponseSettings.StaticFrictionVelocityThreshold">
      <summary>
            Magnitude of relative velocity at a contact point below which staticFriction is used.
            dynamicFriction is used when velocity exceeds this threshold.
            Defaults to .2.
            </summary>
    </member>
    <member name="F:BEPUphysics.Settings.CollisionResponseSettings.TwistFrictionFactor">
      <summary>
            Value by which a collision pair's friction coefficient will be multiplied to get the twist friction coefficient.
            Defaults to 1.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.Prefabs.CompoundBody">
      <summary>
            Acts as a grouping of multiple other objects.  Can be used to form physically simulated concave shapes.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.CompoundBody.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.CompoundShapeEntry})">
      <summary>
            Creates a new kinematic CompoundBody with the given subbodies.
            </summary>
      <param name="bodies">List of entities to use as subbodies of the compound body.</param>
      <exception cref="T:System.InvalidOperationException">Thrown when the bodies list is empty or there is a mix of kinematic and dynamic entities in the body list.</exception>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.CompoundBody.#ctor(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.CompoundShapeEntry},System.Single)">
      <summary>
            Creates a new dynamic CompoundBody with the given subbodies.
            </summary>
      <param name="bodies">List of entities to use as subbodies of the compound body.</param>
      <param name="mass">Mass of the compound.</param>
      <exception cref="T:System.InvalidOperationException">Thrown when the bodies list is empty or there is a mix of kinematic and dynamic entities in the body list.</exception>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.CompoundBody.#ctor(System.Collections.Generic.IList{BEPUphysics.Collidables.MobileCollidables.CompoundChildData})">
      <summary>
             Constructs a kinematic compound body from the children data.
            </summary>
      <param name="children">Children data to construct the compound from.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.CompoundBody.#ctor(System.Collections.Generic.IList{BEPUphysics.Collidables.MobileCollidables.CompoundChildData},System.Single)">
      <summary>
             Constructs a dynamic compound body from the children data.
            </summary>
      <param name="children">Children data to construct the compound from.</param>
      <param name="mass">Mass of the compound body.</param>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.CompoundBody.Shapes">
      <summary>
             Gets the list of shapes in the compound.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor">
      <summary>
            Constraint which attempts to restrict the relative angular motion of two entities.
            Can use a target relative orientation to apply additional force.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.#ctor">
      <summary>
            Constructs a new constraint which attempts to restrict the relative angular motion of two entities.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
      <summary>
            Constructs a new constraint which attempts to restrict the relative angular motion of two entities.
            </summary>
      <param name="connectionA">First connection of the pair.</param>
      <param name="connectionB">Second connection of the pair.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
      <param name="jacobianZ">Third linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
      <param name="jacobianZ">Third linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
      <param name="jacobianZ">Third angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
      <param name="jacobianZ">Third angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.GetMassMatrix(BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.SolveIteration">
      <summary>
            Applies the corrective impulses required by the constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.Update(System.Single)">
      <summary>
            Initializes the constraint for the current frame.
            </summary>
      <param name="dt">Time between frames.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.Basis">
      <summary>
            Gets the basis attached to entity A.
            The target velocity/orientation of this motor is transformed by the basis.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.Settings">
      <summary>
            Gets the motor's velocity and servo settings.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.AngularMotor.Error">
      <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, error is zero.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint">
      <summary>
            Constrains two entities so that they cannot rotate relative to each other.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.#ctor">
      <summary>
            Constructs a new constraint which prevents relative angular motion between the two connected bodies.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) and the initial orientations
            (InitialOrientationA, InitialOrientationB).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
      <summary>
            Constructs a new constraint which prevents relative angular motion between the two connected bodies.
            </summary>
      <param name="connectionA">First connection of the pair.</param>
      <param name="connectionB">Second connection of the pair.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
      <param name="jacobianZ">Third linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
      <param name="jacobianZ">Third linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
      <param name="jacobianZ">Third angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
      <param name="jacobianZ">Third angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.SolveIteration">
      <summary>
            Applies the corrective impulses required by the constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.Update(System.Single)">
      <summary>
            Initializes the constraint for the current frame.
            </summary>
      <param name="dt">Time between frames.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.InitialOrientationA">
      <summary>
            Gets or sets the initial orientation of the first connected entity.
            The constraint will try to maintain the relative orientation between the initialOrientationA and initialOrientationB.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.InitialOrientationB">
      <summary>
            Gets or sets the initial orientation of the second connected entity.
            The constraint will try to maintain the relative orientation between the initialOrientationA and initialOrientationB.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.NoRotationJoint.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit">
      <summary>
            Constrains the distance along an axis between anchor points attached to two entities.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.#ctor">
      <summary>
            Constructs a constraint which tries to keep anchors on two entities within a certain distance of each other along an axis.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the AnchorA, AnchorB, and Axis (or their entity-local versions),
            and the Minimum and Maximum.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>
            Constructs a constraint which tries to keep anchors on two entities within a certain distance of each other along an axis.
            </summary>
      <param name="connectionA">First connection of the pair.</param>
      <param name="connectionB">Second connection of the pair.</param>
      <param name="anchorA">World space point to attach to connection A that will be constrained.</param>
      <param name="anchorB">World space point to attach to connection B that will be constrained.</param>
      <param name="axis">Limited axis in world space to attach to connection A.</param>
      <param name="minimum">Minimum allowed position along the axis.</param>
      <param name="maximum">Maximum allowed position along the axis.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.AnchorA">
      <summary>
            Gets or sets the anchor point attached to entity A in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.AnchorB">
      <summary>
            Gets or sets the anchor point attached to entity A in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.Axis">
      <summary>
            Gets or sets the limited axis in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.LocalAxis">
      <summary>
            Gets or sets the limited axis in the local space of connection A.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.LocalOffsetA">
      <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in its local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.LocalOffsetB">
      <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in its local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.Maximum">
      <summary>
            Gets or sets the maximum allowed distance along the axis.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.Minimum">
      <summary>
            Gets or sets the minimum allowed distance along the axis.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.OffsetA">
      <summary>
            Gets or sets the offset from the first entity's center of mass to the anchor point in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.OffsetB">
      <summary>
            Gets or sets the offset from the second entity's center of mass to the anchor point in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.LinearAxisLimit.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.StaticMeshSphereContactManifold">
      <summary>
             Manages persistent contacts between a static mesh and a convex.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleConvexPairTester">
      <summary>
             Persistent tester that compares triangles against convex objects.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleConvexPairTester.GenerateContactCandidate(BEPUphysics.DataStructures.TinyStructList{BEPUphysics.CollisionTests.ContactData}@)">
      <summary>
             Generates a contact between the triangle and convex.
            </summary>
      <param name="contactList">Contact between the shapes, if any.</param>
      <returns>Whether or not the shapes are colliding.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleConvexPairTester.GetVoronoiRegion(Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Determines what voronoi region a given point is in.
            </summary>
      <param name="p">Point to test.</param>
      <returns>Voronoi region containing the point.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleConvexPairTester.Initialize(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape)">
      <summary>
             Initializes the pair tester.
            </summary>
      <param name="convex">Convex shape to use.</param>
      <param name="triangle">Triangle shape to use.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleConvexPairTester.CleanUp">
      <summary>
            Cleans up the pair tester.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.InstancedMesh">
      <summary>
             Collidable mesh which can be created from a reusable InstancedMeshShape.
             Very little data is needed for each individual InstancedMesh object, allowing
             a complicated mesh to be repeated many times.  Since the hierarchy used to accelerate
             collisions is purely local, it may be marginally slower than an individual StaticMesh.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.InstancedMesh.UpdateBoundingBox">
      <summary>
            Updates the bounding box to the current state of the entry.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.InstancedMesh.#ctor(BEPUphysics.CollisionShapes.InstancedMeshShape)">
      <summary>
             Constructs a new InstancedMesh.
            </summary>
      <param name="meshShape">Shape to use for the instance.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.InstancedMesh.#ctor(BEPUphysics.CollisionShapes.InstancedMeshShape,BEPUphysics.MathExtensions.AffineTransform)">
      <summary>
             Constructs a new InstancedMesh.
            </summary>
      <param name="meshShape">Shape to use for the instance.</param>
      <param name="worldTransform">Transform to use for the instance.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.InstancedMesh.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Tests a ray against the entry.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
      <param name="rayHit">Hit location of the ray on the entry, if any.</param>
      <returns>Whether or not the ray hit the entry.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.InstancedMesh.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,BEPUphysics.RayHit@)">
      <summary>
             Tests a ray against the instance.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length of the ray to test; in units of the ray's direction's length.</param>
      <param name="sidedness">Sidedness to use during the ray cast.  This does not have to be the same as the mesh's sidedness.</param>
      <param name="rayHit">The hit location of the ray on the mesh, if any.</param>
      <returns>Whether or not the ray hit the mesh.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.InstancedMesh.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.RayHit@)">
      <summary>
            Casts a convex shape against the collidable.
            </summary>
      <param name="castShape">Shape to cast.</param>
      <param name="startingTransform">Initial transform of the shape.</param>
      <param name="sweep">Sweep to apply to the shape.</param>
      <param name="hit">Hit data, if any.</param>
      <returns>Whether or not the cast hit anything.</returns>
    </member>
    <member name="P:BEPUphysics.Collidables.InstancedMesh.WorldTransform">
      <summary>
             Gets or sets the world transform of the mesh.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.InstancedMesh.Shape">
      <summary>
             Gets the shape used by the instanced mesh.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.InstancedMesh.Sidedness">
      <summary>
             Gets or sets the sidedness of the mesh.  This can be used to ignore collisions and rays coming from a direction relative to the winding of the triangle.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.InstancedMesh.ImproveBoundaryBehavior">
      <summary>
            Gets or sets whether or not the collision system should attempt to improve contact behavior at the boundaries between triangles.
            This has a slight performance cost, but prevents objects sliding across a triangle boundary from 'bumping,' and otherwise improves
            the robustness of contacts at edges and vertices.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.InstancedMesh.Events">
      <summary>
             Gets the event manager of the mesh.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.InstancedMesh.Material">
      <summary>
             Gets or sets the material of the mesh.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.InstancedMesh.Space">
      <summary>
             Gets the Space to which the instance belongs.
            </summary>
    </member>
    <member name="T:BEPUphysics.DataStructures.ReadOnlyList`1">
      <summary>
            Wraps a list in an enumerable struct.
            </summary>
      <typeparam name="T">Type contained by the list.</typeparam>
    </member>
    <member name="T:BEPUphysics.DataStructures.ReadOnlyList`1.Enumerator">
      <summary>
            Enumerates the read only list.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.Enumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:BEPUphysics.DataStructures.ReadOnlyList`1.Enumerator.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Constructs a new read-only list.
            </summary>
      <param name="wrappedList">List wrapped by the read-only list.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.Contains(`0)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.ReadOnlyList`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:BEPUphysics.DataStructures.ReadOnlyList`1.Item(System.Int32)">
      <summary>
            Gets the element at the specified index.
            </summary>
      <returns>
            The element at the specified index.
            </returns>
      <param name="index">The zero-based index of the element to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="P:BEPUphysics.DataStructures.ReadOnlyList`1.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.MobileMeshSphereContactManifold">
      <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.MobileMeshShape">
      <summary>
             Local space data associated with a mobile mesh.
             This contains a hierarchy and all the other heavy data needed
             by an MobileMesh.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.MobileMeshShape.solidSidedness">
      <summary>
            Sidedness required if the mesh is in solid mode.
            If the windings were reversed or double sided,
            the solidity would fight against shell contacts,
            leading to very bad jittering.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.MobileMeshShape.DepthDoubleCheckLimit">
      <summary>
            If an object is detected to be within the mobile mesh with a penetration depth greater than this limit,
            it will try a different direction to verify that it wasn't a false positive.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.MobileMeshShape.MeshHitUniquenessThreshold">
      <summary>
            The difference in t parameters in a ray cast under which two hits are considered to be redundant.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.#ctor(Microsoft.Xna.Framework.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform,BEPUphysics.CollisionShapes.MobileMeshSolidity)">
      <summary>
             Constructs a new mobile mesh shape.
            </summary>
      <param name="vertices">Vertices of the mesh.</param>
      <param name="indices">Indices of the mesh.</param>
      <param name="localTransform">Local transform to apply to the shape.</param>
      <param name="solidity">Solidity state of the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.#ctor(Microsoft.Xna.Framework.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform,BEPUphysics.CollisionShapes.MobileMeshSolidity,BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
      <summary>
             Constructs a new mobile mesh shape.
            </summary>
      <param name="vertices">Vertices of the mesh.</param>
      <param name="indices">Indices of the mesh.</param>
      <param name="localTransform">Local transform to apply to the shape.</param>
      <param name="solidity">Solidity state of the shape.</param>
      <param name="distributionInfo">Information computed about the shape during construction.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.IsLocalRayOriginInMesh(Microsoft.Xna.Framework.Ray@,BEPUphysics.RayHit@)">
      <summary>
            Tests to see if a ray's origin is contained within the mesh.
            If it is, the hit location is found.
            If it isn't, the hit location is still valid if a hit occurred.
            If the origin isn't inside and there was no hit, the hit has a T value of float.MaxValue.
            </summary>
      <param name="ray">Ray in the local space of the shape to test.</param>
      <param name="hit">The first hit against the mesh, if any.</param>
      <returns>Whether or not the ray origin was in the mesh.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
             Computes the bounding box of the transformed mesh shape.
            </summary>
      <param name="shapeTransform">Transform to apply to the shape during the bounding box calculation.</param>
      <param name="boundingBox">Bounding box containing the transformed mesh shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.GetLocalBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.AffineTransform@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Gets the bounding box of the mesh transformed first into world space, and then into the local space of another affine transform.
            </summary>
      <param name="shapeTransform">Transform to use to put the shape into world space.</param>
      <param name="spaceTransform">Used as the frame of reference to compute the bounding box.
            In effect, the shape is transformed by the inverse of the space transform to compute its bounding box in local space.</param>
      <param name="boundingBox">Bounding box in the local space.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.GetSweptLocalBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.AffineTransform@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Gets the bounding box of the mesh transformed first into world space, and then into the local space of another affine transform.
            </summary>
      <param name="shapeTransform">Transform to use to put the shape into world space.</param>
      <param name="spaceTransform">Used as the frame of reference to compute the bounding box.
            In effect, the shape is transformed by the inverse of the space transform to compute its bounding box in local space.</param>
      <param name="sweep">World space sweep direction to transform and add to the bounding box.</param>
      <param name="boundingBox">Bounding box in the local space.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.MobileMeshShape.ComputeDistributionInformation(BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
      <summary>
            Computes the volume, center of mass, and volume distribution of the shape.
            </summary>
      <param name="shapeInfo">Data about the shape.</param>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.MobileMeshShape.MeshCollisionMargin">
      <summary>
            Gets or sets the margin of the mobile mesh to use when colliding with other meshes.
            When colliding with non-mesh shapes, the mobile mesh has no margin.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.MobileMeshShape.TriangleMesh">
      <summary>
             Gets or sets the TriangleMesh data structure used by this shape.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.MobileMeshShape.Transform">
      <summary>
            Gets the transform used by the local mesh shape.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.MobileMeshShape.Solidity">
      <summary>
             Gets the solidity of the mesh.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.MobileMeshShape.Sidedness">
      <summary>
            Gets or sets the sidedness of the shape.  This is a convenience property based on the Solidity property.
            If the shape is solid, this returns whatever sidedness is computed to make the triangles of the shape face outward.
            If the shape is solid, setting this property will change the sidedness that is used while the shape is solid.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.MobileMeshShape.NumberOfContainmentChecks">
      <summary>
            This is how many tests are required before an object is accepted as actually inside the solid portion of a mesh.
            The reason for the additional tests is robustness; one test may fail, but two is extremely unlikely, and three more so.
            More tests may also introduce false negatives, though they resolve quickly and are generally not as much of a problem as
            false positives.
            Valid values are 1, 2, or 3.  Defaults to 3.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.MobileMeshSolidity">
      <summary>
             Solidity of a triangle or mesh.
             A triangle can be double sided, or allow one of its sides to let interacting objects through.
             The entire mesh can be made solid, which means objects on the interior still generate contacts even if there aren't any triangles to hit.
             Solidity requires the mesh to be closed.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.MobileMeshSolidity.DoubleSided">
      <summary>
            The mesh will interact with objects coming from both directions.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.MobileMeshSolidity.Clockwise">
      <summary>
            The mesh will interact with objects from which the winding of the triangles appears to be clockwise.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.MobileMeshSolidity.Counterclockwise">
      <summary>
            The mesh will interact with objects from which the winding of the triangles appears to be counterclockwise.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.MobileMeshSolidity.Solid">
      <summary>
            The mesh will treat objects inside of its concave shell as if the mesh had volume.  Mesh must be closed for this to work properly.
            </summary>
    </member>
    <member name="T:BEPUphysics.Threading.ThreadTaskManager">
      <summary>
            Keeps track of the threads currently available to the physics engine.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadTaskManager.WorkerThread.ThreadExecutionLoop">
      <exception cref="T:System.ArithmeticException">Thrown when the thread encounters an invalid state; generally propagated float.NaN's.</exception>
    </member>
    <member name="F:BEPUphysics.Threading.ThreadTaskManager.currentTaskAllocationIndex">
      <summary>
            Index into the thread loop lists, incremented after each task allocation.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadTaskManager.#ctor">
      <summary>
            Constructs a new thread task manager.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadTaskManager.Finalize">
      <summary>
            Releases resources used by the object.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadTaskManager.WaitForTaskCompletion">
      <summary>
            Blocks the current thread until all tasks have been completed.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadTaskManager.AddThread">
      <summary>
            Adds a thread to the manager.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadTaskManager.AddThread(System.Action{System.Object},System.Object)">
      <summary>
            Adds a thread to the manager.
            </summary>
      <param name="initialization">A function to run to perform any initialization on the new thread.</param>
      <param name="initializationInformation">Data to give the ParameterizedThreadStart for initialization.</param>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadTaskManager.RemoveThread">
      <summary>
            Removes a thread from the manager.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadTaskManager.EnqueueTask(System.Action{System.Object},System.Object)">
      <summary>
            Gives the thread manager a new task to run.
            </summary>
      <param name="task">Task to run.</param>
      <param name="taskInformation">Information to be used by the task.</param>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadTaskManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
      <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
      <param name="startIndex">Inclusive starting index.</param>
      <param name="endIndex">Exclusive ending index.</param>
      <param name="loopBody">Function that handles an individual iteration of the loop.</param>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadTaskManager.Dispose">
      <summary>
            Releases resources used by the object.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.ThreadTaskManager.EnqueueTaskSequentially(System.Action{System.Object},System.Object)">
      <summary>
            Enqueues a task.
            This method also does not perform any locking; it should only be called when all worker threads of the thread pool are idle and all calls to this method are from the same thread.
            </summary>
      <param name="task">Task to enqueue.</param>
      <param name="taskInformation">Information for the task.</param>
    </member>
    <member name="P:BEPUphysics.Threading.ThreadTaskManager.LoopTasksPerThread">
      <summary>
            Gets or sets the number of tasks to create per thread when doing forLoops.
            </summary>
    </member>
    <member name="P:BEPUphysics.Threading.ThreadTaskManager.ThreadCount">
      <summary>
            Gets the number of threads currently handled by the manager.
            </summary>
    </member>
    <member name="T:BEPUphysics.ResourceManagement.ResourcePool`1">
      <summary>
            Manages a cache of a type of resource.
            </summary>
      <typeparam name="T">Type of object to pool.</typeparam>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.GiveBack(`0)">
      <summary>
            Gives an item back to the resource pool.
            </summary>
      <param name="item">Item to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.Initialize(System.Int32)">
      <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
      <param name="initialResourceCount">Number of resources to include.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.Take">
      <summary>
            Takes an item from the resource pool.
            </summary>
      <returns>Item to take.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.CreateNewResource">
      <summary>
            Creates and returns a new resource.
            </summary>
      <returns>New resource.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.ResourcePool`1.Clear">
      <summary>
            Removes all elements from the pool.
            </summary>
    </member>
    <member name="P:BEPUphysics.ResourceManagement.ResourcePool`1.Count">
      <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
    </member>
    <member name="P:BEPUphysics.ResourceManagement.ResourcePool`1.InstanceInitializer">
      <summary>
            Gets or sets the function that configures new instances.
            This is only called once per object created for the resource pool.
            </summary>
    </member>
    <member name="T:BEPUphysics.ResourceManagement.UnsafeResourcePool`1">
      <summary>
            Manages a resource type, but performs no locking to handle asynchronous access.
            </summary>
      <typeparam name="T">Type of object to store in the pool.</typeparam>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.#ctor(System.Int32,System.Action{`0})">
      <summary>
            Constructs a new locking resource pool.
            </summary>
      <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
      <param name="initializer">Function to initialize new instances in the resource pool with.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.#ctor(System.Int32)">
      <summary>
            Constructs a new locking resource pool.
            </summary>
      <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.#ctor">
      <summary>
            Constructs a new locking resource pool.
            </summary>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.GiveBack(`0)">
      <summary>
            Gives an item back to the resource pool.
            </summary>
      <param name="item">Item to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.Initialize(System.Int32)">
      <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
      <param name="initialResourceCount">Number of resources to include.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.Take">
      <summary>
            Takes an item from the resource pool.
            </summary>
      <returns>Item to take.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.Clear">
      <summary>
            Clears out the resource pool.
            </summary>
    </member>
    <member name="P:BEPUphysics.ResourceManagement.UnsafeResourcePool`1.Count">
      <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
    </member>
    <member name="T:BEPUphysics.Paths.VariableAngularSpeedCurve">
      <summary>
            Wraps a curve that is traveled along with arbitrary defined angular speed.
            </summary>
      <remarks>
            The speed curve should be designed with the wrapped curve's times in mind.
            Speeds will be sampled based on the wrapped curve's interval.</remarks>
    </member>
    <member name="M:BEPUphysics.Paths.VariableAngularSpeedCurve.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Quaternion})">
      <summary>
            Constructs a new variable speed curve.
            </summary>
      <param name="speedCurve">Curve defining speeds to use.</param>
      <param name="curve">Curve to wrap.</param>
    </member>
    <member name="M:BEPUphysics.Paths.VariableAngularSpeedCurve.#ctor(BEPUphysics.Paths.Path{System.Single},BEPUphysics.Paths.Curve{Microsoft.Xna.Framework.Quaternion},System.Int32)">
      <summary>
            Constructs a new variable speed curve.
            </summary>
      <param name="speedCurve">Curve defining speeds to use.</param>
      <param name="curve">Curve to wrap.</param>
      <param name="sampleCount">Number of samples to use when constructing the wrapper curve.
            More samples increases the accuracy of the speed requirement at the cost of performance.</param>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint">
      <summary>
            Constrains a point on one body to be on a plane defined by another body.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.#ctor">
      <summary>
            Constructs a new point on plane constraint.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the PlaneAnchor, PlaneNormal, and PointAnchor (or their entity-local versions).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new point on plane constraint.
            </summary>
      <param name="connectionA">Entity to which the constraint's plane is attached.</param>
      <param name="connectionB">Entity to which the constraint's point is attached.</param>
      <param name="planeAnchor">A point on the plane.</param>
      <param name="normal">Direction, attached to the first connected entity, defining the plane's normal</param>
      <param name="pointAnchor">The point to constrain to the plane, attached to the second connected object.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.LocalPlaneAnchor">
      <summary>
            Gets or sets the plane's anchor in entity A's local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.LocalPlaneNormal">
      <summary>
            Gets or sets the plane's normal in entity A's local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.LocalPointAnchor">
      <summary>
            Gets or sets the point anchor in entity B's local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.OffsetA">
      <summary>
            Gets the offset from A to the connection point between the entities.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.OffsetB">
      <summary>
            Gets the offset from B to the connection point between the entities.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.PlaneAnchor">
      <summary>
            Gets or sets the plane anchor in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.PlaneNormal">
      <summary>
            Gets or sets the plane's normal in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.PointAnchor">
      <summary>
            Gets or sets the point anchor in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.PointOnPlaneJoint.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit">
      <summary>
            Prevents the connected entities from twisting relative to each other beyond given limits.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.maximumAngle">
      <summary>
            Naximum angle that entities can twist.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.minimumAngle">
      <summary>
            Minimum angle that entities can twist.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.#ctor">
      <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other beyond given limits.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the BasisA, BasisB and the MinimumAngle and MaximumAngle.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>
            Constructs a new constraint which prevents the connected entities from twisting relative to each other beyond given limits.
            </summary>
      <param name="connectionA">First connection of the pair.</param>
      <param name="connectionB">Second connection of the pair.</param>
      <param name="axisA">Twist axis attached to the first connected entity.</param>
      <param name="axisB">Twist axis attached to the second connected entity.</param>
      <param name="minimumAngle">Minimum twist angle allowed.</param>
      <param name="maximumAngle">Maximum twist angle allowed.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.SetupJointTransforms(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets up the joint transforms by automatically creating perpendicular vectors to complete the bases.
            </summary>
      <param name="worldTwistAxisA">Twist axis in world space to attach to entity A.</param>
      <param name="worldTwistAxisB">Twist axis in world space to attach to entity B.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.SolveIteration">
      <summary>
            Solves for velocity.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.Update(System.Single)">
      <summary>
            Do any necessary computations to prepare the constraint for this frame.
            </summary>
      <param name="dt">Simulation step length.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.BasisA">
      <summary>
            Gets the basis attached to entity A.
            The primary axis represents the twist axis attached to entity A.
            The x axis and y axis represent a plane against which entity B's attached x axis is projected to determine the twist angle.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.BasisB">
      <summary>
            Gets the basis attached to entity B.
            The primary axis represents the twist axis attached to entity A.
            The x axis is projected onto the plane defined by localTransformA's x and y axes
            to get the twist angle.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.MaximumAngle">
      <summary>
            Gets or sets the maximum angle that entities can twist.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.MinimumAngle">
      <summary>
            Gets or sets the minimum angle that entities can twist.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.TwistLimit.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit">
      <summary>
            A modified distance constraint allowing a range of lengths between two anchor points.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.maximumLength">
      <summary>
            Maximum distance allowed between the anchors.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.minimumLength">
      <summary>
            Minimum distance maintained between the anchors.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.#ctor">
      <summary>
            Constructs a distance limit joint.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the WorldAnchorA and WorldAnchorB (or their entity-local versions)
            and the MinimumLength and MaximumLength.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>
            Constructs a distance limit joint.
            </summary>
      <param name="connectionA">First body connected to the distance limit.</param>
      <param name="connectionB">Second body connected to the distance limit.</param>
      <param name="anchorA">Connection to the spring from the first connected body in world space.</param>
      <param name="anchorB"> Connection to the spring from the second connected body in world space.</param>
      <param name="minimumLength">Minimum distance maintained between the anchors.</param>
      <param name="maximumLength">Maximum distance allowed between the anchors.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.SolveIteration">
      <summary>
            Calculates and applies corrective impulses.
            Called automatically by space.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.Update(System.Single)">
      <summary>
            Calculates necessary information for velocity solving.
            </summary>
      <param name="dt">Time in seconds since the last update.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.LocalAnchorA">
      <summary>
            Gets or sets the first entity's connection point in local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.LocalAnchorB">
      <summary>
            Gets or sets the first entity's connection point in local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.MaximumLength">
      <summary>
            Gets or sets the maximum distance allowed between the anchors.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.MinimumLength">
      <summary>
            Gets or sets the minimum distance maintained between the anchors.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.WorldAnchorA">
      <summary>
            Gets or sets the connection to the distance constraint from the first connected body in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.WorldAnchorB">
      <summary>
            Gets or sets the connection to the distance constraint from the second connected body in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.DistanceLimit.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape">
      <summary>
             Shape which can take any convex shape and use a linear transform to shear, scale, and rotate it.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.#ctor(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
             Constructs a new transformable shape.
            </summary>
      <param name="shape">Base shape to transform.</param>
      <param name="transform">Transform to use.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.GetLocalExtremePointWithoutMargin(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.ComputeMaximumRadius">
      <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
      <returns>Maximum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.ComputeMinimumRadius">
      <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
      <returns>Minimum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.ComputeCenter">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.ComputeCenter(System.Single@)">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.GetCollidableInstance">
      <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
      <returns>EntityCollidable that uses this shape.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.Shape">
      <summary>
             Gets or sets the convex shape to be transformed.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.TransformableShape.Transform">
      <summary>
             Gets or sets the linear transform used to transform the convex shape.
            </summary>
    </member>
    <member name="T:BEPUphysics.DataStructures.StaticMeshData">
      <summary>
             Collection of triangle mesh data that directly returns vertices from its vertex buffer instead of transforming them first.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.StaticMeshData.#ctor(Microsoft.Xna.Framework.Vector3[],System.Int32[])">
      <summary>
             Constructs the triangle mesh data.
            </summary>
      <param name="vertices">Vertices to use in the data.</param>
      <param name="indices">Indices to use in the data.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.StaticMeshData.GetTriangle(System.Int32,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the triangle vertex positions at a given index.
            </summary>
      <param name="triangleIndex">First index of a triangle's vertices in the index buffer.</param>
      <param name="v1">First vertex of the triangle.</param>
      <param name="v2">Second vertex of the triangle.</param>
      <param name="v3">Third vertex of the triangle.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.StaticMeshData.GetVertexPosition(System.Int32,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the position of a vertex in the data.
            </summary>
      <param name="i">Index of the vertex.</param>
      <param name="vertex">Position of the vertex.</param>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox">
      <summary>
            Contains a variety of queries and computation methods that make use of minkowski portal refinement.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.InnerIterationLimit">
      <summary>
            Number of iterations that the MPR system will run in its inner loop before giving up and returning with failure.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.OuterIterationLimit">
      <summary>
            Number of iterations that the MPR system will run in its outer loop before giving up and moving on to its inner loop.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.GetOverlapPosition(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets a world space point in the overlapped volume between two shapes.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape in the pair.</param>
      <param name="transformA">Transformation to apply to the first shape.</param>
      <param name="transformB">Transformation to apply to the second shape.</param>
      <param name="position">Position within the overlapped volume of the two shapes, if any.</param>
      <returns>Whether or not the two shapes overlap.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.GetLocalOverlapPosition(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets a point in the overlapped volume between two shapes in shape A's local space.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape in the pair.</param>
      <param name="transformA">Transformation to apply to the first shape.</param>
      <param name="transformB">Transformation to apply to the second shape.</param>
      <param name="position">Position within the overlapped volume of the two shapes in shape A's local space, if any.</param>
      <returns>Whether or not the two shapes overlap.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.AreShapesOverlapping(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@)">
      <summary>
            Determines if two shapes are colliding.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape of the pair.</param>
      <param name="transformA">Transformation to apply to shape A.</param>
      <param name="transformB">Transformation to apply to shape B.</param>
      <returns>Whether or not the shapes are overlapping.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.AreLocalShapesOverlapping(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@)">
      <summary>
            Determines if two shapes are colliding.  Shape B is positioned relative to shape A.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape of the pair.</param>
      <param name="localTransformB">Relative transform of shape B to shape A.</param>
      <returns>Whether or not the shapes are overlapping.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.AreLocalShapesOverlapping(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.RigidTransform@)">
      <summary>
            Determines if two shapes are colliding.  Shape B is positioned relative to shape A.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape of the pair.</param>
      <param name="originRay">Direction in which to cast the overlap ray.  Necessary when an object's origin is not contained in its geometry.</param>
      <param name="localTransformB">Relative transform of shape B to shape A.</param>
      <returns>Whether or not the shapes are overlapping.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.LocalSurfaceCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,System.Single@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Casts a ray from the origin in the given direction at the surface of the minkowski difference.
            Assumes that the origin is within the minkowski difference.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape in the pair.</param>
      <param name="localTransformB">Transformation of shape B relative to shape A.</param>
      <param name="direction">Direction to cast the ray.</param>
      <param name="t">Length along the direction vector that the impact was found.</param>
      <param name="normal">Normal of the impact at the surface of the convex.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.LocalSurfaceCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,System.Single@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Casts a ray from the origin in the given direction at the surface of the minkowski difference.
            Assumes that the origin is within the minkowski difference.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape in the pair.</param>
      <param name="localTransformB">Transformation of shape B relative to shape A.</param>
      <param name="direction">Direction to cast the ray.</param>
      <param name="t">Length along the direction vector that the impact was found.</param>
      <param name="normal">Normal of the impact at the surface of the convex.</param>
      <param name="position">Location of the ray cast hit on the surface of A.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.GetContact(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.CollisionTests.ContactData@)">
      <summary>
            Gets a contact point between two convex shapes.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape in the pair.</param>
      <param name="transformA">Transformation to apply to the first shape.</param>
      <param name="transformB">Transformation to apply to the second shape.</param>
      <param name="penetrationAxis">Axis along which to first test the penetration depth.</param>
      <param name="contact">Contact data between the two shapes, if any.</param>
      <returns>Whether or not the shapes overlap.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.RefinePenetration(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,System.Single,Microsoft.Xna.Framework.Vector3@,System.Single@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Incrementally refines the penetration depth and normal towards the local minimum.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape in the pair.</param>
      <param name="localTransformB">Transformation of shape B relative to shape A.</param>
      <param name="initialDepth">Initial depth estimate.</param>
      <param name="initialNormal">Initial normal estimate.</param>
      <param name="penetrationDepth">Refined penetration depth.</param>
      <param name="refinedNormal">Refined normal.</param>
      <param name="position">Refined position.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.Sweep(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.MathExtensions.RigidTransform@,BEPUphysics.RayHit@)">
      <summary>
            Sweeps the shapes against each other and finds a point, time, and normal of impact.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape in the pair.</param>
      <param name="sweepA">Sweep direction and amount to apply to the first shape.</param>
      <param name="sweepB">Sweep direction and amount to apply to the second shape.</param>
      <param name="transformA">Initial transform to apply to the first shape.</param>
      <param name="transformB">Initial transform to apply to the second shape.</param>
      <param name="hit">Hit data between the two shapes, if any.</param>
      <returns>Whether or not the swept shapes hit each other.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.GetLocalPosition(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Computes the position of the minkowski point in the local space of A.
            This assumes that the minkowski point is contained in A-B.
            </summary>
      <param name="shapeA">First shape to test.</param>
      <param name="shapeB">Second shape to test.</param>
      <param name="localTransformB">Transform of shape B in the local space of A.</param>
      <param name="minkowskiPosition">Position in minkowski space to pull into the local space of A.</param>
      <param name="position">Position of the minkowski space point in the local space of A.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.AreSweptShapesIntersecting(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Determines if two shapes are intersecting.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape in the pair.</param>
      <param name="sweep">Sweep direction and magnitude.</param>
      <param name="localTransformB">Transformation of shape B in the local space of A.</param>
      <param name="position">Position of the minkowski difference origin in the local space of A, if the swept volumes intersect.</param>
      <returns>Whether the swept shapes intersect.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.SurfaceEpsilon">
      <summary>
            Gets or sets how close surface-finding based MPR methods have to get before exiting.
            Defaults to 1e-7.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.DepthRefinementEpsilon">
      <summary>
            Gets or sets how close the penetration depth refinement system should converge before quitting.
            Making this smaller can help more precisely find a local minimum at the cost of performance.
            The change will likely only be visible on curved shapes, since polytopes will converge extremely rapidly to a precise local minimum.
            Defaults to 1e-4.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.RayCastSurfaceEpsilon">
      <summary>
            Gets or sets how close surface-finding ray casts have to get before exiting.
            Defaults to 1e-9.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.MPRToolbox.MaximumDepthRefinementIterations">
      <summary>
            Gets or sets the maximum number of iterations to use to reach the local penetration depth minimum when using the RefinePenetration function.
            Increasing this allows the system to work longer to find local penetration minima.
            The change will likely only be visible on curved shapes, since polytopes will converge extremely rapidly to a precise local minimum.
            Defaults to 3.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleSpherePairTester">
      <summary>
             Persistent tester that compares triangles against convex objects.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleSpherePairTester.GenerateContactCandidate(BEPUphysics.DataStructures.TinyStructList{BEPUphysics.CollisionTests.ContactData}@)">
      <summary>
             Generates a contact between the triangle and convex.
            </summary>
      <param name="contactList">Contact between the shapes, if any.</param>
      <returns>Whether or not the shapes are colliding.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleSpherePairTester.Initialize(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.TriangleShape)">
      <summary>
             Initializes the pair tester.
            </summary>
      <param name="convex">Convex shape to use.</param>
      <param name="triangle">Triangle shape to use.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleSpherePairTester.CleanUp">
      <summary>
            Cleans up the pair tester.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable">
      <summary>
             Collidable used by compound shapes.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable.#ctor(BEPUphysics.CollisionShapes.MobileMeshShape)">
      <summary>
            Constructs a new mobile mesh collidable.
            </summary>
      <param name="shape">Shape to use in the collidable.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Tests a ray against the entry.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
      <param name="rayHit">Hit location of the ray on the entry, if any.</param>
      <returns>Whether or not the ray hit the entry.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,BEPUphysics.RayHit@)">
      <summary>
             Tests a ray against the surface of the mesh.  This does not take into account solidity.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length of the ray to test; in units of the ray's direction's length.</param>
      <param name="sidedness">Sidedness to use during the ray cast.  This does not have to be the same as the mesh's sidedness.</param>
      <param name="rayHit">The hit location of the ray on the mesh, if any.</param>
      <returns>Whether or not the ray hit the mesh.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.RayHit@)">
      <summary>
            Casts a convex shape against the collidable.
            </summary>
      <param name="castShape">Shape to cast.</param>
      <param name="startingTransform">Initial transform of the shape.</param>
      <param name="sweep">Sweep to apply to the shape.</param>
      <param name="hit">Hit data, if any.</param>
      <returns>Whether or not the cast hit anything.</returns>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable.Shape">
      <summary>
             Gets the shape of the collidable.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.MobileMeshCollidable.ImproveBoundaryBehavior">
      <summary>
            Gets or sets whether or not the collision system should attempt to improve contact behavior at the boundaries between triangles.
            This has a slight performance cost, but prevents objects sliding across a triangle boundary from 'bumping,' and otherwise improves
            the robustness of contacts at edges and vertices.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.DuringForcesUpdateableManager">
      <summary>
             Manages updateables that update during the forces stage.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.DuringForcesUpdateableManager.#ctor(BEPUphysics.TimeStepSettings)">
      <summary>
             Constructs a manager.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.DuringForcesUpdateableManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs a manager.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
      <param name="threadManager">Thread manager to use.</param>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.BeforeNarrowPhaseUpdateableManager">
      <summary>
             Manages updateables that update before the narrow phase.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.BeforeNarrowPhaseUpdateableManager.#ctor(BEPUphysics.TimeStepSettings)">
      <summary>
             Constructs a manager.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.BeforeNarrowPhaseUpdateableManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs a manager.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
      <param name="threadManager">Thread manager to use.</param>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.BeforeSolverUpdateableManager">
      <summary>
             Manages updateables that update before the solver.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.BeforeSolverUpdateableManager.#ctor(BEPUphysics.TimeStepSettings)">
      <summary>
             Constructs a manager.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.BeforeSolverUpdateableManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs a manager.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
      <param name="threadManager">Thread manager to use.</param>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.BeforePositionUpdateUpdateableManager">
      <summary>
             Manages updateables that update at the end of a time step.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.BeforePositionUpdateUpdateableManager.#ctor(BEPUphysics.TimeStepSettings)">
      <summary>
             Constructs a manager.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.BeforePositionUpdateUpdateableManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs a manager.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
      <param name="threadManager">Thread manager to use.</param>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.EndOfTimeStepUpdateableManager">
      <summary>
             Manages updateables that update at the end of a time step.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.EndOfTimeStepUpdateableManager.#ctor(BEPUphysics.TimeStepSettings)">
      <summary>
             Constructs a manager.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.EndOfTimeStepUpdateableManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs a manager.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
      <param name="threadManager">Thread manager to use.</param>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.EndOfFrameUpdateableManager">
      <summary>
             Manages updateables that update at the end of a frame.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.EndOfFrameUpdateableManager.#ctor(BEPUphysics.TimeStepSettings)">
      <summary>
             Constructs a manager.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.EndOfFrameUpdateableManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs a manager.
            </summary>
      <param name="timeStepSettings">Time step settings to use.</param>
      <param name="threadManager">Thread manager to use.</param>
    </member>
    <member name="T:BEPUphysics.Paths.QuaternionSlerpCurve">
      <summary>
            Defines a quaternion curve using spherical linear interpolation.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.Evaluate(System.Int32,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Evaluates the curve section starting at the control point index using
            the weight value.
            </summary>
      <param name="controlPointIndex">Index of the starting control point of the subinterval.</param>
      <param name="weight">Location to evaluate on the subinterval from 0 to 1.</param>
      <param name="value">Value at the given location.</param>
    </member>
    <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
      <summary>
            Gets the curve's bounding index information.
            </summary>
      <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
      <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
    </member>
    <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.ControlPointAdded(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Quaternion},System.Int32)">
      <summary>
            Called when a control point is added.
            </summary>
      <param name="curveControlPoint">New control point.</param>
      <param name="index">Index of the control point.</param>
    </member>
    <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.ControlPointRemoved(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Quaternion},System.Int32)">
      <summary>
            Called when a control point is removed.
            </summary>
      <param name="curveControlPoint">Removed control point.</param>
      <param name="oldIndex">Index of the control point before it was removed.</param>
    </member>
    <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.ControlPointTimeChanged(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Quaternion},System.Int32,System.Int32)">
      <summary>
            Called when a control point belonging to the curve has its time changed.
            </summary>
      <param name="curveControlPoint">Changed control point.</param>
      <param name="oldIndex">Old index of the control point.</param>
      <param name="newIndex">New index of the control point.</param>
    </member>
    <member name="M:BEPUphysics.Paths.QuaternionSlerpCurve.ControlPointValueChanged(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Quaternion})">
      <summary>
            Called when a control point belonging to the curve has its value changed.
            </summary>
      <param name="curveControlPoint">Changed control point.</param>
    </member>
    <member name="T:BEPUphysics.Entities.MorphableEntity">
      <summary>
             Entity with modifiable collision information.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable)">
      <summary>
             Constructs a new morphable entity.
            </summary>
      <param name="collisionInformation">Collidable to use with the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single)">
      <summary>
             Constructs a new morphable entity.
            </summary>
      <param name="collisionInformation">Collidable to use with the entity.</param>
      <param name="mass">Mass of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
             Constructs a new morphable entity.
            </summary>
      <param name="collisionInformation">Collidable to use with the entity.</param>
      <param name="mass">Mass of the entity.</param>
      <param name="inertiaTensor">Inertia tensor of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
      <summary>
             Constructs a new morphable entity.
            </summary>
      <param name="collisionInformation">Collidable to use with the entity.</param>
      <param name="mass">Mass of the entity.</param>
      <param name="inertiaTensor">Inertia tensor of the entity.</param>
      <param name="volume">Volume of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.CollisionShapes.EntityShape)">
      <summary>
             Constructs a new morphable entity.
            </summary>
      <param name="shape">Shape to use with the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single)">
      <summary>
             Constructs a new morphable entity.
            </summary>
      <param name="shape">Shape to use with the entity.</param>
      <param name="mass">Mass of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
             Constructs a new morphable entity.
            </summary>
      <param name="shape">Shape to use with the entity.</param>
      <param name="mass">Mass of the entity.</param>
      <param name="inertiaTensor">Inertia tensor of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.MorphableEntity.#ctor(BEPUphysics.CollisionShapes.EntityShape,System.Single,BEPUphysics.MathExtensions.Matrix3X3,System.Single)">
      <summary>
             Constructs a new morphable entity.
            </summary>
      <param name="shape">Shape to use with the entity.</param>
      <param name="mass">Mass of the entity.</param>
      <param name="inertiaTensor">Inertia tensor of the entity.</param>
      <param name="volume">Volume of the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.MorphableEntity.SetCollisionInformation(BEPUphysics.Collidables.MobileCollidables.EntityCollidable)">
      <summary>
            Sets the collision information of the entity to another collidable.
            </summary>
      <param name="newCollisionInformation">New collidable to use.</param>
    </member>
    <member name="M:BEPUphysics.Entities.MorphableEntity.SetCollisionInformation(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single)">
      <summary>
            Sets the collision information of the entity to another collidable.
            </summary>
      <param name="newCollisionInformation">New collidable to use.</param>
      <param name="newMass">New mass to use for the entity.</param>
    </member>
    <member name="M:BEPUphysics.Entities.MorphableEntity.SetCollisionInformation(BEPUphysics.Collidables.MobileCollidables.EntityCollidable,System.Single,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Sets the collision information of the entity to another collidable.
            </summary>
      <param name="newCollisionInformation">New collidable to use.</param>
      <param name="newMass">New mass to use for the entity.</param>
      <param name="newInertia">New inertia tensor to use for the entity.</param>
    </member>
    <member name="P:BEPUphysics.Entities.MorphableEntity.CollisionInformation">
      <summary>
             Gets or sets the collidable associated with the entity.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.ContainmentState">
      <summary>
            Stores flags regarding an object's degree of inclusion in a volume.
            </summary>
    </member>
    <member name="F:BEPUphysics.UpdateableSystems.ContainmentState.IsContained">
      <summary>
            Whether or not the object is fully contained.
            </summary>
    </member>
    <member name="F:BEPUphysics.UpdateableSystems.ContainmentState.IsTouching">
      <summary>
            Whether or not the object is partially or fully contained.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.ContainmentState.#ctor(System.Boolean,System.Boolean)">
      <summary>
            Constructs a new ContainmentState.
            </summary>
      <param name="touching">Whether or not the object is partially or fully contained.</param>
      <param name="contained">Whether or not the object is fully contained.</param>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.DetectorVolume">
      <summary>
            Manages the detection of entities within an arbitrary closed triangle mesh.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.DetectorVolume.#ctor(BEPUphysics.DataStructures.MeshBoundingBoxTreeData,BEPUphysics.BroadPhaseSystems.IQueryAccelerator)">
      <summary>
            Creates a detector volume.
            </summary>
      <param name="triangleMesh">Arbitrary closed triangle mesh representing the volume.</param>
      <param name="queryAccelerator">System used to find nearby objects.</param>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.DetectorVolume.IsEntityIntersectingVolume(BEPUphysics.Entities.Entity)">
      <summary>
            Determines whether or not an entity is partially or fully contained within the volume.
            </summary>
      <param name="entity">Entity to check for intersection.</param>
      <returns>Whether or not the entity is partially or fully contained with the volume.</returns>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.DetectorVolume.IsEntityIntersectingVolume(BEPUphysics.Entities.Entity,System.Boolean@)">
      <summary>
            Determines whether or not an entity is partially or fully contained within the volume.
            </summary>
      <param name="entity">Entity to check for intersection.</param>
      <param name="isContained">Whether or not the entity is fully contained within the volume.</param>
      <returns>Whether or not the entity is partially or fully contained with the volume.</returns>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.DetectorVolume.IsEntityIntersectingVolume(BEPUphysics.Entities.Entity,System.Collections.Generic.List{System.Int32})">
      <summary>
            Determines whether or not an entity is partially or fully contained within the volume.
            Any surface triangles intersected by the entity are collected.
            </summary>
      <param name="entity">Entity to check for intersection.</param>
      <param name="intersectedTriangleIndices">First indices of intersected triangles in the index buffer.</param>
      <returns>Whether or not the entity is partially or fully contained with the volume.</returns>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.DetectorVolume.IsEntityWithinVolume(BEPUphysics.Entities.Entity)">
      <summary>
            Determines whether or not an entity is fully contained within the volume.
            </summary>
      <param name="entity">Entity to check for containment.</param>
      <returns>Whether or not the entity is fully contained with the volume.</returns>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.DetectorVolume.IsEntityIntersectingShell(BEPUphysics.Entities.Entity)">
      <summary>
             Determines whether or not an entity is intersecting the triangle shell of a detector volume.
            </summary>
      <param name="entity">Entity to test.</param>
      <returns>Whether or not the entity is intersecting the shell.</returns>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.DetectorVolume.IsEntityIntersectingShell(BEPUphysics.Entities.Entity,System.Collections.Generic.IList{System.Int32})">
      <summary>
             Determines whether or not an entity is intersecting the triangle shell of a detector volume.
            </summary>
      <param name="entity">Entity to test.</param>
      <param name="intersectedTriangleIndices">First indices of intersected triangles in the index buffer.</param>
      <returns>Whether or not the entity is intersecting the shell.</returns>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.DetectorVolume.IsPointInVolume(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Determines whether the given point is within the triangle mesh.
            </summary>
      <param name="point">Point to check.</param>
      <returns>Whether or not the point is in the triangle mesh volume.</returns>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.DetectorVolume.CollisionRules">
      <summary>
             Gets or sets the collision rules of the detector volume.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.DetectorVolume.QueryAccelerator">
      <summary>
             Gets or sets the query accelerator used to find nearby objects.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.DetectorVolume.NearbyEntities">
      <summary>
            Gets a mapping of nearby entities to their containment states as determined by the DetectorVolume update method.
            </summary>
    </member>
    <member name="P:BEPUphysics.UpdateableSystems.DetectorVolume.TriangleMesh">
      <summary>
            Gets or sets the acceleration structure associated with the triangle mesh data.
            </summary>
    </member>
    <member name="E:BEPUphysics.UpdateableSystems.DetectorVolume.EntityBeginsTouching">
      <summary>
            Fires when an entity comes into contact with the volume.
            </summary>
    </member>
    <member name="E:BEPUphysics.UpdateableSystems.DetectorVolume.EntityStopsTouching">
      <summary>
            Fires when an entity ceases to intersect the volume.
            </summary>
    </member>
    <member name="E:BEPUphysics.UpdateableSystems.DetectorVolume.VolumeBeginsContainingEntity">
      <summary>
            Fires when an entity becomes fully engulfed by a volume.
            </summary>
    </member>
    <member name="E:BEPUphysics.UpdateableSystems.DetectorVolume.VolumeStopsContainingEntity">
      <summary>
            Fires when an entity ceases to be fully engulfed by a volume.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.EntityBeginsTouchingVolumeEventHandler">
      <summary>
            Handles any special logic to perform when an entry begins touching a detector volume.
            Runs within an update loop for updateables; modifying the updateable listing during the event is disallowed.
            </summary>
      <param name="toucher">Entry touching the volume.</param>
      <param name="volume">DetectorVolume being touched.</param>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.EntityStopsTouchingVolumeEventHandler">
      <summary>
            Handles any special logic to perform when an entry stops touching a detector volume.
            Runs within an update loop for updateables; modifying the updateable listing during the event is disallowed.
            </summary>
      <param name="toucher">Entry no longer touching the volume.</param>
      <param name="volume">DetectorVolume no longer being touched.</param>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.VolumeBeginsContainingEntityEventHandler">
      <summary>
            Handles any special logic to perform when an entry begins being contained by a detector volume.
            Runs within an update loop for updateables; modifying the updateable listing during the event is disallowed.
            </summary>
      <param name="volume">DetectorVolume containing the entry.</param>
      <param name="entry">Entry contained by the volume.</param>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.VolumeStopsContainingEntityEventHandler">
      <summary>
            Handles any special logic to perform when an entry stops being contained by a detector volume.
            Runs within an update loop for updateables; modifying the updateable listing during the event is disallowed.
            </summary>
      <param name="volume">DetectorVolume no longer containing the entry.</param>
      <param name="entry">Entry no longer contained by the volume.</param>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.TerrainShape">
      <summary>
             The local space data needed by a Terrain collidable.
             Contains the Heightmap and other information.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetBoundingBox(BEPUphysics.MathExtensions.AffineTransform@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
             Constructs the bounding box of the terrain given a transform.
            </summary>
      <param name="transform">Transform to apply to the terrain during the bounding box calculation.</param>
      <param name="boundingBox">Bounding box of the terrain shape when transformed.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.TerrainShape.RayCast(Microsoft.Xna.Framework.Ray@,System.Single,BEPUphysics.MathExtensions.AffineTransform@,BEPUphysics.RayHit@)">
      <summary>
             Tests a ray against the terrain shape.
            </summary>
      <param name="ray">Ray to test against the shape.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="transform">Transform to apply to the terrain shape during the test.</param>
      <param name="hit">Hit data of the ray cast, if any.</param>
      <returns>Whether or not the ray hit the transformed terrain shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.TerrainShape.RayCast(Microsoft.Xna.Framework.Ray@,System.Single,BEPUphysics.MathExtensions.AffineTransform@,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,BEPUphysics.RayHit@)">
      <summary>
             Tests a ray against the terrain shape.
            </summary>
      <param name="ray">Ray to test against the shape.</param>
      <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
      <param name="transform">Transform to apply to the terrain shape during the test.</param>
      <param name="sidedness">Sidedness of the triangles to use when raycasting.</param>
      <param name="hit">Hit data of the ray cast, if any.</param>
      <returns>Whether or not the ray hit the transformed terrain shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetLocalPosition(System.Int32,System.Int32,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the position of a vertex at the given indices in local space.
            </summary>
      <param name="i">Index in the first dimension.</param>
      <param name="j">Index in the second dimension.</param>
      <param name="v">Local space position at the given vertice.s</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetPosition(System.Int32,System.Int32,BEPUphysics.MathExtensions.AffineTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the world space position of a vertex in the terrain at the given indices.
             </summary>
      <param name="i">Index in the first dimension.</param>
      <param name="j">Index in the second dimension.</param>
      <param name="transform">Transform to apply to the vertex.</param>
      <param name="position">Transformed position of the vertex at the given indices.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetNormal(System.Int32,System.Int32,BEPUphysics.MathExtensions.AffineTransform@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the world space normal at the given indices.
             </summary>
      <param name="i">Index in the first dimension.</param>
      <param name="j">Index in the second dimension.</param>
      <param name="transform">Transform to apply to the terrain while computing the normal.</param>
      <param name="normal">World space normal at the given indices.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetOverlaps(Microsoft.Xna.Framework.BoundingBox,BEPUphysics.DataStructures.RawList{BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices})">
      <summary>
             Gets overlapped triangles with the terrain shape with a bounding box in the local space of the shape.
            </summary>
      <param name="localSpaceBoundingBox">Bounding box in the local space of the terrain shape.</param>
      <param name="overlappedTriangles">Triangles whose bounding boxes overlap the input bounding box.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetOverlaps(Microsoft.Xna.Framework.BoundingBox,BEPUphysics.DataStructures.RawList{System.Int32})">
      <summary>
             Gets overlapped triangles with the terrain shape with a bounding box in the local space of the shape.
            </summary>
      <param name="localSpaceBoundingBox">Bounding box in the local space of the terrain shape.</param>
      <param name="overlappedTriangles">Indices of triangles whose bounding boxes overlap the input bounding box.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetTriangle(BEPUphysics.CollisionTests.Manifolds.TriangleMeshConvexContactManifold.TriangleIndices@,BEPUphysics.MathExtensions.AffineTransform@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets a world space triangle in the terrain at the given indices (as if it were a mesh).
            </summary>
      <param name="indices">Indices of the triangle.</param>
      <param name="transform">Transform to apply to the triangle vertices.</param>
      <param name="a">First vertex of the triangle.</param>
      <param name="b">Second vertex of the triangle.</param>
      <param name="c">Third vertex of the triangle.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.TerrainShape.GetTriangle(System.Int32,BEPUphysics.MathExtensions.AffineTransform@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets a world space triangle in the terrain at the given triangle index.
            </summary>
      <param name="index">Index of the triangle.</param>
      <param name="transform">Transform to apply to the triangle vertices.</param>
      <param name="a">First vertex of the triangle.</param>
      <param name="b">Second vertex of the triangle.</param>
      <param name="c">Third vertex of the triangle.</param>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.TerrainShape.Heights">
      <summary>
             Gets or sets the height field of the terrain shape.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.TerrainShape.QuadTriangleOrganization">
      <summary>
             Gets or sets the quad triangle organization.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.QuadTriangleOrganization">
      <summary>
            Defines how a Terrain organizes triangles in its quads.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.QuadTriangleOrganization.BottomLeftUpperRight">
      <summary>
            Triangle with a right angle at the (-i,-j) position and another at the (+i,+j) position.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.QuadTriangleOrganization.BottomRightUpperLeft">
      <summary>
            Triangle with a right angle at the (+i,-j) position and another at the high (-i,+j) position.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundConvexPairHandler">
      <summary>
             Handles a compound and convex collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundConvexPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundConvexPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.TerrainSpherePairHandler">
      <summary>
             Handles a terrain-sphere collision pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshTerrainPairHandler">
      <summary>
             Handles a mobile mesh-mobile mesh collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshTerrainPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshTerrainPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.EntitySolverUpdateableCollection">
      <summary>
             Convenience collection for easily scanning the two entity constraints connected to an entity.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.EntitySolverUpdateableCollection.Enumerator">
      <summary>
             Enumerator for the EntityConstraintCollection.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.EntitySolverUpdateableCollection.Enumerator.#ctor(BEPUphysics.DataStructures.RawList{BEPUphysics.DeactivationManagement.SimulationIslandConnection})">
      <summary>
            Constructs an enumerator for the solver updateables list.
            </summary>
      <param name="connections">List of solver updateables to enumerate.</param>
    </member>
    <member name="M:BEPUphysics.Entities.EntitySolverUpdateableCollection.Enumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.Entities.EntitySolverUpdateableCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.Entities.EntitySolverUpdateableCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:BEPUphysics.Entities.EntitySolverUpdateableCollection.Enumerator.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
    </member>
    <member name="M:BEPUphysics.Entities.EntitySolverUpdateableCollection.#ctor(BEPUphysics.DataStructures.RawList{BEPUphysics.DeactivationManagement.SimulationIslandConnection})">
      <summary>
            Constructs a new constraint collection.
            </summary>
      <param name="connections">Solver updateables to enumerate over.</param>
    </member>
    <member name="M:BEPUphysics.Entities.EntitySolverUpdateableCollection.GetEnumerator">
      <summary>
            Gets an enumerator for the collection.
            </summary>
      <returns>Enumerator for the collection.</returns>
    </member>
    <member name="T:BEPUphysics.DeactivationManagement.ISimulationIslandConnection">
      <summary>
             Defines an object which connects simulation islands together.
            </summary>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.ISimulationIslandConnection.AddReferencesToConnectedMembers">
      <summary>
             Adds references to the connection to all connected members.
            </summary>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.ISimulationIslandConnection.RemoveReferencesFromConnectedMembers">
      <summary>
             Removes references to the connection from all connected members.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.ISimulationIslandConnection.DeactivationManager">
      <summary>
             Gets or sets the deactivation member that owns this connection.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.ISimulationIslandConnection.ConnectedMembers">
      <summary>
             Gets the simulation island members associated with this connection.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint">
      <summary>
            Constrains two entities to rotate only around a single axis.
            Acts like the angular portion of a hinge joint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.#ctor">
      <summary>
            Constructs a new orientation joint.
            Orientation joints can be used to simulate the angular portion of a hinge.
            Orientation joints allow rotation around only a single axis.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the WorldFreeAxisA and WorldFreeAxisB (or their entity-local versions).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new orientation joint.
            Orientation joints can be used to simulate the angular portion of a hinge.
            Orientation joints allow rotation around only a single axis.
            </summary>
      <param name="connectionA">First entity connected in the orientation joint.</param>
      <param name="connectionB">Second entity connected in the orientation joint.</param>
      <param name="freeAxis">Axis allowed to rotate freely in world space.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First linear jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the first connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobianX">First angular jacobian entry for the second connected entity.</param>
      <param name="jacobianY">Second angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.GetMassMatrix(BEPUphysics.MathExtensions.Matrix2X2@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="massMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.LocalFreeAxisA">
      <summary>
            Gets or sets the free axis in connection A's local space.
            Updates the internal restricted axes.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.LocalFreeAxisB">
      <summary>
            Gets or sets the free axis in connection B's local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.WorldFreeAxisA">
      <summary>
            Gets or sets the free axis attached to connection A in world space.
            This does not change the other connection's free axis.
            Updates the internal restricted axes.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.WorldFreeAxisB">
      <summary>
            Gets or sets the free axis attached to connection A in world space.
            This does not change the other connection's free axis.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.RevoluteAngularJoint.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit">
      <summary>
            Constrains the relative orientation of two entities to within an ellipse.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.#ctor">
      <summary>
            Constructs a new swing limit.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the TwistAxis (or its entity-local version),
            the MaximumAngleX and MaximumAngleY,
            and the Basis.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>
            Constructs a new swing limit.
            </summary>
      <param name="connectionA">First entity connected by the constraint.</param>
      <param name="connectionB">Second entity connected by the constraint.</param>
      <param name="twistAxis">Axis in world space to use as the initial unrestricted twist direction.
            This direction will be transformed to entity A's local space to form the basis's primary axis
            and to entity B's local space to form its twist axis.
            The basis's x and y axis are automatically created from the twist axis.</param>
      <param name="maximumAngleX">Maximum angle of rotation around the basis X axis.</param>
      <param name="maximumAngleY">Maximum angle of rotation around the basis Y axis.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity)">
      <summary>
            Constructs a new swing limit.
            Using this constructor will leave the limit uninitialized.  Before using the limit in a simulation, be sure to set the basis axes using
            limit.basis.setLocalAxes or limit.basis.setWorldAxes and b's twist axis using the localTwistAxisB or twistAxisB properties.
            </summary>
      <param name="connectionA">First entity connected by the constraint.</param>
      <param name="connectionB">Second entity connected by the constraint.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.SetupJointTransforms(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets up the joint transforms by automatically creating perpendicular vectors to complete the bases.
            </summary>
      <param name="twistAxis">Axis around which rotation is allowed.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.Basis">
      <summary>
            Gets the basis attached to entity A.
            The primary axis is the "twist" axis attached to entity A.
            The xAxis is the axis around which the angle will be limited by maximumAngleX.
            Similarly, the yAxis is the axis around which the angle will be limited by maximumAngleY.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.LocalTwistAxisB">
      <summary>
            Gets or sets the twist axis attached to entity B in its local space.
            The transformed twist axis will be used to determine the angles around entity A's basis axes.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.MaximumAngleX">
      <summary>
            Gets or sets the maximum angle of rotation around the x axis.
            This can be thought of as the major radius of the swing limit's ellipse.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.MaximumAngleY">
      <summary>
            Gets or sets the maximum angle of rotation around the y axis.
            This can be thought of as the minor radius of the swing limit's ellipse.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.TwistAxisB">
      <summary>
            Gets or sets the twist axis attached to entity B in world space.
            The transformed twist axis will be used to determine the angles around entity A's basis axes.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.JointLimits.EllipseSwingLimit.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxSphereTester">
      <summary>
             Static class with methods to help with testing box shapes against sphere shapes.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.BoxSphereTester.AreShapesColliding(BEPUphysics.CollisionShapes.ConvexShapes.BoxShape,BEPUphysics.CollisionShapes.ConvexShapes.SphereShape,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.CollisionTests.ContactData@)">
      <summary>
             Tests if a box and sphere are colliding.
            </summary>
      <param name="box">Box to test.</param>
      <param name="sphere">Sphere to test.</param>
      <param name="boxTransform">Transform to apply to the box.</param>
      <param name="spherePosition">Transform to apply to the sphere.</param>
      <param name="contact">Contact point between the shapes, if any.</param>
      <returns>Whether or not the shapes were colliding.</returns>
    </member>
    <member name="T:BEPUphysics.SolverSystems.SolverUpdateableChange">
      <summary>
             Stores an enqueued solver updateable addition or removal.
            </summary>
    </member>
    <member name="F:BEPUphysics.SolverSystems.SolverUpdateableChange.ShouldAdd">
      <summary>
             Whether the item is going to be added or removed.
            </summary>
    </member>
    <member name="F:BEPUphysics.SolverSystems.SolverUpdateableChange.Item">
      <summary>
             Item being added or removed.
            </summary>
    </member>
    <member name="M:BEPUphysics.SolverSystems.SolverUpdateableChange.#ctor(System.Boolean,BEPUphysics.SolverSystems.SolverUpdateable)">
      <summary>
             Constructs a new solver updateable change.
            </summary>
      <param name="shouldAdd">Whether the item is going to be added or removed.</param>
      <param name="item">Item to add or remove.</param>
    </member>
    <member name="T:BEPUphysics.Paths.LinearInterpolationCurve3D">
      <summary>
            Defines a 3D curve using linear interpolation.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.Evaluate(System.Int32,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Evaluates the curve section starting at the control point index using
            the weight value.
            </summary>
      <param name="controlPointIndex">Index of the starting control point of the subinterval.</param>
      <param name="weight">Location to evaluate on the subinterval from 0 to 1.</param>
      <param name="value">Value at the given location.</param>
    </member>
    <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
      <summary>
            Gets the curve's bounding index information.
            </summary>
      <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
      <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
    </member>
    <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.ControlPointAdded(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3},System.Int32)">
      <summary>
            Called when a control point is added.
            </summary>
      <param name="curveControlPoint">New control point.</param>
      <param name="index">Index of the control point.</param>
    </member>
    <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.ControlPointRemoved(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3},System.Int32)">
      <summary>
            Called when a control point is removed.
            </summary>
      <param name="curveControlPoint">Removed control point.</param>
      <param name="oldIndex">Index of the control point before it was removed.</param>
    </member>
    <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.ControlPointTimeChanged(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32)">
      <summary>
            Called when a control point belonging to the curve has its time changed.
            </summary>
      <param name="curveControlPoint">Changed control point.</param>
      <param name="oldIndex">Old index of the control point.</param>
      <param name="newIndex">New index of the control point.</param>
    </member>
    <member name="M:BEPUphysics.Paths.LinearInterpolationCurve3D.ControlPointValueChanged(BEPUphysics.Paths.CurveControlPoint{Microsoft.Xna.Framework.Vector3})">
      <summary>
            Called when a control point belonging to the curve has its value changed.
            </summary>
      <param name="curveControlPoint">Changed control point.</param>
    </member>
    <member name="T:BEPUphysics.Paths.CurveControlPoint`1">
      <summary>
            Point defining the shape of a 3D curve.
            </summary>
      <typeparam name="TValue">Type of values in the curve.</typeparam>
    </member>
    <member name="M:BEPUphysics.Paths.CurveControlPoint`1.#ctor(System.Single,`0,BEPUphysics.Paths.Curve{`0})">
      <summary>
            Constructs a new 3D curve control point.
            </summary>
      <param name="time">Time at which the point is positioned.</param>
      <param name="value">Value of the control point.</param>
      <param name="curve">Curve associated with the control point.</param>
    </member>
    <member name="M:BEPUphysics.Paths.CurveControlPoint`1.CompareTo(BEPUphysics.Paths.CurveControlPoint{`0})">
      <summary>
            Compares the two control points based on their time.
            </summary>
      <param name="other">Control point to compare.</param>
      <returns>-1 if the current instance has a smaller time, 0 if equal, and 1 if the current instance has a larger time.</returns>
    </member>
    <member name="P:BEPUphysics.Paths.CurveControlPoint`1.Curve">
      <summary>
            Gets the curve associated with this control point.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.CurveControlPoint`1.Time">
      <summary>
            Gets or sets the time at which this control point is positioned.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.CurveControlPoint`1.Value">
      <summary>
            Gets or sets the value of this control point.
            </summary>
    </member>
    <member name="T:BEPUphysics.UpdateableSystems.IBeforeSolverUpdateable">
      <summary>
             Defines an object which is updated by the space before the solver runs.
            </summary>
    </member>
    <member name="M:BEPUphysics.UpdateableSystems.IBeforeSolverUpdateable.Update(System.Single)">
      <summary>
             Updates the updateable before the solver.
            </summary>
      <param name="dt">Time step duration.</param>
    </member>
    <member name="T:BEPUphysics.DeactivationManagement.SimulationIsland">
      <summary>
             A collection of simulation island members bound together with connections.
             An island is activated and deactivated as a group.
            </summary>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.SimulationIsland.#ctor">
      <summary>
             Constructs a simulation island.
            </summary>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.SimulationIsland.Activate">
      <summary>
             Activates the simulation island.
            </summary>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.SimulationIsland.TryToDeactivate">
      <summary>
             Attempts to deactivate the simulation island.
            </summary>
      <returns>Whether or not the simulation island was successfully deactivated.</returns>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.SimulationIsland.Add(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
      <summary>
             Adds a member to the simulation island.
            </summary>
      <param name="member">Member to add.</param>
      <exception cref="T:System.Exception">Thrown when the member being added is either non-dynamic or already has a simulation island.</exception>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.SimulationIsland.Remove(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
      <summary>
             Removes a member from the simulation island.
            </summary>
      <param name="member">Member to remove.</param>
      <exception cref="T:System.Exception">Thrown when the member does not belong to this simulation island.</exception>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.SimulationIsland.IsActive">
      <summary>
             Gets whether or not the island is currently active.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor">
      <summary>
            Constraint which tries to push an entity to a desired location.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.accumulatedImpulse">
      <summary>
            Sum of forces applied to the constraint in the past.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.maxForceDt">
      <summary>
            Maximum impulse that can be applied in a single frame.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.maxForceDtSquared">
      <summary>
            Maximum impulse that can be applied in a single frame, squared.
            This is computed in the prestep to avoid doing extra multiplies in the more-often called applyImpulse method.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.#ctor(BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new single body linear motor.  This motor will try to move a single entity to a goal velocity or to a goal position.
            </summary>
      <param name="entity">Entity to affect.</param>
      <param name="point">Point in world space attached to the entity that will be motorized.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.#ctor">
      <summary>
            Constructs a new single body linear motor.  This motor will try to move a single entity to a goal velocity or to a goal position.
            This constructor will start the motor with isActive = false.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.Update(System.Single)">
      <summary>
             Performs the frame's configuration step.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.ComputeMaxForces(System.Single,System.Single)">
      <summary>
            Computes the maxForceDt and maxForceDtSquared fields.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.Entity">
      <summary>
            Gets or sets the entity affected by the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.LocalPoint">
      <summary>
            Point attached to the entity in its local space that is motorized.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.Point">
      <summary>
            Point attached to the entity in world space that is motorized.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.Settings">
      <summary>
            Gets the motor's velocity and servo settings.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor.Error">
      <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, error is zero.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.MobileCollidables.CompoundHelper">
      <summary>
            Contains methods to help with splitting compound objects into multiple pieces.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable}@)">
      <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
      <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
      <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
      <param name="b">Compound to receive children removed from the original compound.</param>
      <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation},System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable}@)">
      <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
      <param name="childContributions">List of distribution information associated with each child shape of the whole compound shape used by the compound being split.</param>
      <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
      <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
      <param name="b">Compound to receive children removed from the original compound.</param>
      <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation},System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable}@,BEPUphysics.CollisionShapes.ShapeDistributionInformation@,BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
      <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
      <param name="childContributions">List of distribution information associated with each child shape of the whole compound shape used by the compound being split.</param>
      <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
      <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
      <param name="b">Compound to receive children removed from the original compound.</param>
      <param name="distributionInfoA">Volume, volume distribution, and center information about the new form of the original compound collidable.</param>
      <param name="distributionInfoB">Volume, volume distribution, and center information about the new compound collidable.</param>
      <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable})">
      <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
      <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
      <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
      <param name="b">Compound to receive children removed from the original compound.</param>
      <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation},System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable})">
      <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
      <param name="childContributions">List of distribution information associated with each child shape of the whole compound shape used by the compound being split.</param>
      <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
      <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
      <param name="b">Compound to receive children removed from the original compound.</param>
      <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation},System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.Entities.Entity{BEPUphysics.Collidables.MobileCollidables.CompoundCollidable},BEPUphysics.CollisionShapes.ShapeDistributionInformation@,BEPUphysics.CollisionShapes.ShapeDistributionInformation@)">
      <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
      <param name="childContributions">List of distribution information associated with each child shape of the whole compound shape used by the compound being split.</param>
      <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
      <param name="distributionInfoA">Volume, volume distribution, and center information about the new form of the original compound collidable.</param>
      <param name="distributionInfoB">Volume, volume distribution, and center information about the new compound collidable.</param>
      <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
      <param name="b">Compound to receive children removed from the original compound.</param>
      <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundHelper.SplitCompound(System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ShapeDistributionInformation},System.Func{BEPUphysics.Collidables.MobileCollidables.CompoundChild,System.Boolean},BEPUphysics.Collidables.MobileCollidables.CompoundCollidable,BEPUphysics.Collidables.MobileCollidables.CompoundCollidable,BEPUphysics.CollisionShapes.ShapeDistributionInformation@,BEPUphysics.CollisionShapes.ShapeDistributionInformation@,System.Single@,System.Single@)">
      <summary>
            Splits a single compound collidable into two separate compound collidables and computes information needed by the simulation.
            </summary>
      <param name="childContributions">List of distribution information associated with each child shape of the whole compound shape used by the compound being split.</param>
      <param name="splitPredicate">Delegate which determines if a child in the original compound should be moved to the new compound.</param>
      <param name="a">Original compound to be split.  Children in this compound will be removed and added to the other compound.</param>
      <param name="b">Compound to receive children removed from the original compound.</param>
      <param name="distributionInfoA">Volume, volume distribution, and center information about the new form of the original compound collidable.</param>
      <param name="distributionInfoB">Volume, volume distribution, and center information about the new compound collidable.</param>
      <param name="weightA">Total weight associated with the new form of the original compound collidable.</param>
      <param name="weightB">Total weight associated with the new compound collidable.</param>
      <returns>Whether or not the predicate returned true for any element in the original compound and split the compound.</returns>
    </member>
    <member name="T:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweep">
      <summary>
            Broad phase implementation that partitions objects into a 2d grid, and then performs a sort and sweep on the final axis.
            </summary>
      <remarks>
            This broad phase typically has very good collision performance and scales well with multithreading, but its query times can sometimes be worse than tree-based systems
            since it must scan cells.  Keeping rays as short as possible helps avoid unnecessary cell checks.
            The performance can degrade noticeably in some situations involving significant off-axis motion.
            </remarks>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweep.#ctor(BEPUphysics.Threading.IThreadManager)">
      <summary>
            Constructs a grid-based sort and sweep broad phase.
            </summary>
      <param name="threadManager">Thread manager to use for the broad phase.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweep.#ctor">
      <summary>
            Constructs a grid-based sort and sweep broad phase.
            </summary>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweep.Add(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Adds an entry to the broad phase.
            </summary>
      <param name="entry">Entry to add.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweep.Remove(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Removes an entry from the broad phase.
            </summary>
      <param name="entry">Entry to remove.</param>
    </member>
    <member name="P:BEPUphysics.BroadPhaseSystems.SortAndSweep.Grid2DSortAndSweep.CellSize">
      <summary>
            Gets or sets the width of cells in the 2D grid.  For sparser, larger scenes, increasing this can help performance.
            For denser scenes, decreasing this may help.
            </summary>
    </member>
    <member name="T:BEPUphysics.Vehicle.WheelSuspension">
      <summary>
            Allows the connected wheel and vehicle to smoothly absorb bumps.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.WheelSuspension.#ctor(System.Single,System.Single,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new suspension for a wheel.
            </summary>
      <param name="stiffnessConstant">Strength of the spring.  Higher values resist compression more.</param>
      <param name="dampingConstant">Damping constant of the spring.  Higher values remove more momentum.</param>
      <param name="localDirection">Direction of the suspension in the vehicle's local space.  For a normal, straight down suspension, this would be (0, -1, 0).</param>
      <param name="restLength">Length of the suspension when uncompressed.</param>
      <param name="localAttachmentPoint">Place where the suspension hooks up to the body of the vehicle.</param>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.AllowedCompression">
      <summary>
            Gets or sets the allowed compression of the suspension before suspension forces take effect.
            Usually a very small number.  Used to prevent 'jitter' where the wheel leaves the ground due to spring forces repeatedly.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.CurrentLength">
      <summary>
            Gets the the current length of the suspension.
            This will be less than the restLength if the suspension is compressed.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.LocalAttachmentPoint">
      <summary>
            Gets or sets the attachment point of the suspension to the vehicle body in the body's local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.LocalDirection">
      <summary>
            Gets or sets the direction of the wheel suspension in the local space of the vehicle body.
            A normal, straight suspension would be (0,-1,0).
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.MaximumSpringCorrectionSpeed">
      <summary>
            Gets or sets the maximum speed at which the suspension will try to return the suspension to rest length.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.MaximumSpringForce">
      <summary>
            Gets or sets the maximum force that can be applied by this suspension.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.RestLength">
      <summary>
            Gets or sets the length of the uncompressed suspension.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.TotalImpulse">
      <summary>
            Gets the force that the suspension is applying to support the vehicle.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.Wheel">
      <summary>
            Gets the wheel that this suspension applies to.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.WorldAttachmentPoint">
      <summary>
            Gets or sets the attachment point of the suspension to the vehicle body in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.WorldDirection">
      <summary>
            Gets or sets the direction of the wheel suspension in the world space of the vehicle body.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.SolverSettings">
      <summary>
            Gets the solver settings used by this wheel constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.SpringSettings">
      <summary>
            Gets the spring settings that define the behavior of the suspension.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.WheelSuspension.RelativeVelocity">
      <summary>
             Gets the relative velocity along the support normal at the contact point.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.StaticMesh">
      <summary>
             Unmoving, collidable triangle mesh.
            </summary>
      <remarks>
             The acceleration structure for the mesh is created individually for each
             StaticMesh; if you want to create many meshes of the same model, consider using the
             InstancedMesh.
             </remarks>
    </member>
    <member name="M:BEPUphysics.Collidables.StaticMesh.#ctor(Microsoft.Xna.Framework.Vector3[],System.Int32[])">
      <summary>
             Constructs a new static mesh.
            </summary>
      <param name="vertices">Vertex positions of the mesh.</param>
      <param name="indices">Index list of the mesh.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.StaticMesh.#ctor(Microsoft.Xna.Framework.Vector3[],System.Int32[],BEPUphysics.MathExtensions.AffineTransform)">
      <summary>
             Constructs a new static mesh.
            </summary>
      <param name="vertices">Vertex positions of the mesh.</param>
      <param name="indices">Index list of the mesh.</param>
      <param name="worldTransform">Transform to use to create the mesh initially.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.StaticMesh.UpdateBoundingBox">
      <summary>
            Updates the bounding box to the current state of the entry.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.StaticMesh.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Tests a ray against the entry.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
      <param name="rayHit">Hit location of the ray on the entry, if any.</param>
      <returns>Whether or not the ray hit the entry.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.StaticMesh.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.RayHit@)">
      <summary>
            Casts a convex shape against the collidable.
            </summary>
      <param name="castShape">Shape to cast.</param>
      <param name="startingTransform">Initial transform of the shape.</param>
      <param name="sweep">Sweep to apply to the shape.</param>
      <param name="hit">Hit data, if any.</param>
      <returns>Whether or not the cast hit anything.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.StaticMesh.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.CollisionShapes.ConvexShapes.TriangleSidedness,BEPUphysics.RayHit@)">
      <summary>
             Tests a ray against the mesh.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length to test in units of the ray direction's length.</param>
      <param name="sidedness">Sidedness to use when raycasting.  Doesn't have to be the same as the mesh's own sidedness.</param>
      <param name="rayHit">Data about the ray's intersection with the mesh, if any.</param>
      <returns>Whether or not the ray hit the mesh.</returns>
    </member>
    <member name="P:BEPUphysics.Collidables.StaticMesh.Mesh">
      <summary>
             Gets the TriangleMesh acceleration structure used by the StaticMesh.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.StaticMesh.WorldTransform">
      <summary>
             Gets or sets the world transform of the mesh.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.StaticMesh.Shape">
      <summary>
             Gets the shape used by the mesh.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.StaticMesh.Sidedness">
      <summary>
             Gets or sets the sidedness of the mesh.  This can be used to ignore collisions and rays coming from a direction relative to the winding of the triangle.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.StaticMesh.ImproveBoundaryBehavior">
      <summary>
            Gets or sets whether or not the collision system should attempt to improve contact behavior at the boundaries between triangles.
            This has a slight performance cost, but prevents objects sliding across a triangle boundary from 'bumping,' and otherwise improves
            the robustness of contacts at edges and vertices.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.StaticMesh.Events">
      <summary>
             Gets the event manager used by the mesh.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.StaticMesh.Material">
      <summary>
             Gets or sets the material used by the mesh.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.StaticMesh.Space">
      <summary>
             Gets the space that owns the mesh.
            </summary>
    </member>
    <member name="T:BEPUphysics.Paths.PathFollowing.EntityMover">
      <summary>
            Pushes an entity around according to goal positions and orientations.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.#ctor(BEPUphysics.Entities.Entity)">
      <summary>
            Constructs a new EntityMover.
            </summary>
      <param name="e">Entity to move.</param>
    </member>
    <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Constraints.SingleEntity.SingleEntityLinearMotor)">
      <summary>
            Constructs a new EntityMover.
            </summary>
      <param name="e">Entity to move.</param>
      <param name="linearMotor">Motor to use for linear motion if the entity is dynamic.</param>
    </member>
    <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.GetLinearVelocity(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Gets the angular velocity necessary to change an entity's orientation from
            the starting quaternion to the ending quaternion over time dt.
            </summary>
      <param name="start">Initial position.</param>
      <param name="end">Final position.</param>
      <param name="dt">Time over which the angular velocity is to be applied.</param>
      <returns>Angular velocity to reach the goal in time.</returns>
    </member>
    <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.OnAdditionToSpace(BEPUphysics.ISpace)">
      <summary>
            Adds the motors to the space.  Called automatically.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.PathFollowing.EntityMover.OnRemovalFromSpace(BEPUphysics.ISpace)">
      <summary>
            Removes the motors from the space.  Called automatically.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.Entity">
      <summary>
            Gets or sets the entity being pushed by the entity mover.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.LinearMotor">
      <summary>
            Gets the linear motor used by the entity mover.
            When the affected entity is dynamic, it is pushed by motors.
            This ensures that its interactions and collisions with
            other entities remain stable.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.LocalOffset">
      <summary>
            Gets or sets the point in the entity's local space that will be moved towards the target position.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.Offset">
      <summary>
            Gets or sets the point attached to the entity in world space that will be moved towards the target position.
            </summary>
    </member>
    <member name="P:BEPUphysics.Paths.PathFollowing.EntityMover.TargetPosition">
      <summary>
            Gets or sets the target location of the entity mover.
            </summary>
    </member>
    <member name="T:BEPUphysics.Paths.CardinalSpline3D">
      <summary>
            Cardinal spline implementation of the 3D hermite curve.  Uses a tension parameter to control
            the tightness of the curve.  When tension is zero, a cardinal spline acts like a Catmull-Rom spline.
            </summary>
    </member>
    <member name="M:BEPUphysics.Paths.CardinalSpline3D.GetCurveIndexBoundsInformation(System.Int32@,System.Int32@)">
      <summary>
            Gets the curve's bounding index information.
            </summary>
      <param name="minIndex">Index of the minimum control point in the active curve segment.</param>
      <param name="maxIndex">Index of the maximum control point in the active curve segment.</param>
    </member>
    <member name="P:BEPUphysics.Paths.CardinalSpline3D.Tension">
      <summary>
            Gets or sets the tension parameter of the cardinal spline.
            A value of 0 acts like a Catmull-Rom spline, while a 
            value of 1 produces 0-length tangents.
            </summary>
    </member>
    <member name="T:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor">
      <summary>
             Accesses an entity's interpolated states.
             Interpolated states are blended states between the previous and current entity states based
             on the time remainder from interal timestepping.
            </summary>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor.#ctor(BEPUphysics.EntityStateManagement.EntityBufferedStates)">
      <summary>
             Constructs a new accessor.
            </summary>
      <param name="bufferedStates">Owning entry.</param>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor.Position">
      <summary>
             Gets the interpolated position of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor.Orientation">
      <summary>
             Gets the interpolated orientation of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor.OrientationMatrix">
      <summary>
             Gets the interpolated orientation matrix of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor.WorldTransform">
      <summary>
             Gets the interpolated world transform of the entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.InterpolatedStatesAccessor.RigidTransform">
      <summary>
             Gets the interpolated rigid transform of the entity.
            </summary>
    </member>
    <member name="T:BEPUphysics.DataStructures.TinyStructList`1">
      <summary>
            Special datatype used for heapless lists without unsafe/stackalloc.
            Since reference types would require heap-side allocation and
            do not match well with this structure's ref-parameter based access,
            only structs are allowed.
            Stores a maximum of 8 entries.
            </summary>
      <typeparam name="T">Struct type to use.</typeparam>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyStructList`1.ToString">
      <summary>
            Creates a string representation of the list.
            </summary>
      <returns>String representation of the list.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Add(`0@)">
      <summary>
            Tries to add an element to the list.
            </summary>
      <param name="item">Item to add.</param>
      <returns>Whether or not the item could be added.
            Will return false when the list is full.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Clear">
      <summary>
            Clears the list.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Get(System.Int32,`0@)">
      <summary>
            Gets the item at the specified index.
            </summary>
      <param name="index">Index to retrieve.</param>
      <param name="item">Retrieved item.</param>
      <returns>Whether or not the index was valid.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyStructList`1.IndexOf(`0@)">
      <summary>
            Gets the index of the item in the list, if it is present.
            </summary>
      <param name="item">Item to look for.</param>
      <returns>Index of the item, if present.  -1 otherwise.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Remove(`0@)">
      <summary>
            Tries to remove an element from the list.
            </summary>
      <param name="item">Item to remove.</param>
      <returns>Whether or not the item existed in the list.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyStructList`1.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">Index of the element to remove.</param>
      <returns>Whether or not the item could be removed.
            Returns false if the index is out of bounds.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.TinyStructList`1.Replace(System.Int32,`0@)">
      <summary>
            Tries to add an element to the list.
            </summary>
      <param name="index">Index to replace.</param>
      <param name="item">Item to add.</param>
      <returns>Whether or not the item could be replaced.
            Returns false if the index is invalid.</returns>
    </member>
    <member name="P:BEPUphysics.DataStructures.TinyStructList`1.Count">
      <summary>
            Gets the current number of elements in the list.
            </summary>
    </member>
    <member name="T:BEPUphysics.DataStructures.RawValueList`1">
      <summary>
             No-frills list used for value types that contain no reference types.
            </summary>
      <typeparam name="T">Type of the elements in the list.</typeparam>
    </member>
    <member name="F:BEPUphysics.DataStructures.RawValueList`1.Elements">
      <summary>
             Directly accessible array of elements in the list.
             Be careful about which operations are applied to the array;
             if in doubt, use the regular access methods.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawValueList`1.#ctor">
      <summary>
             Constructs an empty list.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawValueList`1.#ctor(System.Int32)">
      <summary>
             Constructs an empty list.
            </summary>
      <param name="initialCapacity">Initial capacity of the list.</param>
      <exception cref="T:System.ArgumentException">Thrown when the initial capcity is less than or equal to zero.</exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawValueList`1.RemoveAt(System.Int32)">
      <summary>
             Removes an element from the list.
            </summary>
      <param name="index">Index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is not present in the list.</exception>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawValueList`1.Add(`0@)">
      <summary>
             Adds an element to the list.
            </summary>
      <param name="item">Item to add.</param>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawValueList`1.Clear">
      <summary>
             Clears the list of all elements.
            </summary>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawValueList`1.Remove(`0@)">
      <summary>
             Removes an element from the list.
            </summary>
      <param name="item">Item to remove.</param>
      <returns>Whether or not the item was present in the list.</returns>
    </member>
    <member name="M:BEPUphysics.DataStructures.RawValueList`1.IndexOf(`0@)">
      <summary>
             Gets the index of an element in the list.
            </summary>
      <param name="item">Item to search for.</param>
      <returns>Index of the searched element.</returns>
    </member>
    <member name="P:BEPUphysics.DataStructures.RawValueList`1.Count">
      <summary>
             The number of elements in the list.
            </summary>
    </member>
    <member name="P:BEPUphysics.DataStructures.RawValueList`1.Capacity">
      <summary>
             Gets or sets the current size allocated for the list.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold">
      <summary>
             Manages persistent contacts for two convex collidables.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.#ctor">
      <summary>
             Constructs a new convex-convex manifold.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.Update(System.Single)">
      <summary>
             Updates the manifold.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
      <summary>
             Initializes the manifold.
            </summary>
      <param name="newCollidableA">First collidable.</param>
      <param name="newCollidableB">Second collidable.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.CleanUp">
      <summary>
             Cleans up the manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.PairTester">
      <summary>
             Gets the pair tester used by the manifold to do testing.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.CollidableA">
      <summary>
             Gets the first collidable in the pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.GeneralConvexContactManifold.CollidableB">
      <summary>
            Gets the second collidable in the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.ContactSupplementData">
      <summary>
             Extra data associated with a contact point used to refresh contacts each frame.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.ContactSupplementData.LocalOffsetA">
      <summary>
            Offset from the center of the first object to the contact point in the object's local space.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.ContactSupplementData.LocalOffsetB">
      <summary>
            Offset from the center of the second object to the contact point in the object's local space.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.ContactSupplementData.BasePenetrationDepth">
      <summary>
            Original penetration depth computed at the associatd contact.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleConvexPairHandler">
      <summary>
             Handles a triangle-convex collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleConvexPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleConvexPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleConvexPairHandler.UpdateTimeOfImpact(BEPUphysics.Collidables.Collidable,System.Single)">
      <summary>
             Updates the time of impact for the pair.
            </summary>
      <param name="requester">Collidable requesting the update.</param>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="P:BEPUphysics.NarrowPhaseSystems.Pairs.TriangleConvexPairHandler.ContactManifold">
      <summary>
            Gets the contact manifold used by the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.StaticMeshConvexPairHandler">
      <summary>
             Handles a static mesh-convex collision pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.EntityConstraintCollection">
      <summary>
             Convenience collection for easily scanning the two entity constraints connected to an entity.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.EntityConstraintCollection.Enumerator">
      <summary>
             Enumerator for the EntityConstraintCollection.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.EntityConstraintCollection.Enumerator.#ctor(BEPUphysics.DataStructures.RawList{BEPUphysics.DeactivationManagement.SimulationIslandConnection})">
      <summary>
            Constructs an enumerator for the solver updateables list.
            </summary>
      <param name="connections">List of solver updateables to enumerate.</param>
    </member>
    <member name="M:BEPUphysics.Entities.EntityConstraintCollection.Enumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.Entities.EntityConstraintCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:BEPUphysics.Entities.EntityConstraintCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:BEPUphysics.Entities.EntityConstraintCollection.Enumerator.Current">
      <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
      <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
    </member>
    <member name="M:BEPUphysics.Entities.EntityConstraintCollection.#ctor(BEPUphysics.DataStructures.RawList{BEPUphysics.DeactivationManagement.SimulationIslandConnection})">
      <summary>
            Constructs a new constraint collection.
            </summary>
      <param name="connections">Solver updateables to enumerate over.</param>
    </member>
    <member name="M:BEPUphysics.Entities.EntityConstraintCollection.GetEnumerator">
      <summary>
            Gets an enumerator for the collection.
            </summary>
      <returns>Enumerator for the collection.</returns>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor">
      <summary>
            Tries to rotate two entities so that they reach a specified relative orientation or speed around an axis.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.#ctor">
      <summary>
            Constructs a new constraint tries to rotate two entities so that they reach a specified relative orientation around an axis.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the Basis and TestAxis.
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new constraint tries to rotate two entities so that they reach a specified relative orientation around an axis.
            </summary>
      <param name="connectionA">First connection of the pair.</param>
      <param name="connectionB">Second connection of the pair.</param>
      <param name="freeAxis">Allowed rotation axis of the hinge in world space.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.SetupJointTransforms(Microsoft.Xna.Framework.Vector3)">
      <summary>
            Sets up the joint transforms by automatically creating perpendicular vectors to complete the bases.
            </summary>
      <param name="freeAxis">Axis around which rotation is allowed.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.SolveIteration">
      <summary>
            Computes one iteration of the constraint to meet the solver updateable's goal.
            </summary>
      <returns>The rough applied impulse magnitude.</returns>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.Basis">
      <summary>
            Gets the basis attached to entity A.
            The primary axis represents the motorized axis.
            The x axis and y axis represent a plane against which entity B's attached test axis is project to determine the hinge angle.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.LocalTestAxis">
      <summary>
            Gets or sets the axis attached to entity B in its local space.
            This axis is projected onto the x and y axes of transformA to determine the hinge angle.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.Settings">
      <summary>
            Gets the motor's velocity and servo settings.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.TestAxis">
      <summary>
            Gets or sets the axis attached to entity B in world space.
            This axis is projected onto the x and y axes of transformA to determine the hinge angle.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Motors.RevoluteMotor.Error">
      <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, the error is zero.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SolverGroups.LineSliderJoint">
      <summary>
            Restricts two degrees of linear motion while allowing one degree of angular freedom.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.LineSliderJoint.#ctor">
      <summary>
            Constructs a new constraint which restricts two degrees of linear freedom and two degrees of angular freedom between two entities.
            This constructs the internal constraints, but does not configure them.  Before using a constraint constructed in this manner,
            ensure that its active constituent constraints are properly configured.  The entire group as well as all internal constraints are initially inactive (IsActive = false).
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SolverGroups.LineSliderJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new constraint which restricts two degrees of linear freedom and two degrees of angular freedom between two entities.
            </summary>
      <param name="connectionA">First entity of the constraint pair.</param>
      <param name="connectionB">Second entity of the constraint pair.</param>
      <param name="lineAnchor">Location of the anchor for the line to be attached to connectionA in world space.</param>
      <param name="lineDirection">Axis in world space to be attached to connectionA along which connectionB can move and rotate.</param>
      <param name="pointAnchor">Location of the anchor for the point to be attached to connectionB in world space.</param>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.LineSliderJoint.AngularJoint">
      <summary>
            Gets the angular joint which removes two degrees of freedom.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.LineSliderJoint.Limit">
      <summary>
            Gets the distance limits for the slider.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.LineSliderJoint.Motor">
      <summary>
            Gets the slider motor.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverGroups.LineSliderJoint.PointOnLineJoint">
      <summary>
            Gets the line joint that restricts two linear degrees of freedom.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.TriangleConvexContactManifold">
      <summary>
             Manages persistent contacts between a triangle and convex.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.TriangleConvexContactManifold.#ctor">
      <summary>
             Constructs a new manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.TriangleConvexContactManifold.PairTester">
      <summary>
             Gets the pair tester used by the manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.TriangleConvexContactManifold.Convex">
      <summary>
             Gets the convex associated with the pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.TriangleConvexContactManifold.Triangle">
      <summary>
             Gets the triangle associated with the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex">
      <summary>
             GJK simplex supporting ray-based tests.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.A">
      <summary>
             First vertex in the simplex.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.B">
      <summary>
            Second vertex in the simplex.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.C">
      <summary>
            Third vertex in the simplex.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.D">
      <summary>
            Fourth vertex in the simplex.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.State">
      <summary>
            Current state of the simplex.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.GetPointClosestToOrigin(BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the point on the simplex that is closest to the origin.
            </summary>
      <param name="simplex">Simplex to test.</param>
      <param name="point">Closest point on the simplex.</param>
      <returns>Whether or not the simplex contains the origin.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.GetPointOnSegmentClosestToOrigin(BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Finds the point on the segment to the origin.
            </summary>
      <param name="simplex">Simplex to test.</param>
      <param name="point">Closest point.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.GetPointOnTriangleClosestToOrigin(BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the point on the triangle that is closest to the origin.
            </summary>
      <param name="simplex">Simplex to test.</param>
      <param name="point">Closest point to origin.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.GetPointOnTetrahedronClosestToOrigin(BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the point closest to the origin on the tetrahedron.
            </summary>
      <param name="simplex">Simplex to test.</param>
      <param name="point">Closest point.</param>
      <returns>Whether or not the tetrahedron encloses the origin.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.AddNewSimplexPoint(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex@)">
      <summary>
             Adds a new point to the simplex.
            </summary>
      <param name="point">Point to add.</param>
      <param name="hitLocation">Current ray hit location.</param>
      <param name="shiftedSimplex">Simplex shifted with the hit location.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.RaySimplex.GetErrorTolerance(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the error tolerance for the simplex.
            </summary>
      <param name="rayOrigin">Origin of the ray.</param>
      <returns>Error tolerance of the simplex.</returns>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.TriangleTrianglePairTester">
      <summary>
            Generates candidates between two triangles and manages the persistent state of the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.Vehicle.RaycastWheelShape">
      <summary>
            Uses a raycast as the shape of a wheel.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.#ctor(System.Single,Microsoft.Xna.Framework.Matrix)">
      <summary>
            Creates a new raycast based wheel shape.
            </summary>
      <param name="graphicalRadius">Graphical radius of the wheel.
            This is not used for simulation.  It is only used in
            determining aesthetic properties of a vehicle wheel,
            like position and orientation.</param>
      <param name="localGraphicTransform">Local graphic transform of the wheel shape.
            This transform is applied first when creating the shape's worldTransform.</param>
    </member>
    <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.UpdateWorldTransform">
      <summary>
            Updates the wheel's world transform for graphics.
            Called automatically by the owning wheel at the end of each frame.
            If the engine is updating asynchronously, you can call this inside of a space read buffer lock
            and update the wheel transforms safely.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.FindSupport(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@,BEPUphysics.Entities.Entity@,BEPUphysics.Materials.Material@)">
      <summary>
            Finds a supporting entity, the contact location, and the contact normal.
            </summary>
      <param name="location">Contact point between the wheel and the support.</param>
      <param name="normal">Contact normal between the wheel and the support.</param>
      <param name="suspensionLength">Length of the suspension at the contact.</param>
      <param name="entity">Supporting object.</param>
      <param name="material">Material of the wheel.</param>
      <returns>Whether or not any support was found.</returns>
    </member>
    <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.Initialize">
      <summary>
            Initializes the detector entity and any other necessary logic.
            </summary>
    </member>
    <member name="M:BEPUphysics.Vehicle.RaycastWheelShape.UpdateDetectorPosition">
      <summary>
            Updates the position of the detector before each step.
            </summary>
    </member>
    <member name="P:BEPUphysics.Vehicle.RaycastWheelShape.Radius">
      <summary>
            Gets or sets the graphical radius of the wheel.
            This is not used for simulation.  It is only used in
            determining aesthetic properties of a vehicle wheel,
            like position and orientation.
            </summary>
    </member>
    <member name="T:BEPUphysics.TimeStepSettings">
      <summary>
             Contains settings for the instance's time step.
            </summary>
    </member>
    <member name="F:BEPUphysics.TimeStepSettings.MaximumTimeStepsPerFrame">
      <summary>
            Maximum number of timesteps to perform during a given frame when Space.Update(float) is used.  The unsimulated time will be accumulated for subsequent calls to Space.Update(float).
            Defaults to 3.
            </summary>
    </member>
    <member name="F:BEPUphysics.TimeStepSettings.TimeStepDuration">
      <summary>
            Length of each integration step.  Calling a Space's Update() method moves time forward this much.
            The other method, Space.Update(float), will try to move time forward by the amount specified in the parameter by taking steps of TimeStepDuration size.
            Defaults to 1/60.
            </summary>
    </member>
    <member name="F:BEPUphysics.TimeStepSettings.AccumulatedTime">
      <summary>
            Amount of time accumulated by previous calls to Space.Update(float) that has not yet been simulated.
            </summary>
    </member>
    <member name="T:BEPUphysics.ResourceManagement.LockingResourcePool`1">
      <summary>
            Uses a spinlock to safely access resources.
            </summary>
      <typeparam name="T">Type of object to store in the pool.</typeparam>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.#ctor(System.Int32,System.Action{`0})">
      <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
      <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
      <param name="initializer">Function to initialize new instances in the resource pool with.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.#ctor(System.Int32)">
      <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
      <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.#ctor">
      <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.GiveBack(`0)">
      <summary>
            Gives an item back to the resource pool.
            </summary>
      <param name="item">Item to return.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.Initialize(System.Int32)">
      <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
      <param name="initialResourceCount">Number of resources to include.</param>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.Take">
      <summary>
            Takes an item from the resource pool.
            </summary>
      <returns>Item to take.</returns>
    </member>
    <member name="M:BEPUphysics.ResourceManagement.LockingResourcePool`1.Clear">
      <summary>
            Clears out the resource pool.
            </summary>
    </member>
    <member name="P:BEPUphysics.ResourceManagement.LockingResourcePool`1.Count">
      <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
    </member>
    <member name="T:BEPUphysics.EntityStateManagement.EntityBufferedStates">
      <summary>
             Contains a single entity's buffered states.
            </summary>
    </member>
    <member name="M:BEPUphysics.EntityStateManagement.EntityBufferedStates.#ctor(BEPUphysics.Entities.Entity)">
      <summary>
             Constructs a new buffered states entry.
            </summary>
      <param name="entity">Owning entity.</param>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.EntityBufferedStates.BufferedStatesManager">
      <summary>
             Gets the buffered states manager that owns this entry.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.EntityBufferedStates.States">
      <summary>
             Gets the buffered states accessor for this entity.
             Contains the current snapshot of the entity's states.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.EntityBufferedStates.InterpolatedStates">
      <summary>
             Gets the interpolated states accessor for this entity.
             Contains a blended snapshot between the previous and current states based on the
             internal timestepping remainder.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.EntityBufferedStates.MotionStateIndex">
      <summary>
             Gets the motion state index of this entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.EntityBufferedStates.Entity">
      <summary>
             Gets the entity owning this entry.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionRuleManagement.CollisionGroup">
      <summary>
            A group which can have interaction rules created between it and other collision groups.
            Every entity has a collision group and considers the group's interaction rules in collisions with other entities.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.#ctor">
      <summary>
            Constructs a new collision group.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.DefineCollisionRule(BEPUphysics.CollisionRuleManagement.CollisionGroup,BEPUphysics.CollisionRuleManagement.CollisionGroup,BEPUphysics.CollisionRuleManagement.CollisionRule)">
      <summary>
            Defines the CollisionRule between the two groups for a given space.
            </summary>
      <param name="groupA">First CollisionGroup of the pair.</param>
      <param name="groupB">Second CollisionGroup of the pair.</param>
      <param name="rule">CollisionRule to use between the pair.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.DefineCollisionRulesBetweenSets(System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup},System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup},BEPUphysics.CollisionRuleManagement.CollisionRule)">
      <summary>
            Defines a CollisionRule between every group in the first set and every group in the second set for a given space.
            </summary>
      <param name="aGroups">First set of groups.</param>
      <param name="bGroups">Second set of groups.</param>
      <param name="rule">Collision rule to define between the sets.</param>
      <param name="space">Space to add the rules to.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.DefineCollisionRulesInSet(System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup},BEPUphysics.CollisionRuleManagement.CollisionRule,BEPUphysics.CollisionRuleManagement.CollisionRule)">
      <summary>
            Defines a CollisionRule between every group in a set with itself and the others in the set for a given space.
            </summary>
      <param name="groups">Set of CollisionGroups.</param>
      <param name="self">CollisionRule between each group and itself.</param>
      <param name="other">CollisionRule between each group and every other group in the set.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.DefineCollisionRulesWithSet(BEPUphysics.CollisionRuleManagement.CollisionGroup,System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup},BEPUphysics.CollisionRuleManagement.CollisionRule)">
      <summary>
            Defines a CollisionRule between a group and every group in a set of groups for a given space.
            </summary>
      <param name="group">First CollisionGroup of the pair.</param>
      <param name="groups">Set of CollisionGroups; each group will have its CollisionRule with the first group defined.</param>
      <param name="rule">CollisionRule to use between the pairs.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.RemoveCollisionRule(BEPUphysics.CollisionRuleManagement.CollisionGroup,BEPUphysics.CollisionRuleManagement.CollisionGroup)">
      <summary>
            Removes any rule between the two groups in the space.
            </summary>
      <param name="groupA">First CollisionGroup of the pair.</param>
      <param name="groupB">SecondCollisionGroup of the pair.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.RemoveCollisionRulesBetweenSets(System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup},System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup})">
      <summary>
            Removes any rule between every group in the first set and every group in the second set for a given space.
            </summary>
      <param name="aGroups">First set of groups.</param>
      <param name="bGroups">Second set of groups.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.RemoveCollisionRulesInSet(System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup})">
      <summary>
            Removes any rule between every group in a set with itself and the others in the set for a given space.
            </summary>
      <param name="groups">Set of CollisionGroups.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.RemoveCollisionRulesWithSet(BEPUphysics.CollisionRuleManagement.CollisionGroup,System.Collections.Generic.List{BEPUphysics.CollisionRuleManagement.CollisionGroup})">
      <summary>
            Removes any rule between a group and every group in a set of groups for a given space.
            </summary>
      <param name="group">First CollisionGroup of the pair.</param>
      <param name="groups">Set of CollisionGroups; each group will have its CollisionRule with the first group removed.</param>
    </member>
    <member name="M:BEPUphysics.CollisionRuleManagement.CollisionGroup.GetHashCode">
      <summary>
            Gets a hash code for the object.
            </summary>
      <returns>Hash code for the object.</returns>
    </member>
    <member name="T:BEPUphysics.EntityStateManagement.MotionState">
      <summary>
             State describing the position, orientation, and velocity of an entity.
            </summary>
    </member>
    <member name="F:BEPUphysics.EntityStateManagement.MotionState.Position">
      <summary>
             Position of an entity.
            </summary>
    </member>
    <member name="F:BEPUphysics.EntityStateManagement.MotionState.Orientation">
      <summary>
             Orientation of an entity.
            </summary>
    </member>
    <member name="F:BEPUphysics.EntityStateManagement.MotionState.LinearVelocity">
      <summary>
             Linear velocity of an entity.
            </summary>
    </member>
    <member name="F:BEPUphysics.EntityStateManagement.MotionState.AngularVelocity">
      <summary>
             Angular velocity of an entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.MotionState.OrientationMatrix">
      <summary>
             Orientation matrix of an entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.EntityStateManagement.MotionState.WorldTransform">
      <summary>
             World transform of an entity.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundTerrainPairHandler">
      <summary>
             Handles a compound-terrain collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundTerrainPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundTerrainPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundPairHandler">
      <summary>
             Handles a compound-compound collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.CompoundPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshConvexPairHandler">
      <summary>
             Handles a mobile mesh-convex collision pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshStaticMeshPairHandler">
      <summary>
             Handles a mobile mesh-static mesh collision pair.
            </summary>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshStaticMeshPairHandler.Initialize(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
             Initializes the pair handler.
            </summary>
      <param name="entryA">First entry in the pair.</param>
      <param name="entryB">Second entry in the pair.</param>
    </member>
    <member name="M:BEPUphysics.NarrowPhaseSystems.Pairs.MobileMeshStaticMeshPairHandler.CleanUp">
      <summary>
             Cleans up the pair handler.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SolverSettings">
      <summary>
            Contains information about how a wheel solves its constraints.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.SolverSettings.currentIterations">
      <summary>
            Used to count how many iterations have taken place so far.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.SolverSettings.DefaultMinimumImpulse">
      <summary>
            The value to assign to new constraints' SolverSettings.MinimumImpulse.
            Impulses with magnitudes below this value will count as effectively zero in determining iteration early outs unless changed in the constraint's solver settings.
            High values quicken the short circuit but can cause instability, while low values will often prevent short circuiting, possibly increasing accuracy but harming performance.
            Defaults to .001f.
            </summary>
    </member>
    <member name="F:BEPUphysics.Constraints.SolverSettings.DefaultMinimumIterations">
      <summary>
            The value to assign to new constraints' SolverSettings.MinimumIterations.
            Constraints are able to skip extra calculations if deemed appropriate after they complete the minimum iterations.
            Higher values force the system to wait longer before trying to early out, possibly improving behavior.
            Defaults to 1.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverSettings.MaximumIterations">
      <summary>
            Gets or sets the maximum iterations that the wheel constraint can undergo.
            If the space's iteration count is lower than this, the solver will only attempt
            as many iterations as the space iteration count.
            Lower iteration counts are less accurate, but can improve performance.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverSettings.MinimumIterations">
      <summary>
            Gets or sets the minimum number of iterations that will be applied.
            If an impulse of magnitude smaller than the MinimumImpulse is applied, a 'tiny impulses' counter increases.  Once it exceeds the MinimumIterations,
            the system can decide to stop solving to save time if appropriate.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SolverSettings.MinimumImpulse">
      <summary>
            Gets or sets the lower limit for impulses.  Impulses applied with magnitudes less than this will increment the 'tiny impulse' counter, which is checked
            against the MinimumIterations property.  If there's been too many tiny impulses in a row, then the system will stop trying to solve to save time.
            Higher values will allow the system to give up earlier, but can harm accuracy.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor">
      <summary>
            Constraint which attempts to restrict the relative angular velocity of two entities to some value.
            Can use a target relative orientation to apply additional force.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.#ctor(BEPUphysics.Entities.Entity)">
      <summary>
            Constructs a new constraint which attempts to restrict the relative angular velocity of two entities to some value.
            </summary>
      <param name="entity">Affected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.#ctor">
      <summary>
            Constructs a new constraint which attempts to restrict the relative angular velocity of two entities to some value.
            This constructor will make the angular motor start with isActive set to false.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.SolveIteration">
      <summary>
            Applies the corrective impulses required by the constraint.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.Update(System.Single)">
      <summary>
            Initializes the constraint for the current frame.
            </summary>
      <param name="dt">Time between frames.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.ComputeMaxForces(System.Single,System.Single)">
      <summary>
            Computes the maxForceDt and maxForceDtSquared fields.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.Basis">
      <summary>
            Gets the basis attached to the entity.
            The target velocity/orientation of this motor is transformed by the basis.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.Settings">
      <summary>
            Gets the motor's velocity and servo settings.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.RelativeVelocity">
      <summary>
            Gets the current relative velocity with respect to the constraint.
            For single entity constraints, this is pretty straightforward.  It is taken directly from the 
            entity.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.SingleEntity.SingleEntityAngularMotor.Error">
      <summary>
            Gets the current constraint error.
            If the motor is in velocity only mode, error is zero.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.InstancedMeshConvexContactManifold">
      <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold">
      <summary>
             Manages persistent contact data between two boxes.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold.#ctor">
      <summary>
             Constructs a new manifold.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold.Update(System.Single)">
      <summary>
             Updates the manifold.
            </summary>
      <param name="dt">Timestep duration.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold.Initialize(BEPUphysics.Collidables.Collidable,BEPUphysics.Collidables.Collidable)">
      <summary>
             Initializes the manifold.
            </summary>
      <param name="newCollidableA">First collidable.</param>
      <param name="newCollidableB">Second collidable.</param>
      <exception cref="T:System.Exception">Thrown when the collidables being used are not of the proper type.</exception>
    </member>
    <member name="M:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold.CleanUp">
      <summary>
             Cleans up the manifold.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold.CollidableA">
      <summary>
             Gets the first collidable in the pair.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionTests.Manifolds.BoxContactManifold.CollidableB">
      <summary>
            Gets the second collidable in the pair.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ShapeDistributionInformation">
      <summary>
             Contains data about the distribution of volume in a shape.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.ShapeDistributionInformation.VolumeDistribution">
      <summary>
             The distribution of volume in a shape.
             This can be scaled to create an inertia tensor for a shape.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.ShapeDistributionInformation.Center">
      <summary>
            The center of a shape.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionShapes.ShapeDistributionInformation.Volume">
      <summary>
            The volume of a shape.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape">
      <summary>
             Convex wrapping around a point set.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.#ctor(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
      <summary>
             Constructs a new convex hull shape.
             The point set will be recentered on the local origin.
             If that offset is needed, use the other constructor which outputs the computed center.
            </summary>
      <param name="vertices">Point set to use to construct the convex hull.</param>
      <exception cref="T:System.ArgumentException">Thrown when the point set is empty.</exception>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.#ctor(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Constructs a new convex hull shape.
             The point set will be recentered on the local origin.
            </summary>
      <param name="vertices">Point set to use to construct the convex hull.</param>
      <param name="center">Computed center of the convex hull shape prior to recentering.</param>
      <exception cref="T:System.ArgumentException">Thrown when the point set is empty.</exception>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.#ctor(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Vector3@,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
      <summary>
             Constructs a new convex hull shape.
             The point set will be recentered on the local origin.
            </summary>
      <param name="vertices">Point set to use to construct the convex hull.</param>
      <param name="center">Computed center of the convex hull shape prior to recentering.</param>
      <param name="outputHullTriangleIndices">Triangle indices computed on the surface of the point set.</param>
      <param name="outputUniqueSurfaceVertices">Unique vertices on the surface of the convex hull.</param>
      <exception cref="T:System.ArgumentException">Thrown when the point set is empty.</exception>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
      <param name="shapeTransform">Transform to use.</param>
      <param name="boundingBox">Bounding box of the transformed shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Single@)">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeVolume">
      <summary>
            Computes the volume of the shape.
            </summary>
      <returns>Volume of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Single@,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
      <summary>
             Computes the center, volume, and surface triangles of the convex hull shape.
            </summary>
      <param name="volume">Volume of the hull.</param>
      <param name="outputLocalSurfaceTriangles">Surface triangles of the hull.</param>
      <returns>Center of the hull.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
      <summary>
             Computes the center of a convex hull defined by the point set.
            </summary>
      <param name="vertices">Point set defining the convex hull.</param>
      <returns>Center of the convex hull.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Single@)">
      <summary>
             Computes the center and volume of a convex hull defined by a pointset.
            </summary>
      <param name="vertices">Point set defining the convex hull.</param>
      <param name="volume">Volume of the convex hull.</param>
      <returns>Center of the convex hull.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
      <summary>
             Computes the center and surface triangles of a convex hull defined by a point set.
            </summary>
      <param name="vertices">Point set defining the convex hull.</param>
      <param name="outputLocalSurfaceVertices">Local positions of vertices on the convex hull.</param>
      <returns>Center of the convex hull.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
      <summary>
             Computes the center and surface triangles of a convex hull defined by a point set.
            </summary>
      <param name="vertices">Point set defining the convex hull.</param>
      <param name="outputSurfaceTriangles">Indices of surface triangles of the convex hull.</param>
      <param name="outputLocalSurfaceVertices">Local positions of vertices on the convex hull.</param>
      <returns>Center of the convex hull.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeCenter(System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3},System.Single@,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{Microsoft.Xna.Framework.Vector3})">
      <summary>
             Computes the center, volume, and surface triangles of a convex hull defined by a point set.
            </summary>
      <param name="vertices">Point set defining the convex hull.</param>
      <param name="volume">Volume of the convex hull.</param>
      <param name="outputSurfaceTriangles">Indices of surface triangles of the convex hull.</param>
      <param name="outputLocalSurfaceVertices">Local positions of vertices on the convex hull.</param>
      <returns>Center of the convex hull.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeVolumeDistribution(System.Single@)">
      <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeVolumeDistribution(System.Single,System.Collections.Generic.IList{System.Int32})">
      <summary>
             Computes the volume distribution of the convex hull, its volume, and its surface triangles.
            </summary>
      <param name="volume">Volume of the convex hull.</param>
      <param name="localSurfaceTriangles">Surface triangles of the convex hull.</param>
      <returns>Volume distribution of the convex hull.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeMaximumRadius">
      <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
      <returns>Maximum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.ComputeMinimumRadius">
      <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
      <returns>Minimum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.GetCollidableInstance">
      <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
      <returns>EntityCollidable that uses this shape.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape.Vertices">
      <summary>
             Gets the point set of the convex hull.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape">
      <summary>
             Symmetrical shape with a circular base and a point at the top.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.#ctor(System.Single,System.Single)">
      <summary>
             Constructs a new cone shape.
            </summary>
      <param name="height">Height of the cone.</param>
      <param name="radius">Radius of the cone base.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.GetLocalExtremePointWithoutMargin(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.ComputeMinimumRadius">
      <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
      <returns>Minimum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.ComputeMaximumRadius">
      <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
      <returns>Maximum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.ComputeVolumeDistribution(System.Single@)">
      <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.ComputeCenter">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.ComputeCenter(System.Single@)">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.ComputeVolume">
      <summary>
            Computes the volume of the shape.
            </summary>
      <returns>Volume of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.GetCollidableInstance">
      <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
      <returns>EntityCollidable that uses this shape.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.Height">
      <summary>
             Gets or sets the height of the cone.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.ConeShape.Radius">
      <summary>
             Gets or sets the radius of the cone base.
            </summary>
    </member>
    <member name="T:BEPUphysics.BroadPhaseSystems.SortAndSweep.SortAndSweep1D">
      <summary>
            Simple and standard implementation of the one-axis sort and sweep (sweep and prune) algorithm.
            </summary>
      <remarks>
            In small scenarios, it can be the quickest option.  It uses very little memory.
            However, it tends to scale poorly relative to other options and can slow down significantly when entries cluster along the axis.
            Additionally, it supports no queries at all.
            </remarks>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.SortAndSweep1D.#ctor(BEPUphysics.Threading.IThreadManager)">
      <summary>
            Constructs a new sort and sweep broad phase.
            </summary>
      <param name="threadManager">Thread manager to use in the broad phase.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.SortAndSweep1D.#ctor">
      <summary>
            Constructs a new sort and sweep broad phase.
            </summary>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.SortAndSweep1D.Add(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Adds an entry to the broad phase.
            </summary>
      <param name="entry">Entry to add.</param>
    </member>
    <member name="M:BEPUphysics.BroadPhaseSystems.SortAndSweep.SortAndSweep1D.Remove(BEPUphysics.BroadPhaseSystems.BroadPhaseEntry)">
      <summary>
            Removes an entry from the broad phase.
            </summary>
      <param name="entry">Entry to remove.</param>
    </member>
    <member name="T:BEPUphysics.Threading.SpecializedThreadManager">
      <summary>
            Manages the engine's threads.
            </summary>
      <remarks>
            Separates the management of ThreadTasks and loops
            into specialized systems.  Should have generally higher
            performance than the SimpleThreadManager.
            </remarks>
    </member>
    <member name="M:BEPUphysics.Threading.SpecializedThreadManager.#ctor">
      <summary>
            Constructs a new specialized thread manager
            that manages loops and tasks separately.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SpecializedThreadManager.Finalize">
      <summary>
            Releases resources used by the object.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SpecializedThreadManager.AddThread">
      <summary>
            Adds a new worker thread to the engine.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SpecializedThreadManager.AddThread(System.Action{System.Object},System.Object)">
      <summary>
            Adds a new worker thread to the engine.
            </summary>
      <param name="initialization">Function that the new thread will call before entering its work loop.</param>
      <param name="initializationInformation">Data to give the initializer.</param>
    </member>
    <member name="M:BEPUphysics.Threading.SpecializedThreadManager.RemoveThread">
      <summary>
            Removes a worker thread from the engine.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SpecializedThreadManager.EnqueueTask(System.Action{System.Object},System.Object)">
      <summary>
            Enqueues a task to the thread manager.
            This should be safe to call from multiple threads and from other tasks.
            </summary>
      <param name="taskBody">Method to run.</param>
      <param name="taskInformation">Data to give to the task.</param>
    </member>
    <member name="M:BEPUphysics.Threading.SpecializedThreadManager.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
      <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
      <param name="startIndex">Inclusive starting index.</param>
      <param name="endIndex">Exclusive ending index.</param>
      <param name="loopBody">Function that handles an individual iteration of the loop.</param>
    </member>
    <member name="M:BEPUphysics.Threading.SpecializedThreadManager.WaitForTaskCompletion">
      <summary>
            Waits until all tasks enqueued using enqueueTask are complete.
            </summary>
    </member>
    <member name="M:BEPUphysics.Threading.SpecializedThreadManager.Dispose">
      <summary>
            Releases resources used by the object.
            </summary>
    </member>
    <member name="P:BEPUphysics.Threading.SpecializedThreadManager.LoopManager">
      <summary>
            Gets or sets the loop manager used by this threading system.
            The loop manager is used to specifically parallelize forloops.
            </summary>
    </member>
    <member name="P:BEPUphysics.Threading.SpecializedThreadManager.TaskManager">
      <summary>
            Gets or sets the task manager used by this threading system.
            The task manager is used for anything that isn't strictly a 
            for loop.
            </summary>
    </member>
    <member name="P:BEPUphysics.Threading.SpecializedThreadManager.ThreadCount">
      <summary>
            Gets the number of threads in use by the manager.
            </summary>
    </member>
    <member name="T:BEPUphysics.Paths.CurveEndpointBehavior">
      <summary>
            Defines how a curve behaves beyond an endpoint.
            </summary>
    </member>
    <member name="F:BEPUphysics.Paths.CurveEndpointBehavior.Wrap">
      <summary>
            When the time exceeds the endpoint, it wraps around to the other end of the curve.
            </summary>
    </member>
    <member name="F:BEPUphysics.Paths.CurveEndpointBehavior.Clamp">
      <summary>
            Times exceeding the endpoint are clamped to the endpoint's value.
            </summary>
    </member>
    <member name="F:BEPUphysics.Paths.CurveEndpointBehavior.Mirror">
      <summary>
            Times exceeding the endpoint will reverse direction and sample backwards.
            </summary>
    </member>
    <member name="T:BEPUphysics.MathExtensions.Matrix3X3">
      <summary>
            3 row, 3 column matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M11">
      <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M12">
      <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M13">
      <summary>
            Value at row 1, column 3 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M21">
      <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M22">
      <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M23">
      <summary>
            Value at row 2, column 3 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M31">
      <summary>
            Value at row 3, column 1 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M32">
      <summary>
            Value at row 3, column 2 of the matrix.
            </summary>
    </member>
    <member name="F:BEPUphysics.MathExtensions.Matrix3X3.M33">
      <summary>
            Value at row 3, column 3 of the matrix.
            </summary>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a new 3 row, 3 column matrix.
            </summary>
      <param name="m11">Value at row 1, column 1 of the matrix.</param>
      <param name="m12">Value at row 1, column 2 of the matrix.</param>
      <param name="m13">Value at row 1, column 3 of the matrix.</param>
      <param name="m21">Value at row 2, column 1 of the matrix.</param>
      <param name="m22">Value at row 2, column 2 of the matrix.</param>
      <param name="m23">Value at row 2, column 3 of the matrix.</param>
      <param name="m31">Value at row 3, column 1 of the matrix.</param>
      <param name="m32">Value at row 3, column 2 of the matrix.</param>
      <param name="m33">Value at row 3, column 3 of the matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Add(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
      <param name="a">First matrix to add.</param>
      <param name="b">Second matrix to add.</param>
      <param name="result">Sum of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Add(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
      <param name="a">First matrix to add.</param>
      <param name="b">Second matrix to add.</param>
      <param name="result">Sum of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Add(BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
      <param name="a">First matrix to add.</param>
      <param name="b">Second matrix to add.</param>
      <param name="result">Sum of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Add(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Adds the two matrices together on a per-element basis.
            </summary>
      <param name="a">First matrix to add.</param>
      <param name="b">Second matrix to add.</param>
      <param name="result">Sum of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateCrossProduct(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Creates a skew symmetric matrix M from vector A such that M * B for some other vector B is equivalent to the cross product of A and B.
            </summary>
      <param name="v">Vector to base the matrix on.</param>
      <param name="result">Skew-symmetric matrix result.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateFromMatrix(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Creates a 3x3 matrix from an XNA 4x4 matrix.
            </summary>
      <param name="matrix4X4">Matrix to extract a 3x3 matrix from.</param>
      <param name="matrix3X3">Upper 3x3 matrix extracted from the XNA matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateFromMatrix(Microsoft.Xna.Framework.Matrix)">
      <summary>
            Creates a 3x3 matrix from an XNA 4x4 matrix.
            </summary>
      <param name="matrix4X4">Matrix to extract a 3x3 matrix from.</param>
      <returns>Upper 3x3 matrix extracted from the XNA matrix.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Constructs a uniform scaling matrix.
            </summary>
      <param name="scale">Value to use in the diagonal.</param>
      <param name="matrix">Scaling matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(System.Single)">
      <summary>
            Constructs a uniform scaling matrix.
            </summary>
      <param name="scale">Value to use in the diagonal.</param>
      <returns>Scaling matrix.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Constructs a non-uniform scaling matrix.
            </summary>
      <param name="scale">Values defining the axis scales.</param>
      <param name="matrix">Scaling matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Constructs a non-uniform scaling matrix.
            </summary>
      <param name="scale">Values defining the axis scales.</param>
      <returns>Scaling matrix.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(System.Single,System.Single,System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Constructs a non-uniform scaling matrix.
            </summary>
      <param name="x">Scaling along the x axis.</param>
      <param name="y">Scaling along the y axis.</param>
      <param name="z">Scaling along the z axis.</param>
      <param name="matrix">Scaling matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateScale(System.Single,System.Single,System.Single)">
      <summary>
            Constructs a non-uniform scaling matrix.
            </summary>
      <param name="x">Scaling along the x axis.</param>
      <param name="y">Scaling along the y axis.</param>
      <param name="z">Scaling along the z axis.</param>
      <returns>Scaling matrix.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Invert(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Inverts the given matix.
            </summary>
      <param name="matrix">Matrix to be inverted.</param>
      <param name="result">Inverted matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.AdaptiveInvert(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Inverts the largest nonsingular submatrix in the matrix, excluding 2x2's that involve M13 or M31, and excluding 1x1's that include nondiagonal elements.
            </summary>
      <param name="matrix">Matrix to be inverted.</param>
      <param name="result">Inverted matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.op_Multiply(BEPUphysics.MathExtensions.Matrix3X3,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Multiplies the two matrices.
            </summary>
      <param name="a">First matrix to multiply.</param>
      <param name="b">Second matrix to multiply.</param>
      <returns>Product of the multiplication.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Multiply(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Multiplies the two matrices.
            </summary>
      <param name="a">First matrix to multiply.</param>
      <param name="b">Second matrix to multiply.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Multiply(BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Multiplies the two matrices.
            </summary>
      <param name="a">First matrix to multiply.</param>
      <param name="b">Second matrix to multiply.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Multiply(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Multiplies the two matrices.
            </summary>
      <param name="a">First matrix to multiply.</param>
      <param name="b">Second matrix to multiply.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.MultiplyTransposed(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Multiplies a transposed matrix with another matrix.
            </summary>
      <param name="matrix">Matrix to be multiplied.</param>
      <param name="transpose">Matrix to be transposed and multiplied.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.MultiplyByTransposed(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Multiplies a matrix with a transposed matrix.
            </summary>
      <param name="matrix">Matrix to be multiplied.</param>
      <param name="transpose">Matrix to be transposed and multiplied.</param>
      <param name="result">Product of the multiplication.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Multiply(BEPUphysics.MathExtensions.Matrix3X3@,System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Scales the matrix.
            </summary>
      <param name="matrix">Matrix to scale.</param>
      <param name="scale">Amount to scale.</param>
      <param name="result">Scaled matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Negate(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Negates every element in the matrix.
            </summary>
      <param name="matrix">Matrix to negate.</param>
      <param name="result">Negated matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Subtract(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Subtracts the two matrices from each other on a per-element basis.
            </summary>
      <param name="a">First matrix to subtract.</param>
      <param name="b">Second matrix to subtract.</param>
      <param name="result">Difference of the two matrices.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.ToMatrix4X4(BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
      <param name="a">3x3 matrix.</param>
      <param name="b">Created 4x4 matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.ToMatrix4X4(BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
      <param name="a">3x3 matrix.</param>
      <returns>Created 4x4 matrix.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transform(Microsoft.Xna.Framework.Vector3,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Transforms the vector by the matrix.
            </summary>
      <param name="v">Vector3 to transform.</param>
      <param name="matrix">Matrix to use as the transformation.</param>
      <returns>Product of the transformation.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transform(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Transforms the vector by the matrix.
            </summary>
      <param name="v">Vector3 to transform.</param>
      <param name="matrix">Matrix to use as the transformation.</param>
      <param name="result">Product of the transformation.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Transforms the vector by the matrix.
            </summary>
      <param name="v">Vector3 to transform.</param>
      <param name="matrix">Matrix to use as the transformation.</param>
      <param name="result">Product of the transformation.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.TransformTranspose(Microsoft.Xna.Framework.Vector3,BEPUphysics.MathExtensions.Matrix3X3)">
      <summary>
            Transforms the vector by the matrix's transpose.
            </summary>
      <param name="v">Vector3 to transform.</param>
      <param name="matrix">Matrix to use as the transformation transpose.</param>
      <returns>Product of the transformation.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.TransformTranspose(Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Transforms the vector by the matrix's transpose.
            </summary>
      <param name="v">Vector3 to transform.</param>
      <param name="matrix">Matrix to use as the transformation transpose.</param>
      <param name="result">Product of the transformation.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.TransformTranspose(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Transforms the vector by the matrix's transpose.
            </summary>
      <param name="v">Vector3 to transform.</param>
      <param name="matrix">Matrix to use as the transformation transpose.</param>
      <param name="result">Product of the transformation.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transpose(BEPUphysics.MathExtensions.Matrix3X3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Computes the transposed matrix of a matrix.
            </summary>
      <param name="matrix">Matrix to transpose.</param>
      <param name="result">Transposed matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Transpose(Microsoft.Xna.Framework.Matrix@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Computes the transposed matrix of a matrix.
            </summary>
      <param name="matrix">Matrix to transpose.</param>
      <param name="result">Transposed matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.ToString">
      <summary>
            Creates a string representation of the matrix.
            </summary>
      <returns>A string representation of the matrix.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.Determinant">
      <summary>
            Calculates the determinant of the matrix.
            </summary>
      <returns>The matrix's determinant.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.AdaptiveDeterminant(System.Int32@)">
      <summary>
            Calculates the determinant of largest nonsingular submatrix, excluding 2x2's that involve M13 or M31, and excluding all 1x1's that involve nondiagonal elements.
            </summary>
      <param name="subMatrixCode">Represents the submatrix that was used to compute the determinant.
            0 is the full 3x3.  1 is the upper left 2x2.  2 is the lower right 2x2.  3 is the four corners.
            4 is M11.  5 is M22.  6 is M33.</param>
      <returns>The matrix's determinant.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateQuaternion(BEPUphysics.MathExtensions.Matrix3X3@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
            Constructs a quaternion from a 3x3 rotation matrix.
            </summary>
      <param name="r">Rotation matrix to create the quaternion from.</param>
      <param name="q">Quaternion based on the rotation matrix.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Creates a 3x3 matrix representing the orientation stored in the quaternion.
            </summary>
      <param name="quaternion">Quaternion to use to create a matrix.</param>
      <param name="result">Matrix representing the quaternion's orientation.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateOuterProduct(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Computes the outer product of the given vectors.
            </summary>
      <param name="a">First vector.</param>
      <param name="b">Second vector.</param>
      <param name="result">Outer product result.</param>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>
            Creates a matrix representing a rotation of a given angle around a given axis.
            </summary>
      <param name="axis">Axis around which to rotate.</param>
      <param name="angle">Amount to rotate.</param>
      <returns>Matrix representing the rotation.</returns>
    </member>
    <member name="M:BEPUphysics.MathExtensions.Matrix3X3.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,BEPUphysics.MathExtensions.Matrix3X3@)">
      <summary>
            Creates a matrix representing a rotation of a given angle around a given axis.
            </summary>
      <param name="axis">Axis around which to rotate.</param>
      <param name="angle">Amount to rotate.</param>
      <param name="result">Matrix representing the rotation.</param>
    </member>
    <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Identity">
      <summary>
            Gets the 3x3 identity matrix.
            </summary>
    </member>
    <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Backward">
      <summary>
            Gets or sets the backward vector of the matrix.
            </summary>
    </member>
    <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Down">
      <summary>
            Gets or sets the down vector of the matrix.
            </summary>
    </member>
    <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Forward">
      <summary>
            Gets or sets the forward vector of the matrix.
            </summary>
    </member>
    <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Left">
      <summary>
            Gets or sets the left vector of the matrix.
            </summary>
    </member>
    <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Right">
      <summary>
            Gets or sets the right vector of the matrix.
            </summary>
    </member>
    <member name="P:BEPUphysics.MathExtensions.Matrix3X3.Up">
      <summary>
            Gets or sets the up vector of the matrix.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.SimplexState">
      <summary>
             Defines the state of a simplex.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex">
      <summary>
             Stored simplex used to warmstart closest point GJK runs.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex.LocalSimplexA">
      <summary>
             Simplex in the local space of shape A.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex.LocalSimplexB">
      <summary>
             Simplex in the local space of shape B.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex.State">
      <summary>
            State of the simplex at the termination of the last GJK run.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.ContributingShapeSimplex">
      <summary>
             List of points composing a shape's contributions to a simplex.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex">
      <summary>
             GJK simplex used to support closest point tests with warmstarting.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.ProgressionEpsilon">
      <summary>
             The baseline amount that a GJK iteration must progress through to avoid exiting.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.DistanceConvergenceEpsilon">
      <summary>
            The baseline amount that an iteration must converge with its distance to avoid exiting.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.SimplexA">
      <summary>
             Simplex as viewed from the local space of A.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.SimplexB">
      <summary>
             Simplex as viewed from the local space of B.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.U">
      <summary>
            Weight of vertex A.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.V">
      <summary>
            Weight of vertex B.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.W">
      <summary>
            Weight of vertex C.
            </summary>
    </member>
    <member name="F:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.LocalTransformB">
      <summary>
            Transform of the second shape in the first shape's local space.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.#ctor(BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex@,BEPUphysics.MathExtensions.RigidTransform@)">
      <summary>
             Constructs a new pair simplex.
            </summary>
      <param name="cachedSimplex">Cached simplex to use to warmstart the simplex.</param>
      <param name="localTransformB">Transform of shape B in the local space of A.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.UpdateCachedSimplex(BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.CachedSimplex@)">
      <summary>
             Updates the cached simplex with the latest run's results.
            </summary>
      <param name="simplex">Simplex to update.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.GetPointClosestToOrigin(Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the point on the simplex closest to the origin.
            </summary>
      <param name="point">Point closest to the origin.</param>
      <returns>Whether or not the simplex encloses the origin.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.GetPointOnSegmentClosestToOrigin(Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the point on the segment closest to the origin.
            </summary>
      <param name="point">Point closest to origin.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.GetPointOnTriangleClosestToOrigin(Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the point on the triangle closest to the origin.
            </summary>
      <param name="point">Point closest to origin.</param>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.GetPointOnTetrahedronClosestToOrigin(Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the point on the tetrahedron closest to the origin.
            </summary>
      <param name="point">Closest point to the origin.</param>
      <returns>Whether or not the tetrahedron encloses the origin.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.GetNewSimplexPoint(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,System.Int32,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Adds a new point to the simplex.
            </summary>
      <param name="shapeA">First shape in the pair.</param>
      <param name="shapeB">Second shape in the pair.</param>
      <param name="iterationCount">Current iteration count.</param>
      <param name="closestPoint">Current point on simplex closest to origin.</param>
      <returns>Whether or not GJK should exit due to a lack of progression.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.GetClosestPoints(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the closest points by using the barycentric coordinates and shape simplex contributions.
            </summary>
      <param name="closestPointA">Closest point on shape A.</param>
      <param name="closestPointB">Closest point on shape B.</param>
    </member>
    <member name="P:BEPUphysics.CollisionTests.CollisionAlgorithms.GJK.PairSimplex.ErrorTolerance">
      <summary>
             Gets the error tolerance of the simplex.
            </summary>
    </member>
    <member name="T:BEPUphysics.OtherSpaceStages.BoundingBoxUpdater">
      <summary>
             Updates the bounding box of managed objects.
            </summary>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.BoundingBoxUpdater.#ctor(BEPUphysics.TimeStepSettings)">
      <summary>
             Constructs the bounding box updater.
            </summary>
      <param name="timeStepSettings">Time step setttings to be used by the updater.</param>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.BoundingBoxUpdater.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs the bounding box updater.
            </summary>
      <param name="timeStepSettings">Time step setttings to be used by the updater.</param>
      <param name="threadManager">Thread manager to be used by the updater.</param>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.BoundingBoxUpdater.Add(BEPUphysics.Collidables.MobileCollidables.MobileCollidable)">
      <summary>
             Adds an entry to the updater.
            </summary>
      <param name="entry">Entry to add.</param>
    </member>
    <member name="M:BEPUphysics.OtherSpaceStages.BoundingBoxUpdater.Remove(BEPUphysics.Collidables.MobileCollidables.MobileCollidable)">
      <summary>
             Removes an entry from the updater.
            </summary>
      <param name="entry">Entry to remove.</param>
    </member>
    <member name="P:BEPUphysics.OtherSpaceStages.BoundingBoxUpdater.TimeStepSettings">
      <summary>
             Gets or sets the time step settings used by the updater.
            </summary>
    </member>
    <member name="T:BEPUphysics.Entities.Prefabs.MinkowskiSum">
      <summary>
            Shape representing the sweeping of one entity through another.  Can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
    </member>
    <member name="F:BEPUphysics.Entities.Prefabs.MinkowskiSum.EntityA">
      <summary>
            First entity in the sum.
            </summary>
    </member>
    <member name="F:BEPUphysics.Entities.Prefabs.MinkowskiSum.EntityB">
      <summary>
            Second entity in the sum.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.MinkowskiSum.#ctor(Microsoft.Xna.Framework.Vector3,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,System.Single)">
      <summary>
            Constructs a dynamic minkowski sum.
            </summary>
      <param name="position">Position of the resulting shape.</param>
      <param name="a">First entity in the sum.</param>
      <param name="b">Second entity in the sum.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.MinkowskiSum.#ctor(Microsoft.Xna.Framework.Vector3,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry)">
      <summary>
            Constructs a nondynamic minkowski sum of two entities.
            </summary>
      <param name="position">Position of the resulting shape.</param>
      <param name="a">First entity in the sum.</param>
      <param name="b">Second entity in the sum.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.MinkowskiSum.#ctor(BEPUphysics.EntityStateManagement.MotionState,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,System.Single)">
      <summary>
            Constructs a dynamic minkowski sum of two entities.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="a">First entity in the sum.</param>
      <param name="b">Second entity in the sum.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.MinkowskiSum.#ctor(BEPUphysics.EntityStateManagement.MotionState,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry,BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry)">
      <summary>
            Constructs a nondynamic minkowski sum of two entities.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="a">First entity in the sum.</param>
      <param name="b">Second entity in the sum.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.MinkowskiSum.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry},System.Single)">
      <summary>
            Constructs a dynamic minkowski sum entity.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="shapes">List of shapes to make the sum frmo.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.MinkowskiSum.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Collections.Generic.IList{BEPUphysics.CollisionShapes.ConvexShapes.OrientedConvexShapeEntry})">
      <summary>
            Constructs a nondynamic minkowski sum.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="shapes">List of shapes to make the sum frmo.</param>
    </member>
    <member name="T:BEPUphysics.Entities.Prefabs.Cone">
      <summary>
            Cone-shaped object that can collide and move.  After making an entity, add it to a Space so that the engine can manage it.
            </summary>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Cone.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a physically simulated cone.
            </summary>
      <param name="position">Position of the cone.</param>
      <param name="height">Height of the cone.</param>
      <param name="radius">Radius of the cone.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Cone.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>
            Constructs a nondynamic cone.
            </summary>
      <param name="position">Position of the cone.</param>
      <param name="height">Height of the cone.</param>
      <param name="radius">Radius of the cone.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Cone.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single,System.Single)">
      <summary>
            Constructs a physically simulated cone.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="height">Height of the cone.</param>
      <param name="radius">Radius of the cone.</param>
      <param name="mass">Mass of the object.</param>
    </member>
    <member name="M:BEPUphysics.Entities.Prefabs.Cone.#ctor(BEPUphysics.EntityStateManagement.MotionState,System.Single,System.Single)">
      <summary>
            Constructs a nondynamic cone.
            </summary>
      <param name="motionState">Motion state specifying the entity's initial state.</param>
      <param name="height">Height of the cone.</param>
      <param name="radius">Radius of the cone.</param>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Cone.Height">
      <summary>
            Gets or sets the length of the cone.
            </summary>
    </member>
    <member name="P:BEPUphysics.Entities.Prefabs.Cone.Radius">
      <summary>
            Gets or sets the radius of the cone.
            </summary>
    </member>
    <member name="T:BEPUphysics.DeactivationManagement.DeactivationManager">
      <summary>
             Manages the sleeping states of objects.
            </summary>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.#ctor(BEPUphysics.TimeStepSettings)">
      <summary>
             Constructs a deactivation manager.
            </summary>
      <param name="timeStepSettings">The time step settings used by the manager.</param>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.#ctor(BEPUphysics.TimeStepSettings,BEPUphysics.Threading.IThreadManager)">
      <summary>
             Constructs a deactivation manager.
            </summary>
      <param name="timeStepSettings">The time step settings used by the manager.</param>
      <param name="threadManager">Thread manager used by the manager.</param>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.Add(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
      <summary>
             Adds a simulation island member to the manager.
            </summary>
      <param name="simulationIslandMember">Member to add.</param>
      <exception cref="T:System.Exception">Thrown if the member already belongs to a manager.</exception>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.Remove(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
      <summary>
            Removes the member from this island.
            </summary>
      <param name="simulationIslandMember">Removes the member from the manager.</param>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.Add(BEPUphysics.DeactivationManagement.SimulationIslandConnection)">
      <summary>
             Adds a simulation island connection to the deactivation manager.
            </summary>
      <param name="connection">Connection to add.</param>
      <exception cref="T:System.ArgumentException">Thrown if the connection already belongs to a manager.</exception>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.Remove(BEPUphysics.DeactivationManagement.SimulationIslandConnection)">
      <summary>
             Removes a simulation island connection from the manager.
            </summary>
      <param name="connection">Connection to remove from the manager.</param>
      <exception cref="T:System.ArgumentException">Thrown if the connection does not belong to this manager.</exception>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.TryToSplit(BEPUphysics.DeactivationManagement.SimulationIslandMember,BEPUphysics.DeactivationManagement.SimulationIslandMember)">
      <summary>
            Tries to split connections between the two island members.
            </summary>
      <param name="member1">First island member.</param>
      <param name="member2">Second island member.</param>
      <returns>Whether a split operation was run.  This does not mean a split was
            successful, just that the expensive test was performed.</returns>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.RemoveSimulationIslandFromMember(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
      <summary>
             Strips a member of its simulation island.
            </summary>
      <param name="member">Member to be stripped.</param>
    </member>
    <member name="M:BEPUphysics.DeactivationManagement.DeactivationManager.AddSimulationIslandToMember(BEPUphysics.DeactivationManagement.SimulationIslandMember)">
      <summary>
             Adds a simulation island to a member.
            </summary>
      <param name="member">Member to gain a simulation island.</param>
      <exception cref="T:System.Exception">Thrown if the member already has a simulation island.</exception>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.VelocityLowerLimit">
      <summary>
             Gets or sets the velocity under which the deactivation system will consider 
             objects to be deactivation candidates (if their velocity stays below the limit
             for the LowVelocityTimeMinimum).
             Defaults to 0.26.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.LowVelocityTimeMinimum">
      <summary>
            Gets or sets the time limit above which the deactivation system will consider
            objects to be deactivation candidates (if their velocity stays below the VelocityLowerLimit for the duration).
            Defaults to 1.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.UseStabilization">
      <summary>
             Gets or sets whether or not to use a stabilization effect on nearly motionless objects.
             This removes a lot of energy from a system when things are settling down, allowing them to go 
             to sleep faster.  It also makes most simulations appear a lot more robust.
             Defaults to true.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.MaximumDeactivationsPerFrame">
      <summary>
             Gets or sets the maximum number of objects to attempt to deactivate each frame.
             Defaults to 100.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.TimeStepSettings">
      <summary>
             Gets or sets the time step settings used by the deactivation manager.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.SimulationIslands">
      <summary>
             Gets the simulation islands currently in the manager.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.MaximumSplitAttemptsFraction">
      <summary>
            Gets or sets the fraction of splits that the deactivation manager will attempt in a single frame.
            The total splits queued multiplied by this value results in the number of splits managed.
            Defaults to .04f.
            </summary>
    </member>
    <member name="P:BEPUphysics.DeactivationManagement.DeactivationManager.MinimumSplitAttempts">
      <summary>
            Gets or sets the minimum number of splits attempted in a single frame.
            Defaults to 5.
            </summary>
    </member>
    <member name="T:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint">
      <summary>
            Constrains two bodies so that they can rotate relative to each other like a modified door hinge.
            Instead of removing two degrees of freedom, only one is removed so that the second connection to the constraint can twist.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.#ctor">
      <summary>
            Constructs a new constraint which allows relative angular motion around a hinge axis and a twist axis.
            To finish the initialization, specify the connections (ConnectionA and ConnectionB) 
            as well as the WorldHingeAxis and WorldTwistAxis (or their entity-local versions).
            This constructor sets the constraint's IsActive property to false by default.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.#ctor(BEPUphysics.Entities.Entity,BEPUphysics.Entities.Entity,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
            Constructs a new constraint which allows relative angular motion around a hinge axis and a twist axis.
            </summary>
      <param name="connectionA">First connection of the pair.</param>
      <param name="connectionB">Second connection of the pair.</param>
      <param name="worldHingeAxis">Hinge axis attached to connectionA.
            The connected entities will be able to rotate around this axis relative to each other.</param>
      <param name="worldTwistAxis">Twist axis attached to connectionB.
            The connected entities will be able to rotate around this axis relative to each other.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.GetLinearJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.GetLinearJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the linear jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Linear jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.GetAngularJacobianA(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the first connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the first connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.GetAngularJacobianB(Microsoft.Xna.Framework.Vector3@)">
      <summary>
            Gets the angular jacobian entry for the second connected entity.
            </summary>
      <param name="jacobian">Angular jacobian entry for the second connected entity.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.GetMassMatrix(System.Single@)">
      <summary>
            Gets the mass matrix of the constraint.
            </summary>
      <param name="outputMassMatrix">Constraint's mass matrix.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.SolveIteration">
      <summary>
            Solves for velocity.
            </summary>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.Update(System.Single)">
      <summary>
            Do any necessary computations to prepare the constraint for this frame.
            </summary>
      <param name="dt">Simulation step length.</param>
    </member>
    <member name="M:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.ExclusiveUpdate">
      <summary>
            Performs any pre-solve iteration work that needs exclusive
            access to the members of the solver updateable.
            Usually, this is used for applying warmstarting impulses.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.LocalHingeAxis">
      <summary>
            Gets or sets the hinge axis attached to entity A in its local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.LocalTwistAxis">
      <summary>
            Gets or sets the twist axis attached to entity B in its local space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.WorldHingeAxis">
      <summary>
            Gets or sets the hinge axis attached to entity A in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.WorldTwistAxis">
      <summary>
            Gets or sets the axis attached to the first connected entity in world space.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.RelativeVelocity">
      <summary>
            Gets the current relative velocity between the connected entities with respect to the constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.TotalImpulse">
      <summary>
            Gets the total impulse applied by this constraint.
            </summary>
    </member>
    <member name="P:BEPUphysics.Constraints.TwoEntity.Joints.SwivelHingeAngularJoint.Error">
      <summary>
            Gets the current constraint error.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape">
      <summary>
             Symmetrical object with a circular bottom and top.
            </summary>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.#ctor(System.Single,System.Single)">
      <summary>
             Constructs a new cylinder shape.
            </summary>
      <param name="height">Height of the cylinder.</param>
      <param name="radius">Radius of the cylinder.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.GetBoundingBox(BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>
            Gets the bounding box of the shape given a transform.
            </summary>
      <param name="shapeTransform">Transform to use.</param>
      <param name="boundingBox">Bounding box of the transformed shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.GetLocalExtremePointWithoutMargin(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Gets the extreme point of the shape in local space in a given direction.
            </summary>
      <param name="direction">Direction to find the extreme point in.</param>
      <param name="extremePoint">Extreme point on the shape.</param>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.ComputeMaximumRadius">
      <summary>
            Computes the maximum radius of the shape.
            This is often larger than the actual maximum radius;
            it is simply an approximation that avoids underestimating.
            </summary>
      <returns>Maximum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.ComputeMinimumRadius">
      <summary>
             Computes the minimum radius of the shape.
             This is often smaller than the actual minimum radius;
             it is simply an approximation that avoids overestimating.
            </summary>
      <returns>Minimum radius of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.ComputeVolumeDistribution(System.Single@)">
      <summary>
            Computes the volume distribution of the shape as well as its volume.
            The volume distribution can be used to compute inertia tensors when
            paired with mass and other tuning factors.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Volume distribution of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.ComputeCenter">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.
            </summary>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.ComputeCenter(System.Single@)">
      <summary>
            Computes the center of the shape.  This can be considered its 
            center of mass.  This calculation is often associated with the 
            volume calculation, which is given by this method as well.
            </summary>
      <param name="volume">Volume of the shape.</param>
      <returns>Center of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.ComputeVolume">
      <summary>
            Computes the volume of the shape.
            </summary>
      <returns>Volume of the shape.</returns>
    </member>
    <member name="M:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.GetCollidableInstance">
      <summary>
            Retrieves an instance of an EntityCollidable that uses this EntityShape.  Mainly used by compound bodies.
            </summary>
      <returns>EntityCollidable that uses this shape.</returns>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.Radius">
      <summary>
             Gets or sets the radius of the cylinder.
            </summary>
    </member>
    <member name="P:BEPUphysics.CollisionShapes.ConvexShapes.CylinderShape.Height">
      <summary>
             Gets or sets the height of the cylinder.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable">
      <summary>
             Collidable used by compound shapes.
            </summary>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.#ctor(System.Collections.Generic.IList{BEPUphysics.Collidables.MobileCollidables.CompoundChildData})">
      <summary>
             Constructs a compound collidable using additional information about the shapes in the compound.
            </summary>
      <param name="children">Data representing the children of the compound collidable.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.#ctor(System.Collections.Generic.IList{BEPUphysics.Collidables.MobileCollidables.CompoundChildData},Microsoft.Xna.Framework.Vector3@)">
      <summary>
             Constructs a compound collidable using additional information about the shapes in the compound.
            </summary>
      <param name="children">Data representing the children of the compound collidable.</param>
      <param name="center">Location computed to be the center of the compound object.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.#ctor(BEPUphysics.CollisionShapes.CompoundShape)">
      <summary>
             Constructs a new CompoundCollidable.
            </summary>
      <param name="compoundShape">Compound shape to use for the collidable.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.UpdateWorldTransform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>
             Updates the world transform of the collidable.
            </summary>
      <param name="position">Position to use for the calculation.</param>
      <param name="orientation">Orientation to use for the calculation.</param>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@)">
      <summary>
            Tests a ray against the collidable.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
      <param name="rayHit">Hit location of the ray on the collidable, if any.</param>
      <returns>Whether or not the ray hit the collidable.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.RayCast(Microsoft.Xna.Framework.Ray,System.Single,System.Func{BEPUphysics.BroadPhaseSystems.BroadPhaseEntry,System.Boolean},BEPUphysics.RayHit@)">
      <summary>
            Tests a ray against the collidable.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
      <param name="rayHit">Hit location of the ray on the collidable, if any.</param>
      <returns>Whether or not the ray hit the collidable.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayCastResult@)">
      <summary>
            Tests a ray against the compound.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
      <param name="rayHit">Hit data and the hit child collidable, if any.</param>
      <returns>Whether or not the ray hit the entry.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.RayCast(Microsoft.Xna.Framework.Ray,System.Single,BEPUphysics.RayHit@,BEPUphysics.Collidables.MobileCollidables.CompoundChild@)">
      <summary>
            Tests a ray against the collidable.
            </summary>
      <param name="ray">Ray to test.</param>
      <param name="maximumLength">Maximum length, in units of the ray's direction's length, to test.</param>
      <param name="rayHit">Hit data, if any.</param>
      <param name="hitChild">Child collidable hit by the ray, if any.</param>
      <returns>Whether or not the ray hit the entry.</returns>
    </member>
    <member name="M:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.ConvexCast(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,BEPUphysics.MathExtensions.RigidTransform@,Microsoft.Xna.Framework.Vector3@,BEPUphysics.RayHit@)">
      <summary>
            Casts a convex shape against the collidable.
            </summary>
      <param name="castShape">Shape to cast.</param>
      <param name="startingTransform">Initial transform of the shape.</param>
      <param name="sweep">Sweep to apply to the shape.</param>
      <param name="hit">Hit data, if any.</param>
      <returns>Whether or not the cast hit anything.</returns>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.Shape">
      <summary>
             Gets the shape of the collidable.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.Children">
      <summary>
             Gets a list of the children in the collidable.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundCollidable.Hierarchy">
      <summary>
             Gets the hierarchy of children used by the collidable.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.MobileCollidables.CompoundChildData">
      <summary>
             Data which can be used to create a CompoundChild.
             This data is not itself a child yet; another system
             will use it as input to construct the children.
            </summary>
    </member>
    <member name="F:BEPUphysics.Collidables.MobileCollidables.CompoundChildData.Entry">
      <summary>
             Shape entry of the compound child.
            </summary>
    </member>
    <member name="F:BEPUphysics.Collidables.MobileCollidables.CompoundChildData.Events">
      <summary>
             Event manager for the new child.
            </summary>
    </member>
    <member name="F:BEPUphysics.Collidables.MobileCollidables.CompoundChildData.CollisionRules">
      <summary>
             Collision rules for the new child.
            </summary>
    </member>
    <member name="F:BEPUphysics.Collidables.MobileCollidables.CompoundChildData.Material">
      <summary>
             Material for the new child.
            </summary>
    </member>
    <member name="F:BEPUphysics.Collidables.MobileCollidables.CompoundChildData.Tag">
      <summary>
            Tag to assign to the collidable created for this child.
            </summary>
    </member>
    <member name="T:BEPUphysics.Collidables.MobileCollidables.CompoundChild">
      <summary>
             A collidable child of a compound.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundChild.ShapeIndex">
      <summary>
            Gets the index of the shape used by this child in the CompoundShape's shapes list.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundChild.CollisionInformation">
      <summary>
             Gets the Collidable associated with the child.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundChild.Material">
      <summary>
             Gets or sets the material associated with the child.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundChild.Entry">
      <summary>
            Gets the index of the shape associated with this child in the CompoundShape's shapes list.
            </summary>
    </member>
    <member name="P:BEPUphysics.Collidables.MobileCollidables.CompoundChild.BoundingBox">
      <summary>
            Gets the bounding box of the child.
            </summary>
    </member>
    <member name="T:BEPUphysics.CollisionTests.Manifolds.MobileMeshConvexContactManifold">
      <summary>
             Manages persistent contacts between a convex and an instanced mesh.
            </summary>
    </member>
    <member name="M:XNAnimation.AnimationChannel.GetKeyframeIndexByTime(System.TimeSpan)">
      <summary>
            Return the nearest keyframe for the given time
            </summary>
      <param name="time">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:XNAnimation.Controllers.InterpolationMode">
      <summary>
            Specifies how translations, orientations and scales are interpolated between keyframes.
            </summary>
    </member>
    <member name="F:XNAnimation.Controllers.InterpolationMode.None">
      <summary>
            Does not use interpolation.
            </summary>
    </member>
    <member name="F:XNAnimation.Controllers.InterpolationMode.Linear">
      <summary>
            Linear interpolation. Supported on translations and scales.
            </summary>
    </member>
    <member name="F:XNAnimation.Controllers.InterpolationMode.Cubic">
      <summary>
            Cubic interpolation. Supported on translations and scales.
            </summary>
    </member>
    <member name="F:XNAnimation.Controllers.InterpolationMode.Spherical">
      <summary>
            Spherical interpolation. Only supported on orientations.
            </summary>
    </member>
    <member name="T:XNAnimation.Controllers.PlaybackMode">
      <summary>
            Specifies how an animation clip is played.
            </summary>
    </member>
    <member name="F:XNAnimation.Controllers.PlaybackMode.Forward">
      <summary>
            Plays the animation clip in the forward way.
            </summary>
    </member>
    <member name="F:XNAnimation.Controllers.PlaybackMode.Backward">
      <summary>
            Plays the animation clip in the backward way.
            </summary>
    </member>
    <member name="T:XNAnimation.Controllers.IAnimationController">
      <summary>
            Defines an interface for an animation controller.
            </summary>
    </member>
    <member name="M:XNAnimation.Controllers.IAnimationController.StartClip(XNAnimation.AnimationClip)">
      <summary>
            Starts the playback of an animation clip from the beginning.
            </summary>
      <param name="animationClip">The animation clip to be played.</param>
    </member>
    <member name="M:XNAnimation.Controllers.IAnimationController.PlayClip(XNAnimation.AnimationClip)">
      <summary>
            Plays an animation clip.
            </summary>
      <param name="animationClip">The animation clip to be played.</param>
    </member>
    <member name="M:XNAnimation.Controllers.IAnimationController.CrossFade(XNAnimation.AnimationClip,System.TimeSpan)">
      <summary>
            Interpolates linearly between two animation clips, fading out the current 
            animation clip and fading in a new one.
            </summary>
      <param name="animationClip">The animation clip to be faded in.</param>
      <param name="fadeTime">Time used to fade in and out the animation clips.</param>
    </member>
    <member name="M:XNAnimation.Controllers.IAnimationController.CrossFade(XNAnimation.AnimationClip,System.TimeSpan,XNAnimation.Controllers.InterpolationMode,XNAnimation.Controllers.InterpolationMode,XNAnimation.Controllers.InterpolationMode)">
      <summary>
            Interpolates between two animation clips, fading out the current animation clip 
            and fading in a new one.
            </summary>
      <param name="animationClip">The animation clip to be faded in.</param>
      <param name="fadeTime">Time used to fade in and out the animation clips.</param>
      <param name="translationInterpolation">How translations are interpolated between animation clips.</param>
      <param name="orientationInterpolation">How orientations are interpolated between animation clips.</param>
      <param name="scaleInterpolation">How scales are interpolated between animation clips.</param>
    </member>
    <member name="M:XNAnimation.Controllers.IAnimationController.Update(System.TimeSpan,Microsoft.Xna.Framework.Matrix)">
      <summary>
            Updates the animation clip time and calculates the new skeleton's bone pose.
            </summary>
      <param name="elapsedTime">Time elapsed since the last update.</param>
      <param name="parent">The parent bone for the current skeleton's root bone.</param>
    </member>
    <member name="P:XNAnimation.Controllers.IAnimationController.AnimationClip">
      <summary>
            Gets the animation clip being played.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IAnimationController.Time">
      <summary>
            Gets os sets the current animation playback time.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IAnimationController.Speed">
      <summary>
            Gets os sets the animation playback speed.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IAnimationController.LoopEnabled">
      <summary>
            Enables animation looping.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IAnimationController.PlaybackMode">
      <summary>
            Gets os sets the animation playback mode.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IAnimationController.TranslationInterpolation">
      <summary>
            Gets os sets how translations are interpolated between animation keyframes.
            Supports linear and cubic interpolation.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IAnimationController.OrientationInterpolation">
      <summary>
            Gets os sets how orientations are interpolated between animation keyframes.
            Supports linear and spherical interpolation.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IAnimationController.ScaleInterpolation">
      <summary>
            Gets os sets how scales are interpolated between animation keyframes.
            Supports linear and cubic interpolation.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IAnimationController.HasFinished">
      <summary>
            Returns whether the animation has finished.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IAnimationController.IsPlaying">
      <summary>
            Returns whether the animation is playing.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IAnimationController.LocalBonePoses">
      <summary>
            Gets the local pose of all skeleton's bones in depth-first order.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IAnimationController.SkinnedBoneTransforms">
      <summary>
            Gets the final transformation of all skeleton's bonse in depth-first order.
            This transformation is used to transfom the model's mesh vertices.
            </summary>
    </member>
    <member name="T:XNAnimation.Controllers.IBlendable">
      <summary>
            Defines an interface for blendable animations.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IBlendable.LocalBonePoses">
      <summary>
            Gets the local pose of all skeleton's bones in depth-first order.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IBlendable.BlendWeight">
      <summary>
            Gets or sets the blend weight.
            The blend weight must be a positive value between 0 and 1.
            </summary>
    </member>
    <member name="T:XNAnimation.SkinnedModelBone">
      <summary>
            Represents a bone from a skeleton
            </summary>
    </member>
    <member name="P:XNAnimation.SkinnedModelBone.Index">
      <summary>
            Gets the index of this bone in depth-first order.
            </summary>
    </member>
    <member name="P:XNAnimation.SkinnedModelBone.Name">
      <summary>
            Gets the name of this bone.
            </summary>
    </member>
    <member name="P:XNAnimation.SkinnedModelBone.Parent">
      <summary>
            Gets the parent of this bone.
            </summary>
    </member>
    <member name="P:XNAnimation.SkinnedModelBone.Children">
      <summary>
            Gets a collection of bones that are children of this bone.
            </summary>
    </member>
    <member name="P:XNAnimation.SkinnedModelBone.BindPose">
      <summary>
            Gets the pose of this bone relative to its parent.
            </summary>
    </member>
    <member name="P:XNAnimation.SkinnedModelBone.InverseBindPoseTransform">
      <summary>
            Gets a matrix used to transform model's mesh vertices putting them in the same 
            coordinate system of this bone.
            </summary>
    </member>
    <member name="T:XNAnimation.Resource1">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:XNAnimation.Resource1.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:XNAnimation.Resource1.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="T:XNAnimation.Effects.SkinnedModelBasicEffect">
      <summary>
            Represents an effect that supports skinning, normal, specular and diffuse textures, 
            and phong lighting with multiple point light sources. This effect can use shader model 2.0
            or 3.0, according to the number of lights enabled.
            </summary>
    </member>
    <member name="M:XNAnimation.Effects.SkinnedModelBasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,XNAnimation.Effects.SkinnedModelBasicEffect)">
      <summary>Initializes a new instance of the 
            <see cref="T:XNAnimation.Effects.SkinnedModelBasicEffect" />
            class.
            </summary>
      <param name="graphicsDevice">The graphics device that will create the effect.</param>
      <param name="clone">The effect to clone.</param>
    </member>
    <member name="P:XNAnimation.Effects.SkinnedModelBasicEffect.Bones">
      <summary>
            Gets or sets the bone matrices of the skeleton.
            </summary>
    </member>
    <member name="P:XNAnimation.Effects.SkinnedModelBasicEffect.View">
      <summary>
            Gets or sets the camera view matrix.
            </summary>
    </member>
    <member name="P:XNAnimation.Effects.SkinnedModelBasicEffect.Projection">
      <summary>
            Gets or sets the camera projection matrix.
            </summary>
    </member>
    <member name="P:XNAnimation.Effects.SkinnedModelBasicEffect.DiffuseMapEnabled">
      <summary>
            Enables diffuse texture.
            </summary>
    </member>
    <member name="P:XNAnimation.Effects.SkinnedModelBasicEffect.GlowMapEnabled">
      <summary>
            Enables diffuse texture.
            </summary>
    </member>
    <member name="P:XNAnimation.Effects.SkinnedModelBasicEffect.DiffuseMap">
      <summary>
            Gets or sets diffuse texture.
            </summary>
    </member>
    <member name="P:XNAnimation.Effects.SkinnedModelBasicEffect.SpecularMap">
      <summary>
            Gets or sets normal map texture.
            </summary>
    </member>
    <member name="P:XNAnimation.Effects.SkinnedModelBasicEffect.NormalMapEnabled">
      <summary>
            Enables normal map texture.
            </summary>
    </member>
    <member name="P:XNAnimation.Effects.SkinnedModelBasicEffect.NormalMap">
      <summary>
            Gets or sets normal map texture.
            </summary>
    </member>
    <member name="T:XNAnimation.Controllers.ISkeletonController">
      <summary>
            Defines an interface for an skeleton controller.
            </summary>
    </member>
    <member name="M:XNAnimation.Controllers.ISkeletonController.SetBonePose(System.String,XNAnimation.Pose@)">
      <summary>
            Sets a custom pose for an skeleton's bone.
            </summary>
      <param name="channelName">The name of the bone.</param>
      <param name="pose">The custom pose to be set.</param>
    </member>
    <member name="M:XNAnimation.Controllers.ISkeletonController.SetBonePose(System.String,XNAnimation.Pose)">
      <summary>
            Sets a custom pose for an skeleton's bone.
            </summary>
      <param name="channelName">The name of the bone.</param>
      <param name="pose">The custom pose to be set.</param>
    </member>
    <member name="P:XNAnimation.Controllers.ISkeletonController.LocalBonePoses">
      <summary>
            Gets the local pose of all skeleton's bones in depth-first order.
            </summary>
    </member>
    <member name="T:XNAnimation.Controllers.SkeletonController">
      <summary>
            Controls the pose of each bone in a skeleton. Allows custom skeleton poses to be blended 
            with other <see cref="T:XNAnimation.Controllers.IBlendable" /> objects.
            </summary>
    </member>
    <member name="M:XNAnimation.Controllers.SkeletonController.#ctor(XNAnimation.SkinnedModelBoneDictionary)">
      <summary>Initializes a new instance of the 
            <see cref="T:XNAnimation.Controllers.SkeletonController"></see>
            class.
            </summary>
      <param name="skeletonDictionary">
      </param>
    </member>
    <member name="M:XNAnimation.Controllers.SkeletonController.SetBonePose(System.String,XNAnimation.Pose@)">
      <inheritdoc />
    </member>
    <member name="M:XNAnimation.Controllers.SkeletonController.SetBonePose(System.String,XNAnimation.Pose)">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.SkeletonController.LocalBonePoses">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.SkeletonController.BlendWeight">
      <inheritdoc />
    </member>
    <member name="T:XNAnimation.Controllers.BlendMode">
      <summary>
            Specify how animation clips are blended.
            </summary>
    </member>
    <member name="F:XNAnimation.Controllers.BlendMode.Interpolate">
      <summary>
            Blends animation clips interpolation between them.
            </summary>
    </member>
    <member name="F:XNAnimation.Controllers.BlendMode.Additive">
      <summary>
            Blends animation clips additively.
            </summary>
    </member>
    <member name="T:XNAnimation.Controllers.BlendLayer">
      <summary>
            Enumerates the available blend layers.
            </summary>
    </member>
    <member name="F:XNAnimation.Controllers.BlendLayer.One">
      <summary>
            First blend layer.
            </summary>
    </member>
    <member name="F:XNAnimation.Controllers.BlendLayer.Two">
      <summary>
            Second blend layer.
            </summary>
    </member>
    <member name="F:XNAnimation.Controllers.BlendLayer.Three">
      <summary>
            Third blend layer.
            </summary>
    </member>
    <member name="F:XNAnimation.Controllers.BlendLayer.Four">
      <summary>
            Fourth blend layer.
            </summary>
    </member>
    <member name="T:XNAnimation.Controllers.IBlendController">
      <summary>
            Defines an interface for an animation blend controller.
            </summary>
    </member>
    <member name="P:XNAnimation.Controllers.IBlendController.BlendMode">
      <summary>
            Gets or sets the animation blend mode.
            </summary>
    </member>
    <member name="T:XNAnimation.Controllers.AnimationController">
      <summary>
            Controls how animations are played and interpolated.
            </summary>
    </member>
    <member name="M:XNAnimation.Controllers.AnimationController.#ctor(XNAnimation.SkinnedModelBoneCollection)">
      <summary>Initializes a new instance of the 
            <see cref="T:XNAnimation.Controllers.AnimationController" />
            class.
            </summary>
      <param name="skeleton">The skeleton of the model to be animated</param>
    </member>
    <member name="M:XNAnimation.Controllers.AnimationController.StartClip(XNAnimation.AnimationClip)">
      <inheritdoc />
    </member>
    <member name="M:XNAnimation.Controllers.AnimationController.PlayClip(XNAnimation.AnimationClip)">
      <inheritdoc />
    </member>
    <member name="M:XNAnimation.Controllers.AnimationController.CrossFade(XNAnimation.AnimationClip,System.TimeSpan)">
      <inheritdoc />
    </member>
    <member name="M:XNAnimation.Controllers.AnimationController.CrossFade(XNAnimation.AnimationClip,System.TimeSpan,XNAnimation.Controllers.InterpolationMode,XNAnimation.Controllers.InterpolationMode,XNAnimation.Controllers.InterpolationMode)">
      <inheritdoc />
    </member>
    <member name="M:XNAnimation.Controllers.AnimationController.Update(System.TimeSpan,Microsoft.Xna.Framework.Matrix)">
      <inheritdoc />
    </member>
    <member name="M:XNAnimation.Controllers.AnimationController.UpdateCrossFadeTime(System.TimeSpan)">
      <summary>
            Updates the CrossFade time
            </summary>
      <param name="elapsedTime">Time elapsed since the last update.</param>
    </member>
    <member name="M:XNAnimation.Controllers.AnimationController.UpdateAnimationTime(System.TimeSpan)">
      <summary>
            Updates the animation clip time.
            </summary>
      <param name="elapsedTime">Time elapsed since the last update.</param>
    </member>
    <member name="M:XNAnimation.Controllers.AnimationController.UpdateChannelPoses">
      <summary>
            Updates the pose of all skeleton's bones.
            </summary>
    </member>
    <member name="M:XNAnimation.Controllers.AnimationController.InterpolateChannelPose(XNAnimation.AnimationChannel,System.TimeSpan,XNAnimation.Pose@)">
      <summary>
            Retrieves and interpolates the pose of an animation channel.
            </summary>
      <param name="animationChannel">Name of the animation channel.</param>
      <param name="animationTime">Current animation clip time.</param>
      <param name="outPose">The output interpolated pose.</param>
    </member>
    <member name="M:XNAnimation.Controllers.AnimationController.UpdateAbsoluteBoneTransforms(Microsoft.Xna.Framework.Matrix@)">
      <summary>
            Calculates the final configuration of all skeleton's bones used to transform
            the model's mesh.
            </summary>
      <param name="parent">
      </param>
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.AnimationClip">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.Time">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.Speed">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.LoopEnabled">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.PlaybackMode">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.TranslationInterpolation">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.OrientationInterpolation">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.ScaleInterpolation">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.HasFinished">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.IsPlaying">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.LocalBonePoses">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.SkinnedBoneTransforms">
      <inheritdoc />
    </member>
    <member name="P:XNAnimation.Controllers.AnimationController.BlendWeight">
      <inheritdoc />
    </member>
    <member name="T:TomShane.Neoforce.Controls.Control">
      <summary>
            Defines the base class for all controls.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Cursor">
      <summary>
            Gets or sets the cursor displaying over the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Controls">
      <summary>
            Gets a list of all child controls.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.MovableArea">
      <summary>
            Gets or sets a rectangular area that reacts on moving the control with the mouse.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.IsChild">
      <summary>
            Gets a value indicating whether this control is a child control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.IsParent">
      <summary>
            Gets a value indicating whether this control is a parent control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.IsRoot">
      <summary>
            Gets a value indicating whether this control is a root control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.CanFocus">
      <summary>
            Gets or sets a value indicating whether this control can receive focus. 
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Detached">
      <summary>
            Gets or sets a value indicating whether this control is rendered off the parents texture.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Passive">
      <summary>
            Gets or sets a value indicating whether this controls can receive user input events.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Movable">
      <summary>
            Gets or sets a value indicating whether this control can be moved by the mouse.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Resizable">
      <summary>
            Gets or sets a value indicating whether this control can be resized by the mouse.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.ResizerSize">
      <summary>
            Gets or sets the size of the rectangular borders around the control used for resizing by the mouse.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.ContextMenu">
      <summary>
            Gets or sets the ContextMenu associated with this control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.DoubleClicks">
      <summary>
            Gets or sets a value indicating whether this control should process mouse double-clicks.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.OutlineResizing">
      <summary>
            Gets or sets a value indicating whether this control should use ouline resizing.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.OutlineMoving">
      <summary>
            Gets or sets a value indicating whether this control should use outline moving.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Tag">
      <summary>
            Gets or sets the object that contains data about the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Margins">
      <summary>
            Gets or sets the value indicating the distance from another control. Usable with StackPanel control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.DesignMode">
      <summary>
            Gets or sets the value indicating wheter control is in design mode.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.GamePadActions">
      <summary>
            Gets or sets gamepad actions for the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.PartialOutline">
      <summary>
            Gets or sets the value indicating whether the control outline is displayed only for certain edges. 
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.StayOnBack">
      <summary>
            Gets or sets the value indicating whether the control is allowed to be brought in the front.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.StayOnTop">
      <summary>
            Gets or sets the value indicating that the control should stay on top of other controls.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Name">
      <summary>
            Gets or sets a name of the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Focused">
      <summary>
            Gets or sets a value indicating whether this control has input focus.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.ControlState">
      <summary>
            Gets a value indicating current state of the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.DrawingRect">
      <summary>
            Gets an area where is the control supposed to be drawn.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Suspended">
      <summary>
            Gets or sets a value indicating whether this control should receive any events.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.IsMoving">
      <summary>
            Gets or sets a value indicating whether this controls is currently being moved.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.IsResizing">
      <summary>
            Gets or sets a value indicating whether this controls is currently being resized.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Anchor">
      <summary>
            Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.ResizeEdge">
      <summary>
            Gets or sets the edges of the contol which are allowed for resizing.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Skin">
      <summary>
            Gets or sets the skin used for rendering the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Text">
      <summary>
            Gets or sets the text associated with this control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Alpha">
      <summary>
            Gets or sets the alpha value for this control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.BackColor">
      <summary>
            Gets or sets the background color for the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Color">
      <summary>
            Gets or sets the color for the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.TextColor">
      <summary>
            Gets or sets the text color for the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Enabled">
      <summary>
            Gets or sets a value indicating whether the control can respond to user interaction.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Visible">
      <summary>
            Gets or sets a value that indicates whether the control is rendered.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Parent">
      <summary>
            Gets or sets the parent for the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Root">
      <summary>
            Gets or sets the root for the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Left">
      <summary>
            Gets or sets the distance, in pixels, between the left edge of the control and the left edge of its parent.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Top">
      <summary>
            Gets or sets the distance, in pixels, between the top edge of the control and the top edge of its parent.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Width">
      <summary>
            Gets or sets the width of the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.Height">
      <summary>
            Gets or sets the height of the control.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.MinimumWidth">
      <summary>
            Gets or sets the minimum width in pixels the control can be sized to.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.MinimumHeight">
      <summary>
            /// Gets or sets the minimum height in pixels the control can be sized to.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.MaximumWidth">
      <summary>
            /// Gets or sets the maximum width in pixels the control can be sized to.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Control.MaximumHeight">
      <summary>
            Gets or sets the maximum height in pixels the control can be sized to.
            </summary>
    </member>
    <member name="T:TomShane.Neoforce.Controls.ListBox">
      <summary>
      Represents a control to display a list of items.
    </summary>
    </member>
    <member name="T:TomShane.Neoforce.Controls.GamePadActions">
      <summary>
            Defines the gamepad actions mapping.
            </summary>
    </member>
    <member name="T:TomShane.Neoforce.Controls.ControlsList">
      <summary>
            Defines type used as a controls collection.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.InputSystem.InputOffset">
      <summary>
            Sets or gets input offset and ratio when rescaling controls in render target.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.InputSystem.InputMethods">
      <summary>
            Sets or gets input methods allowed for navigation.
            </summary>
    </member>
    <member name="T:TomShane.Neoforce.Controls.SizeMode">
      <summary>
      Specifies how an image is positioned within a control.
    </summary>
    </member>
    <member name="T:TomShane.Neoforce.Controls.ButtonMode">
      <summary>
      Specifies how an image is positioned within a control.
    </summary>
    </member>
    <member name="T:TomShane.Neoforce.Controls.Glyph">
      <summary>
      Represents an image on a button.
    </summary>
    </member>
    <member name="T:TomShane.Neoforce.Controls.ButtonBase">
      <summary>
      Implements the basic functionality common to button controls.
    </summary>
    </member>
    <member name="T:TomShane.Neoforce.Controls.Button">
      <summary>
      Represents a button control.
    </summary>
    </member>
    <member name="T:TomShane.Neoforce.Controls.Window">
      <summary>
      Represents a window or dialog box that makes up an application's user interface.
    </summary>
    </member>
    <member name="T:TomShane.Neoforce.Controls.Manager">
      <summary>
            Manages rendering of all controls.
            </summary>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.#ctor(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.GraphicsDeviceManager,System.String,System.Windows.Forms.Form)">
      <summary>
            Initializes a new instance of the Manager class.
            </summary>
      <param name="game">The Game class.</param>
      <param name="graphics">The GraphicsDeviceManager class provided by the Game class.</param>
      <param name="skin">The name of the skin being loaded at the start.</param>
      <param name="window">The window -- in xbox set to null.</param>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.#ctor(Microsoft.Xna.Framework.Game,System.String,System.Windows.Forms.Form)">
      <summary>
            Initializes a new instance of the Manager class.
            </summary>
      <param name="game">The Game class.</param>
      <param name="skin">The name of the skin being loaded at the start.</param>
      <param name="window">The window.</param>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.#ctor(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.GraphicsDeviceManager,System.Windows.Forms.Form)">
      <summary>
            Initializes a new instance of the Manager class, loads the default skin and registers manager in the game class automatically.
            </summary>
      <param name="game">The Game class.</param>
      <param name="graphics">The GraphicsDeviceManager class provided by the Game class.</param>
      <param name="window">The window.</param>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.#ctor(Microsoft.Xna.Framework.Game,System.Windows.Forms.Form)">
      <summary>
            Initializes a new instance of the Manager class, loads the default skin and registers manager in the game class automatically.
            </summary>
      <param name="game">
            The Game class.
            </param>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.PrepareGraphicsDevice(System.Object,Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs)">
      <summary>
            Method used as an event handler for the GraphicsDeviceManager.PreparingDeviceSettings event.
            </summary>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.Initialize">
      <summary>
            Initializes the controls manager.
            </summary>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.SetSkin(System.String)">
      <summary>
            Sets and loads the new skin.
            </summary>
      <param name="name">
            The name of the skin being loaded.
            </param>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.SetSkin(TomShane.Neoforce.Controls.Skin)">
      <summary>
            Sets the new skin.
            </summary>
      <param name="skin">
            The skin being set.
            </param>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.BringToFront(TomShane.Neoforce.Controls.Control)">
      <summary>
            Brings the control to the front of the z-order.
            </summary>
      <param name="control">
            The control being brought to the front.
            </param>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.SendToBack(TomShane.Neoforce.Controls.Control)">
      <summary>
            Sends the control to the back of the z-order.
            </summary>
      <param name="control">
            The control being sent back.
            </param>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.Update(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Called when the manager needs to be updated.
            </summary>
      <param name="gameTime">
            Time elapsed since the last call to Update.
            </param>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.Add(TomShane.Neoforce.Controls.Component)">
      <summary>
            Adds a component or a control to the manager.
            </summary>
      <param name="component">
            The component or control being added.
            </param>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.Remove(TomShane.Neoforce.Controls.Component)">
      <summary>
            Removes a component or a control from the manager.
            </summary>
      <param name="component">
            The component or control being removed.
            </param>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.BeginDraw(Microsoft.Xna.Framework.GameTime)">
      <summary>
            Renders all controls added to the manager.
            </summary>
      <param name="gameTime">
            Time passed since the last call to Draw.
            </param>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.EndDraw">
      <summary>
            Draws texture resolved from RenderTarget used for rendering.
            </summary>
    </member>
    <member name="M:TomShane.Neoforce.Controls.Manager.EndDraw(Microsoft.Xna.Framework.Rectangle)">
      <summary>
            Draws texture resolved from RenderTarget to specified rectangle.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.Disposing">
      <summary>
            Gets a value indicating whether Manager is in the process of disposing.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.Window">
      <summary>
            Returns the <see cref="T:System.Windows.Forms.Form" /> the game runs in.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.Cursor">
      <summary>
            Gets or sets an application cursor.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.Game">
      <summary>
            Returns associated <see cref="P:TomShane.Neoforce.Controls.Manager.Game" /> component.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.GraphicsDevice">
      <summary>
            Returns associated <see cref="P:TomShane.Neoforce.Controls.Manager.GraphicsDevice" />.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.Graphics">
      <summary>
            Returns associated <see cref="T:Microsoft.Xna.Framework.GraphicsDeviceManager" />.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.Renderer">
      <summary>
            Returns <see cref="P:TomShane.Neoforce.Controls.Manager.Renderer" /> used for rendering controls.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.Content">
      <summary>
            Returns <see cref="!:ArchiveManager" /> used for loading assets.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.Input">
      <summary>
            Returns <see cref="T:TomShane.Neoforce.Controls.InputSystem" /> instance responsible for managing user input.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.Components">
      <summary>
            Returns list of components added to the manager.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.Controls">
      <summary>
            Returns list of controls added to the manager.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.GlobalDepth">
      <summary>
            Gets or sets the depth value used for rendering sprites.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.ToolTipDelay">
      <summary>
            Gets or sets the time that passes before the <see cref="T:TomShane.Neoforce.Controls.ToolTip" /> appears.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.MenuDelay">
      <summary>
            Gets or sets the time that passes before a submenu appears when hovered over menu item.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.DoubleClickTime">
      <summary>
            Gets or sets the maximum number of milliseconds that can elapse between a first click and a second click to consider the mouse action a double-click.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.TextureResizeIncrement">
      <summary>
            Gets or sets texture size increment in pixel while performing controls resizing.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.ToolTipsEnabled">
      <summary>
            Enables or disables showing of tooltips globally.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.LogUnhandledExceptions">
      <summary>
            Enables or disables logging of unhandled exceptions. 
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.InputEnabled">
      <summary>
            Enables or disables input processing.                   
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.RenderTarget">
      <summary>
            Gets or sets render target for drawing.                 
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.TargetFrames">
      <summary>
            Gets or sets update interval for drawing, logic and input.                           
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.KeyboardLayouts">
      <summary>
            Gets or sets collection of active keyboard layouts.     
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.UseGuide">
      <summary>
            Gets or sets a value indicating if Guide component can be used
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.AutoUnfocus">
      <summary>
            Gets or sets a value indicating if a control should unfocus if you click outside on the screen.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.AutoCreateRenderTarget">
      <summary>
            Gets or sets a value indicating wheter Manager should create render target automatically.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.KeyboardLayout">
      <summary>
            Gets or sets current keyboard layout for text input.    
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.SkinDirectory">
      <summary>
            Gets or sets the initial directory for looking for the skins in.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.LayoutDirectory">
      <summary>
            Gets or sets the initial directory for looking for the layout files in.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.SkinExtension">
      <summary>
            Gets or sets file extension for archived skin files.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.TargetWidth">
      <summary>
            Gets width of the selected render target in pixels.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.TargetHeight">
      <summary>
            Gets height of the selected render target in pixels.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.ScreenWidth">
      <summary>
            Gets current width of the screen in pixels.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.ScreenHeight">
      <summary>
            Gets current height of the screen in pixels.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.Skin">
      <summary>
            Gets or sets new skin used by all controls.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.ModalWindow">
      <summary>
            Returns currently active modal window.
            </summary>
    </member>
    <member name="P:TomShane.Neoforce.Controls.Manager.FocusedControl">
      <summary>
            Returns currently focused control.
            </summary>
    </member>
    <member name="E:TomShane.Neoforce.Controls.Manager.DeviceSettingsChanged">
      <summary>
            Occurs when the GraphicsDevice settings are changed.
            </summary>
    </member>
    <member name="E:TomShane.Neoforce.Controls.Manager.SkinChanging">
      <summary>
            Occurs when the skin is about to change.
            </summary>
    </member>
    <member name="E:TomShane.Neoforce.Controls.Manager.SkinChanged">
      <summary>
            Occurs when the skin changes.
            </summary>
    </member>
    <member name="E:TomShane.Neoforce.Controls.Manager.WindowClosing">
      <summary>
            Occurs when game window is about to close.
            </summary>
    </member>
  </members>
</doc>