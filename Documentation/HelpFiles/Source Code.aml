<?xml version="1.0" encoding="utf-8"?>
<topic id="4d773c73-38ae-446e-b240-1a030ce10492" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>This pages talks about hwo the source code is organized</para>
    </introduction>    
    
    <section address="Section1">
      <title>Ploobs Engine Source Code</title>
      <content>        
        <para>All the source code is stored in a sourceforge Mercurial Repo 
        <externalLink>
          <linkText>In this address</linkText>          
          <linkUri>http://ploobsengine.hg.sourceforge.net:8000/hgroot/ploobsengine/ploobsengine</linkUri>
      </externalLink>
      </para>
      </content>
      </section>
    
    <section address="Section2">
      <title>Dependencies</title>
      <content>        
        <para>The Ploobs Engine uses some external DLL to perform its work 
        like:</para>
        
		<list class="bullet">
		  <listItem><para>A custom version of XNAAnimation API</para></listItem>
		  <listItem><para>A custom version of JigLibX API</para></listItem>
		  <listItem><para>A custom version of SharpSteer API</para></listItem>
		  <listItem><para>A custom version of LTree API</para></listItem>
		  <listItem><para>BepuPhysics API</para></listItem>		  
		</list>
		
		<para>
		All the Custom Versions code are included in the Source Code package
		</para>
		
		<para>
		Some demos uses:
		</para>
		
<list class="bullet">
  <listItem><para>ModelXML, a simple API that i created to load a custom 
  XML format</para></listItem>
  <listItem><para>Zed Graph, a very good .Net API to draw graph</para></listItem>
  <listItem><para>Lua Interface, to interop with the LUA language</para></listItem>
</list>

<para>
	Some libs were customized to fit our need, some because the project was "abandoned" like JigLibX and SharpSteer (BugFix and add features), others because we need to fit them in our deferred render like XNAAnimation and LTree.
</para>
<para>
The code of LTree and SharpSteer were included in the solution. The JigLib and XNAAnimation were not (just the DLL), the code is in the Auxiliar Libs Folder
</para>
<para>
The utility program ILMERGE (http://www.microsoft.com/downloads/details.aspx?FamilyID=22914587-b4ad-4eae-87cf-b14ae6a939b0) is used to combine
the DLLs in just one.
</para>
<para>
We use the following command to combine our DLLs
</para>
<para>
ilmerge /out:PloobsEngineDebug.dll BEPUphysics.dll JigLibX.dll LTreesLibrary.dll LTreesPipeline.dll PloobsEngine.dll XNAnimation.dll XNAnimationPipeline.dll /xmldocs /keyfile:XNAnimation.snk /ver:1.0.0.0 /log
</para>
<alert class="note">      
 All the DLLs used by the ilmerge command must be in the same folder, and you need to put them by hand there
</alert>

		

      </content>      
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>