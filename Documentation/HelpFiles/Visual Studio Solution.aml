<?xml version="1.0" encoding="utf-8"?>
<topic id="580929ba-932f-48f5-a949-26c9e4bb1e0f" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>How the Visual Studio Solution is Organized</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
               
    <section address="Section2">
      <title>Ploobs Engine Project</title>
      <content>        
        <para>The main project (the engine itself) was built using visual studio 2008 (but can be ported without any trouble to visual studio 2005 and express editions).
        </para>
        <para>
		The main solution avaliable in the mercurial repository contains 5 projects:
		</para>
		
<list class="bullet">
  <listItem><para>Assets</para></listItem>
  <listItem><para>Etapa1</para></listItem>
  <listItem><para>LTreeLibrary</para></listItem>
  <listItem><para>LTreePipeline</para></listItem>
  <listItem><para>Engine</para></listItem>
</list>

	
	<legacyBold>Assets</legacyBold>	
	<para>
	Constains all the assets used INSIDE the PLoobsEngine. This projects compiles all the assets and output them in a .xnb form. Them those serializable resources are used exclusively in PloobsEngine. The end user cannot load them.
	</para>
	<para>
	Using such aproach is good because all assets are embedded in the same DLL (PloobsEngine) and they are protected. All assets used are free domain (some created by us, and others found on the internet)
	</para>

	<legacyBold>Etapa1</legacyBold>	
	<para>
	Constains LOTS of RANDOM projects that uses the PloobsEngine. It works as a HUGE SANDBOX. There is some projects about SUBDIVISION SURFACES, using the Butterfly and PN-Triangles that are really cool !!! There are also some Terrain experiments with real time deformation !!! There are lots AI content Related, including my implementation of the Steering Behaviors 
	</para>
	<para>	
	BE CAREFUL, ITS NOT ORGANIZED at all.
	</para>
	<para>	
	In a close future, i intent to take some of these projects and create a separate Solution for them (and document them, possibly blogging about them also).
	</para>			    
    
    <legacyBold>LTreeLibrary and LTreePipeline</legacyBold>	
    <para>
    Contains the LTree implementation, the HLSL files are in a resource form.
    </para>
    
    <legacyBold>Engine</legacyBold>	
    <para>
    Contains all the engine related code. They are reasonably organized in folder. The external DLLs used in the engine like XNAAnimation.dll is in the DLL folder of the Engine. If you want a custom version of XNAAnimation, you need to build the new DLL, put them in the DLL folder of Engine, build PloobsEngine solution and merge the resulting DLLs (bin folder of Engine Project, dont forget to add the XNA custom pipeline DLLs in the merge also).
    </para>
    </content>
    </section>

      
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>