<?xml version="1.0" encoding="utf-8"?>
<topic id="258feb2d-6ec3-4273-ae1e-24b339b0be81" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>This page will talk about the engine components</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>What the hell are the components ?</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>Components are abstraction to funcionalities that should no be binded
        to one screen only. Its was designed to be completely independent and pluggable. For this we used the Design Pattern Command Processor</para>
        <para> Every component extends IComponent or BasicComponent (Basic Component implements some common stuffs of the IComponent). You only communicate
        with components sending Commands objects through the CommandProcessor. The components contact
        our objects using specifics callbacks.</para>  
        <para>
        Remember. The components are global, they are not binded to screen
        </para>
        <para>
        The CommandProcessor is a static class that is responsible to deliver Commands to the right component. It can send a command syncronous (the command is send when the function is called) or assyncronous (the engine will send, the engine can send maximum number of commands each frame, <legacyBold>ALWAYS PREFFER THIS METHOD OF SENDING COMMANDS IF YOU CAN</legacyBold>)
        </para>
        <para>Before using a component you need to add them, when you dont need it anymore you can remove
        </para>
        
        <para>
        To add a Component just use this:
        <code lang="c#" title=" ">
		COMPONENT COMP = new COMPONENT();
		engine.addcomponent(COMP);		
		</code>
		</para>
		<para>
		Where COMPONENT is the actual component.
		After this we can send commands.
		</para>
        
      </content>      
    </section>
    
    <section address="Section2">
      <title><legacyBold>The input advanced </legacyBold></title>
      <content>                
        <para>       
        This component is reponsible to handle Keyboard and Mouse. You send a command to this component describing an event (Key B being pressed ou Key O released)
        and the component will call a callback when the event happens (the process of associating a key to a callback is called binding in the engine).
        </para>
        <para>
The input advance recieves the following commands:
</para>
<para>
<list class="bullet">
  <listItem><para>ClearInputsCommand.cs -> CLEAR ALL THE BINDINGS </para></listItem>
  <listItem><para>BindMouseCommand.cs -> BIND A MOUSE HANDLER</para></listItem>
  <listItem><para>BindKeyCommand.cs -> BIND A KEYBOARD HANDLER</para></listItem>
  <listItem><para>TurnOffInputMaskCommand.cs -> TURN OF AN INPUT MASK</para></listItem>
  <listItem><para>TurnOnInputMaskCommand.cs -> TURN OF AN INPUT MASK</para></listItem><listItem><para>BindMouseCommand.cs -> BIND A MOUSE HANDLER</para></listItem>  
</list>
</para>
<para>
The BindKeyCommand for example recieve two parameters, the first is SimpleConcreteKeyboardInputPlayable that describe when to fire the event and the function to call when the event is fired. The second is the action. Action are used to add or remove bindings. 
</para>
<para>
We can separate the inputs (key and mouse handlers) in groups and enable and disable them when needed. For this we use the InputMask (parameter in the SimpleConcreteKeyboardInputPlayable ). It is a bit field. The engine has a active InputMask.
</para>
<para>
One example make everything clear:
</para>
<para>
supose that the input advanced has the 101 inputmask enabled.
</para>
<para>
supose that we bind 2 key handler, the first has the input mask 100 and the second has 010.
</para>
<para>
Every frame The inputadvanced will check his Inputmask againt the key handlers input mask.
</para>
<para>
This is done by bit, the 101 in the input advanced InputMask means that the group 100 and the goup 001 are on and the 010 is off.
</para>
<para>
So, only the first handler will have the chance to be activated (depends if the key is pressed ... )
</para>
<para>
Internaly It does this calculation 101 ^ 100 = 100 Activate for the first and
101 ^ 010 != 101 Not Activate
</para>
<para>
You can change the InputAdvance InputMask using TurnOffInputMaskCommand and TurnOnInputMaskCommand (you can use bit field operation to set the mask)
</para>
<para>
There are some special InputMasks like GALL that is 11111111111 (default in inputadvanced) ...
</para>
<para>
GSYSTEM is a very special inputmaks, cause it CANT be turned off (even if you try), if you bind a key handler to it, it will be fired always
</para>
      </content>      
    </section>
    
    
    <section address="Section1">
      <title>Message Deliver</title>
      <content>        
        <para>
        This component is responsible for sending messages between objects (and other stuffs if you want)        
        </para>
        <para>
        Every IObject can recieve messages, everyone (components, screens, triggers, objects ...) can send messages. To see how the
        Iobject handle messages see the Introduction Demos in the IN Code Tutorial.</para>
        <para>
        To be able to recieve a message you need to implement an interface called IRecieveMessageEntity. After this
        you need to register the instance with the EntityMapper (EntityMapper.AddEntity). The engine does this with the IOBjects internally. Just do this if you want to create something that can recieve messages.
        </para>
        <para>
        Messages can be scheduled (to be send in the future), or can be send now.
        </para>
        <para> 
        <legacyBold>DIFERENT</legacyBold> from the common components you dont send a Command to the MessageDeliver to send a message, you use a static method. We choose this way cause messages are critical and need speed.
        </para>
        <para>
        MessageDeliver is a complex system and can handle lots of types of messages and deliver methods. See the examples.
        </para>       
        <para>
        To send a message use:        
        <code lang="c#" title=" ">
		Message m = new Message(send.getId(), PrincipalConstants.InvalidId, "cubo", Priority.MEDIUM, -1, SenderType.OBJECT, null, "CHANGECOLOR");
		MessageDeliver.SendMessage(m);        
		</code>
        </para>
        <para>
        When the message arrive to an IRecieveMessageEntity, the HandleThisMessageType of the entity is called, and you can decide, looking at the message type if you will or will not handle this message. if you return true, the method HandleMessage(Message mes) will be called
        </para>
        <para>
        The IOBject has an easy way to handle messages, you can attach a event to it, just use :        
        <code lang="c#" title=" ">
		object.OnRecieveMessage += new OnRecieveMessage(obj3_OnRecieveMessage);                
		</code>
        </para>
        <para>
        You can also register groups and send messages to it. Look at the Introduction Demos 
        </para>      
      </content>      
    </section>
    
     <section address="Section1">
      <title>Other Components</title>
      <content>
      <para>
      There are lots of other components like Skybox and FPSCounter, they are very simple in usage
      </para>      
      <para>      
      You can create your own components just extending the BasicComponent (prefer this instead of the IComponent)
      </para>      
      </content>
      </section> 
    
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>